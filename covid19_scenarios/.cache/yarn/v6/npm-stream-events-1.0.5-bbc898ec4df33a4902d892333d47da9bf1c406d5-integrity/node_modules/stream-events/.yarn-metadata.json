{
  "manifest": {
    "name": "stream-events",
    "version": "1.0.5",
    "description": "Get an event when you're being sent data or asked for it.",
    "main": "index.js",
    "types": "index.d.ts",
    "files": [
      "index.js",
      "index.d.ts"
    ],
    "scripts": {
      "test": "node ./test"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/stephenplusplus/stream-events"
    },
    "keywords": [
      "stream",
      "events",
      "read",
      "write",
      "duplexify",
      "lazy-stream"
    ],
    "author": {
      "name": "Stephen Sawchuk"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/stephenplusplus/stream-events/issues"
    },
    "homepage": "https://github.com/stephenplusplus/stream-events",
    "devDependencies": {
      "duplexify": "^3.2.0"
    },
    "dependencies": {
      "stubs": "^3.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-stream-events-1.0.5-bbc898ec4df33a4902d892333d47da9bf1c406d5-integrity/node_modules/stream-events/package.json",
    "readmeFilename": "readme.md",
    "readme": "# stream-events\n\n> Get an event when you're being sent data or asked for it.\n\n## About\n\nThis is just a simple thing that tells you when `_read` and `_write` have been called, saving you the trouble of writing this yourself. You receive two events `reading` and `writing`-- no magic is performed.\n\nThis works well with [duplexify](https://github.com/mafintosh/duplexify) or lazy streams, so you can wait until you know you're being used as a stream to do something asynchronous, such as fetching an API token.\n\n\n## Use\n```sh\n$ npm install --save stream-events\n```\n```js\nvar stream = require('stream')\nvar streamEvents = require('stream-events')\nvar util = require('util')\n\nfunction MyStream() {\n  stream.Duplex.call(this)\n  streamEvents.call(this)\n}\nutil.inherits(MyStream, stream.Duplex)\n\nMyStream.prototype._read = function(chunk) {\n  console.log('_read called as usual')\n  this.push(new Buffer(chunk))\n  this.push(null)\n}\n\nMyStream.prototype._write = function() {\n  console.log('_write called as usual')\n}\n\nvar stream = new MyStream\n\nstream.on('reading', function() {\n  console.log('stream is being asked for data')\n})\n\nstream.on('writing', function() {\n  console.log('stream is being sent data')\n})\n\nstream.pipe(stream)\n```\n\n### Using with Duplexify\n```js\nvar duplexify = require('duplexify')\nvar streamEvents = require('stream-events')\nvar fs = require('fs')\n\nvar dup = streamEvents(duplexify())\n\ndup.on('writing', function() {\n  // do something async\n  dup.setWritable(/*writable stream*/)\n})\n\nfs.createReadStream('file').pipe(dup)\n```"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/stream-events/-/stream-events-1.0.5.tgz#bbc898ec4df33a4902d892333d47da9bf1c406d5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/stream-events/-/stream-events-1.0.5.tgz",
    "hash": "bbc898ec4df33a4902d892333d47da9bf1c406d5",
    "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
    "registry": "npm",
    "packageName": "stream-events",
    "cacheIntegrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg== sha1-u8iY7E3zOkkC2JIzPUfam/HEBtU="
  },
  "registry": "npm",
  "hash": "bbc898ec4df33a4902d892333d47da9bf1c406d5"
}