{
  "manifest": {
    "name": "use-debounce",
    "version": "3.4.2",
    "description": "Debounce hook for react",
    "main": "lib/index.js",
    "module": "esm/index.js",
    "types": "./lib",
    "sideEffects": false,
    "scripts": {
      "test": "yarn jest",
      "build": "yarn test && eslint \"src/**.ts\" && rm -rf ./lib/* ./esm/* && yarn build:cjs && yarn build:es",
      "build:cjs": "tsc",
      "build:es": "tsc -m esNext --outDir esm",
      "size": "size-limit"
    },
    "size-limit": [
      {
        "path": "lib/index.js"
      }
    ],
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/xnimorz/use-debounce.git"
    },
    "keywords": [
      "debounce",
      "react-hook",
      "react"
    ],
    "author": {
      "name": "Nikita Mostovoy",
      "url": "nik.mostovoy@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/xnimorz/use-debounce/issues"
    },
    "files": [
      "esm",
      "lib"
    ],
    "peerDependencies": {
      "react": ">=16.8.0"
    },
    "homepage": "https://github.com/xnimorz/use-debounce#readme",
    "devDependencies": {
      "@types/enzyme": "^3.9.3",
      "@types/enzyme-adapter-react-16": "^1.0.5",
      "@types/jest": "^24.0.13",
      "@types/node": "^12.0.4",
      "@types/react": "^16.8.19",
      "@types/react-dom": "^16.8.4",
      "@typescript-eslint/eslint-plugin": "^1.9.0",
      "@typescript-eslint/parser": "^1.9.0",
      "enzyme": "^3.7.0",
      "enzyme-adapter-react-16": "^1.13.2",
      "eslint": "^5.16.0",
      "eslint-config-prettier": "^4.3.0",
      "eslint-config-standard": "^12.0.0",
      "eslint-plugin-import": "^2.17.2",
      "eslint-plugin-node": "^9.0.1",
      "eslint-plugin-prettier": "^3.1.0",
      "eslint-plugin-promise": "^4.1.1",
      "eslint-plugin-react-hooks": "^1.6.0",
      "eslint-plugin-standard": "^4.0.0",
      "jest": "^24.8.0",
      "prettier": "^1.17.1",
      "react": "16.8.3",
      "react-dom": "16.8.3",
      "size-limit": "^1.2.0",
      "ts-jest": "^24.0.2",
      "typescript": "^3.5.1"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-use-debounce-3.4.2-f4333cca59504244b916159600427bf977ec4c46-integrity/node_modules/use-debounce/package.json",
    "readmeFilename": "README.md",
    "readme": "# useDebounce react hook\n\nIt provides:\n\n- [classic debounced callback](#debounced-callbacks)\n- [**value** debouncing](#simple-values-debouncing)\n- [cancel, maxWait and memoization](#advanced-usage)\n\nInstall it with yarn:\n\n```\nyarn add use-debounce\n```\n\nOr with npm:\n\n```\nnpm i use-debounce --save\n```\n\n## Demos\n\nThe simplest way to start playing around with use-debounce is with this CodeSandbox snippet:\nhttps://codesandbox.io/s/kx75xzyrq7\n\nMore complex example with searching for matching countries using debounced input: https://codesandbox.io/s/rr40wnropq (thanks to https://twitter.com/ZephDavies)\n\n## Simple values debouncing\n\nAccording to https://twitter.com/dan_abramov/status/1060729512227467264\n\n```javascript\nimport React, { useState } from 'react';\nimport { useDebounce } from 'use-debounce';\n\nexport default function Input() {\n  const [text, setText] = useState('Hello');\n  const [value] = useDebounce(text, 1000);\n\n  return (\n    <div>\n      <input\n        defaultValue={'Hello'}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n      <p>Actual value: {text}</p>\n      <p>Debounce value: {value}</p>\n    </div>\n  );\n}\n```\n\nThis hook compares prev and next value using shallow equal. It means, setting an object `{}` will trigger debounce timer. If you have to compare objects (https://github.com/xnimorz/use-debounce/issues/27#issuecomment-496828063), you can use `useDebounceCallback`, that is explained below:\n\n## Debounced callbacks\n\nBesides `useDebounce` for values you can debounce callbacks, that is the more commonly understood kind of debouncing.\nExample with Input (and react callbacks): https://codesandbox.io/s/x0jvqrwyq\n\n```js\nimport { useDebouncedCallback } from 'use-debounce';\n\nfunction Input({ defaultValue }) {\n  const [value, setValue] = useState(defaultValue);\n  // Debounce callback\n  const [debouncedCallback] = useDebouncedCallback(\n    // function\n    (value) => {\n      setValue(value);\n    },\n    // delay in ms\n    1000\n  );\n\n  // you should use `e => debouncedCallback(e.target.value)` as react works with synthetic evens\n  return (\n    <div>\n      <input defaultValue={defaultValue} onChange={(e) => debouncedCallback(e.target.value)} />\n      <p>Debounced value: {value}</p>\n    </div>\n  );\n}\n```\n\nExample with Scroll (and native event listeners): https://codesandbox.io/s/32yqlyo815\n\n```js\nfunction ScrolledComponent() {\n  // just a counter to show, that there are no any unnessesary updates\n  const updatedCount = useRef(0);\n  updatedCount.current++;\n\n  const [position, setPosition] = useState(window.pageYOffset);\n\n  // Debounce callback\n  const [scrollHandler] = useDebouncedCallback(\n    // function\n    () => {\n      setPosition(window.pageYOffset);\n    },\n    // delay in ms\n    800\n  );\n\n  useEffect(() => {\n    const unsubscribe = subscribe(window, 'scroll', scrollHandler);\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div style={{ height: 10000 }}>\n      <div style={{ position: 'fixed', top: 0, left: 0 }}>\n        <p>Debounced top position: {position}</p>\n        <p>Component rerendered {updatedCount.current} times</p>\n      </div>\n    </div>\n  );\n}\n```\n\n### Advanced usage\n\n#### Cancel, maxWait and memoization\n\n1. Both `useDebounce` and `useDebouncedCallback` works with `maxWait` option. This params describes the maximum time func is allowed to be delayed before it's invoked.\n2. You can cancel debounce cycle, by calling `cancel` callback\n\nThe full example you can see here https://codesandbox.io/s/4wvmp1xlw4\n\n```javascript\nimport React, { useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useDebouncedCallback } from 'use-debounce';\n\nfunction Input({ defaultValue }) {\n  const [value, setValue] = useState(defaultValue);\n  const [debouncedFunction, cancel] = useDebouncedCallback(\n    (value) => {\n      setValue(value);\n    },\n    500,\n    // The maximum time func is allowed to be delayed before it's invoked:\n    { maxWait: 2000 }\n  );\n\n  // you should use `e => debouncedFunction(e.target.value)` as react works with synthetic evens\n  return (\n    <div>\n      <input defaultValue={defaultValue} onChange={(e) => debouncedFunction(e.target.value)} />\n      <p>Debounced value: {value}</p>\n      <button onClick={cancel}>Cancel Debounce cycle</button>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Input defaultValue=\"Hello world\" />, rootElement);\n```\n\n#### callPending method\n\n`useDebouncedCallback` has `callPending` method. It allows to call the callback manually if it hasn't fired yet. This method is handy to use when the user takes an action that would cause the component to unmount, but you need to execute the callback.\n\n```javascript\nimport React, { useState, useCallback } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nfunction InputWhichFetchesSomeData({ defaultValue, asyncFetchData }) {\n  const [debouncedFunction, cancel, callPending] = useDebouncedCallback(\n    (value) => {\n      asyncFetchData;\n    },\n    500,\n    { maxWait: 2000 }\n  );\n\n  // When the component goes to be unmounted, we will fetch data if the input has changed.\n  useEffect(\n    () => () => {\n      callPending();\n    },\n    [callPending]\n  );\n\n  return <input defaultValue={defaultValue} onChange={(e) => debouncedFunction(e.target.value)} />;\n}\n```\n\n#### leading calls\n\nBoth `useDebounce` and `useDebouncedCallback` work with the `leading` option. This param will execute the function once immediately when called. Subsequent calls will be debounced until the timeout expires.\n\nFor more information on how leading debounce calls work see: https://lodash.com/docs/#debounce\n\n```javascript\nimport React, { useState } from 'react';\nimport { useDebounce } from 'use-debounce';\n\nexport default function Input() {\n  const [text, setText] = useState('Hello');\n  const [value] = useDebounce(text, 1000, { leading: true });\n\n  // value is updated immediately when text changes the first time,\n  // but all subsequent changes are debounced.\n  return (\n    <div>\n      <input\n        defaultValue={'Hello'}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n      <p>Actual value: {text}</p>\n      <p>Debounce value: {value}</p>\n    </div>\n  );\n}\n```\n\n#### Options:\n\nYou can provide additional options as a third argument to both `useDebounce` and `useDebounceCallback`:\n\n| option     | default                       | Description                                                                                                                      | Example                                                                |\n| ---------- | ----------------------------- | -------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------- |\n| maxWait    | -                             | Describes the maximum time func is allowed to be delayed before it's invoked                                                     | https://github.com/xnimorz/use-debounce#cancel-maxwait-and-memoization |\n| leading    | -                             | This param will execute the function once immediately when called. Subsequent calls will be debounced until the timeout expires. | https://github.com/xnimorz/use-debounce#leading-calls                  |\n| equalityFn | (prev, next) => prev === next | Comparator function which shows if timeout should be started                                                                     |                                                                        |\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Nikita Mostovoy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/use-debounce/-/use-debounce-3.4.2.tgz#f4333cca59504244b916159600427bf977ec4c46",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/use-debounce/-/use-debounce-3.4.2.tgz",
    "hash": "f4333cca59504244b916159600427bf977ec4c46",
    "integrity": "sha512-rW44wZaFPh3XiwUzGBA0JRuklpbfKO/szU/5CYD2Q/erLmCem63lJ650p3a+NJE6S+g0rulKtBOfa/3rw/GN+Q==",
    "registry": "npm",
    "packageName": "use-debounce",
    "cacheIntegrity": "sha512-rW44wZaFPh3XiwUzGBA0JRuklpbfKO/szU/5CYD2Q/erLmCem63lJ650p3a+NJE6S+g0rulKtBOfa/3rw/GN+Q== sha1-9DM8yllQQkS5FhWWAEJ7+XfsTEY="
  },
  "registry": "npm",
  "hash": "f4333cca59504244b916159600427bf977ec4c46"
}