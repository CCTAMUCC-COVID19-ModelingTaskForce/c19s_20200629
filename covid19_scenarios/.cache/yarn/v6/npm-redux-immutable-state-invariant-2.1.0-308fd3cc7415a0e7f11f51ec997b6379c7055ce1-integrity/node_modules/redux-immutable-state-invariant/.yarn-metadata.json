{
  "manifest": {
    "name": "redux-immutable-state-invariant",
    "version": "2.1.0",
    "description": "Redux middleware that detects mutations between and outside redux dispatches. For development use only.",
    "main": "dist/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/leoasis/redux-immutable-state-invariant.git"
    },
    "scripts": {
      "clean": "rm -rf dist",
      "build": "babel --out-dir dist src",
      "test": "mocha --compilers js:babel-core/register",
      "test:coverage": "rm -rf coverage/ && istanbul cover --report lcov _mocha -- --compilers js:babel-core/register test/*.spec.js --recursive",
      "coveralls": "cat ./coverage/lcov.info | ./node_modules/.bin/coveralls",
      "prepublish": "npm run clean && npm run build",
      "example": "cd example && rm -rf node_modules/redux-immutable-state-invariant && yarn install && yarn start"
    },
    "author": {
      "name": "Leonardo Andres Garcia Crespo",
      "email": "leoasis@gmail.com"
    },
    "license": "MIT",
    "devDependencies": {
      "babel-cli": "6.23.0",
      "babel-core": "6.23.1",
      "babel-preset-es2015": "6.22.0",
      "babel-preset-stage-3": "6.22.0",
      "coveralls": "2.12.0",
      "expect": "1.20.2",
      "istanbul": "0.4.5",
      "mocha": "3.2.0"
    },
    "dependencies": {
      "invariant": "^2.1.0",
      "json-stringify-safe": "^5.0.1"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-redux-immutable-state-invariant-2.1.0-308fd3cc7415a0e7f11f51ec997b6379c7055ce1-integrity/node_modules/redux-immutable-state-invariant/package.json",
    "readmeFilename": "README.md",
    "readme": "# redux-immutable-state-invariant\n\n[![Build Status](https://travis-ci.org/leoasis/redux-immutable-state-invariant.png)](https://travis-ci.org/leoasis/redux-immutable-state-invariant)\n[![Coverage Status](https://coveralls.io/repos/github/leoasis/redux-immutable-state-invariant/badge.svg?branch=master)](https://coveralls.io/github/leoasis/redux-immutable-state-invariant?branch=master)\n\nRedux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches. **For development use only!**\n\n## Why?\n\nBecause [you're not allowed to mutate your state in your reducers](http://redux.js.org/docs/Troubleshooting.html#never-mutate-reducer-arguments)! And by extension, you shouldn't mutate them either outside. In order to change state in your app, you should always return a new instance of your state with the changes.\n\nIf you're using a library such as `Immutable.js`, this is automatically done for you since the structures provided by that library don't allow you to mutate them (as long as you don't have mutable stuff as values in those collections). However, if you're using regular objects and arrays, you should be careful to avoid mutations.\n\n## How to install\n\nThis lib is intended to use only during development. **Don't use this in production!**\n\n```js\nnpm install --save-dev redux-immutable-state-invariant\n```\n\n## How to use\n\nAs said above, **don't use this in production!** It involves a lot of object copying and will degrade your app's performance. This is intended to be a tool to aid you in development and help you catch bugs.\n\nTo use it, just add it as a middleware in your redux store:\n\n```js\nconst {applyMiddleware, combineReducers, createStore} = require('redux');\nconst thunk = require('redux-thunk');\nconst reducer = require('./reducers/index');\n\n// Be sure to ONLY add this middleware in development!\nconst middleware = process.env.NODE_ENV !== 'production' ?\n  [require('redux-immutable-state-invariant').default(), thunk] :\n  [thunk];\n\n// Note passing middleware as the last argument to createStore requires redux@>=3.1.0\nconst store = createStore(\n  reducer,\n  applyMiddleware(...middleware)\n);\n```\n\nThen if you're doing things correctly, you should see nothing different. But if you don't, that is, if you're mutating your data somewhere in your app either in a dispatch or between dispatches, an error will be thrown with a (hopefully) descriptive message.\n\n## API\n\n#### `immutableStateInvariantMiddleware({ isImmutable, ignore })`\n\nThe default export is a factory to create the middleware. Supports an `options` argument (optional) to customize middleware behavior. It returns the `middleware` function when called. The following properties are supported in `options`:\n\n**Options**\n\n- **isImmutable** `function(value)` - Specify if a value should be treated as immutable or not. The default implementation will return `true` for primitive types (like numbers, strings, booleans, `null` and `undefined`). Useful if some state of your app uses a library like `Immutable.js` and you want to let the middleware know that the data structures are indeed immutable.\n\n- **ignore** `string[]` - specify branch(es) of the state object to ignore when detecting for mutations. The elements of the array should be dot-separated \"path\" strings that match named nodes from the root state.\n\n    ```js\n    // example: ignore mutation detection along the 'foo' & 'bar.thingsToIgnore' branches\n    const middleware = immutableStateInvariantMiddleware({\n      ignore: [\n        'foo',\n        'bar.thingsToIgnore'\n      ]\n    });\n    ```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Leonardo Andres Garcia Crespo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/redux-immutable-state-invariant/-/redux-immutable-state-invariant-2.1.0.tgz#308fd3cc7415a0e7f11f51ec997b6379c7055ce1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/redux-immutable-state-invariant/-/redux-immutable-state-invariant-2.1.0.tgz",
    "hash": "308fd3cc7415a0e7f11f51ec997b6379c7055ce1",
    "integrity": "sha512-3czbDKs35FwiBRsx/3KabUk5zSOoTXC+cgVofGkpBNv3jQcqIe5JrHcF5AmVt7B/4hyJ8MijBIpCJ8cife6yJg==",
    "registry": "npm",
    "packageName": "redux-immutable-state-invariant",
    "cacheIntegrity": "sha512-3czbDKs35FwiBRsx/3KabUk5zSOoTXC+cgVofGkpBNv3jQcqIe5JrHcF5AmVt7B/4hyJ8MijBIpCJ8cife6yJg== sha1-MI/TzHQVoOfxH1HsmXtjeccFXOE="
  },
  "registry": "npm",
  "hash": "308fd3cc7415a0e7f11f51ec997b6379c7055ce1"
}