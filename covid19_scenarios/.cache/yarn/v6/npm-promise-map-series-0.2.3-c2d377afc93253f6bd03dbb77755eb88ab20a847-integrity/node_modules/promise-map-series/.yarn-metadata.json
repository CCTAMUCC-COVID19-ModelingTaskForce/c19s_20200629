{
  "manifest": {
    "name": "promise-map-series",
    "description": "Map over array avoiding parallel execution, using promises",
    "version": "0.2.3",
    "author": {
      "name": "Jo Liss",
      "email": "joliss42@gmail.com"
    },
    "main": "index.js",
    "files": [
      "index.js"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/joliss/promise-map-series"
    },
    "dependencies": {
      "rsvp": "^3.0.14"
    },
    "devDependencies": {
      "tape": "^2.5.0"
    },
    "scripts": {
      "test": "tape test.js"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-promise-map-series-0.2.3-c2d377afc93253f6bd03dbb77755eb88ab20a847-integrity/node_modules/promise-map-series/package.json",
    "readmeFilename": "README.md",
    "readme": "# promise-map-series\n\n[![Build Status](https://travis-ci.org/joliss/promise-map-series.png?branch=master)](https://travis-ci.org/joliss/promise-map-series)\n\nCall an iterator function for each element of an array in series, ensuring\nthat no iterator is called before the promise returned by the previous\niterator is fulfilled, in effect preventing parallel execution. Like\n[async.mapSeries](https://github.com/caolan/async#mapseriesarr-iterator-callback),\nbut for promises.\n\n## Installation\n\n```bash\nnpm install --save promise-map-series\n```\n\n## Usage\n\n```js\nvar mapSeries = require('promise-map-series')\n\nmapSeries(array, iterator[, thisArg]).then(function (newArray) {\n  ...\n})\n```\n\n* **`array`**: An array of values (should not be promises).\n\n* **`iterator`**: Function that returns a promise or a value for the new\n  array. The `iterator` will be called once for each element. If `iterator`\n  returns a promise, then `iterator` will only be called for the next element\n  once that promise is fulfilled. If the promise is rejected or `iterator`\n  throws an error, iteration will stop immediately and `mapSeries` returns a\n  rejected promise. The `iterator` function receives three arguments:\n\n    * **`item`**: The current item in the array.\n\n    * **`index`**: The current index in the array.\n\n    * **`array`**: The original `array` argument.\n\n* **`thisArg`** (optional): Value to use as `this` when executing `iterator`.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014 Jo Liss\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/promise-map-series/-/promise-map-series-0.2.3.tgz#c2d377afc93253f6bd03dbb77755eb88ab20a847",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/promise-map-series/-/promise-map-series-0.2.3.tgz",
    "hash": "c2d377afc93253f6bd03dbb77755eb88ab20a847",
    "integrity": "sha1-wtN3r8kyU/a9A9u3d1XriKsgqEc=",
    "registry": "npm",
    "packageName": "promise-map-series",
    "cacheIntegrity": "sha512-wx9Chrutvqu1N/NHzTayZjE1BgIwt6SJykQoCOic4IZ9yUDjKyVYrpLa/4YCNsV61eRENfs29hrEquVuB13Zlw== sha1-wtN3r8kyU/a9A9u3d1XriKsgqEc="
  },
  "registry": "npm",
  "hash": "c2d377afc93253f6bd03dbb77755eb88ab20a847"
}