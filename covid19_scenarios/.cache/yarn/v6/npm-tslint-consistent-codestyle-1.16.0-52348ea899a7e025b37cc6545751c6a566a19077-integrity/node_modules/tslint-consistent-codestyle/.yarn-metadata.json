{
  "manifest": {
    "name": "tslint-consistent-codestyle",
    "version": "1.16.0",
    "description": "Additional rules to enforce constistent code style with tslint",
    "repository": {
      "type": "git",
      "url": "https://github.com/ajafff/tslint-consistent-codestyle"
    },
    "main": "rules/index.js",
    "scripts": {
      "test": "tslint --test test/rules/*/*",
      "precompile": "rimraf '{src,rules}/*.js'",
      "compile": "tsc -p .",
      "prepublishOnly": "npm run verify",
      "lint:wotan": "wotan",
      "lint:tslint": "wotan -m @fimbul/valtyr",
      "lint": "run-p lint:*",
      "verify": "run-s compile lint coverage",
      "precoverage": "rimraf coverage .nyc_output",
      "coverage": "nyc npm test",
      "report-coverage": "cat ./coverage/lcov.info | coveralls",
      "postpublish": "git push origin master --tags && npm run github-release",
      "github-release": "GITHUB_TOKEN=$(cat ~/github_token.txt) github-release-from-changelog"
    },
    "keywords": [
      "tslint",
      "custom-rules",
      "rules",
      "stylish",
      "lint",
      "linting",
      "linter",
      "tslint-plugin"
    ],
    "license": "MIT",
    "dependencies": {
      "@fimbul/bifrost": "^0.21.0",
      "tslib": "^1.7.1",
      "tsutils": "^2.29.0"
    },
    "devDependencies": {
      "@fimbul/mithotyn": "^0.17.0",
      "@fimbul/valtyr": "^0.21.0",
      "@fimbul/wotan": "^0.21.1",
      "coveralls": "^3.0.0",
      "github-release-from-changelog": "^2.0.0",
      "npm-run-all": "^4.1.1",
      "nyc": "^13.2.0",
      "rimraf": "^3.0.0",
      "tslint": "^5.8.0",
      "typescript": "3.3"
    },
    "peerDependencies": {
      "tslint": "^5.0.0",
      "typescript": ">=2.1.4 || >=2.1.0-dev || >=2.2.0-dev || >=2.3.0-dev || >=2.4.0-dev || >=2.5.0-dev || >=2.6.0-dev || >=2.7.0-dev || >=2.8.0-dev || >=2.9.0-dev || >=3.0.0-dev || >=3.1.0-dev || >=3.2.0-dev || >=3.3.0-dev || >=3.4.0-dev"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-tslint-consistent-codestyle-1.16.0-52348ea899a7e025b37cc6545751c6a566a19077-integrity/node_modules/tslint-consistent-codestyle/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm version](http://img.shields.io/npm/v/tslint-consistent-codestyle.svg)](https://npmjs.org/package/tslint-consistent-codestyle)\n[![Downloads](http://img.shields.io/npm/dm/tslint-consistent-codestyle.svg)](https://npmjs.org/package/tslint-consistent-codestyle)\n[![CircleCI](https://circleci.com/gh/ajafff/tslint-consistent-codestyle.svg?style=shield)](https://circleci.com/gh/ajafff/tslint-consistent-codestyle)\n[![Coverage Status](https://coveralls.io/repos/github/ajafff/tslint-consistent-codestyle/badge.svg)](https://coveralls.io/github/ajafff/tslint-consistent-codestyle)\n[![Join the chat at https://gitter.im/ajafff/tslint-consistent-codestyle](https://badges.gitter.im/ajafff/tslint-consistent-codestyle.svg)](https://gitter.im/ajafff/tslint-consistent-codestyle?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Greenkeeper badge](https://badges.greenkeeper.io/ajafff/tslint-consistent-codestyle.svg)](https://greenkeeper.io/)\n\n# Purpose\n\nThe rules in this package can be used to enforce consistent code style.\n\n# Usage\n\nInstall from npm to your devDependencies  (https://www.npmjs.com/package/tslint-consistent-codestyle)\n\n```sh\nnpm install --save-dev tslint-consistent-codestyle\n```\n\n## With TSLint\n\nConfigure tslint to use `tslint-consistent-codestyle`:\n\nThis package provides an empty configuration preset that just contains the `rulesDirectory`. That means you can easily use the rules in this package, but don't get any predefined configuration. To use it, just add it to the `extends` array in your `tslint.json`:\n\n```javascript\n{\n   \"extends\": [\"tslint-consistent-codestyle\"]\n   \"rules\": {\n     ...\n   }\n}\n```\n\nAs of `tslint@5.2.0` you can also use `tslint-consistent-codestyle` as `rulesDirectory`:\n\n```javascript\n{\n   \"rulesDirectory\": [\"tslint-consistent-codestyle\"]\n   \"rules\": {\n     ...\n   }\n}\n```\n\nNow configure some of the new rules.\n\n## With Wotan\n\nThis package provides all rules for both TSLint and [Wotan](https://github.com/fimbullinter/wotan/blob/master/packages/wotan/README.md).\n\nTo use rules from this package, add the following to your `.wotanrc.yaml` file:\n\n```yaml\nextends:\n  - tslint-consistent-codestyle # makes rules from the package available with the 'tcc/' prefix\nrules: # now configure the rules you want to use, remember to use the 'tcc/' prefix\n  tcc/no-collapsible-if: error\n  tcc/no-unused:\n    options: 'ignore-parameters'\n```\n\n# Rules\n\nRule | Description\n---- | ----\n[const-parameters](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/const-parameters.md) | Declare parameters as `const` with JsDoc `/** @const */`\n[early-exit](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/early-exit.md) | Recommends to use an early exit instead of a long `if` block.\n[ext-curly](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/ext-curly.md) | Enforces where to consistently use curly braces where not strictly necessary.\n[naming-convention](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/naming-convention.md) | Fine grained configuration to enforce consistent naming for almost everything. E.g. variables, functions, classes, methods, parameters, enums, etc.\n[no-as-type-assertion](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-as-type-assertion.md) | Prefer `<Type>foo` over `foo as Type`.\n[no-accessor-recursion](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-accessor-recursion.md) | Don't use `get foo() { return this.foo; }`. This is most likely a typo.\n[no-collapsible-if](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-collapsible-if.md) | Identifies nested if statements that can be combined into one.\n[no-else-after-return](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-else-after-return.md) | Like [no-else-return from eslint](http://eslint.org/docs/rules/no-else-return).\n[no-return-undefined](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-return-undefined.md) | Just `return;` instead of `return undefined;`.\n[no-static-this](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-static-this.md) | Ban the use of `this` in static methods.\n[no-unnecessary-else](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-unnecessary-else.md) | Like `no-else-after-return` but better.\n[no-unnecessary-type-annotation](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-unnecessary-type-annotation.md) | Finds type annotations that can safely be removed.\n[no-unused](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-unused.md) | Find dead code and unused declarations.\n[no-var-before-return](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/no-var-before-return.md) | Checks if the returned variable is declared right before the `return` statement.\n[object-shorthand-properties-first](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/object-shorthand-properties-first.md) | Shorthand properties should precede regular properties.\n[parameter-properties](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/parameter-properties.md) | Configure how and where to declare parameter properties.\n[prefer-const-enum](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/prefer-const-enum.md) | Prefer `const enum` where possible.\n[prefer-while](https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/prefer-while.md) | Prefer a `while` loop instead of a `for` loop without initializer and incrementer.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Klaus Meinhardt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tslint-consistent-codestyle/-/tslint-consistent-codestyle-1.16.0.tgz#52348ea899a7e025b37cc6545751c6a566a19077",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tslint-consistent-codestyle/-/tslint-consistent-codestyle-1.16.0.tgz",
    "hash": "52348ea899a7e025b37cc6545751c6a566a19077",
    "integrity": "sha512-ebR/xHyMEuU36hGNOgCfjGBNYxBPixf0yU1Yoo6s3BrpBRFccjPOmIVaVvQsWAUAMdmfzHOCihVkcaMfimqvHw==",
    "registry": "npm",
    "packageName": "tslint-consistent-codestyle",
    "cacheIntegrity": "sha512-ebR/xHyMEuU36hGNOgCfjGBNYxBPixf0yU1Yoo6s3BrpBRFccjPOmIVaVvQsWAUAMdmfzHOCihVkcaMfimqvHw== sha1-UjSOqJmn4CWzfMZUV1HGpWahkHc="
  },
  "registry": "npm",
  "hash": "52348ea899a7e025b37cc6545751c6a566a19077"
}