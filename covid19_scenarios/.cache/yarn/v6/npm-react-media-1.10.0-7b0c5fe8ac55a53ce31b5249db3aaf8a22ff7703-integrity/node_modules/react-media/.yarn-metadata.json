{
  "manifest": {
    "name": "react-media",
    "version": "1.10.0",
    "description": "CSS media queries for React",
    "repository": {
      "type": "git",
      "url": "https://github.com/ReactTraining/react-media.git"
    },
    "license": "MIT",
    "author": {
      "name": "Michael Jackson"
    },
    "files": [
      "cjs",
      "esm",
      "umd",
      "index.d.ts"
    ],
    "main": "index.js",
    "module": "esm/react-media.js",
    "unpkg": "umd/react-media.js",
    "types": "index.d.ts",
    "scripts": {
      "build": "rollup -c",
      "prepublishOnly": "npm run build",
      "clean": "git clean -fdX .",
      "lint": "eslint modules",
      "test": "jest",
      "testTypes": "tsc --noEmit --jsx react typeTest.tsx"
    },
    "peerDependencies": {
      "react": ">=15 || ^0.14.7"
    },
    "dependencies": {
      "@babel/runtime": "^7.2.0",
      "invariant": "^2.2.2",
      "json2mq": "^0.2.0",
      "prop-types": "^15.5.10"
    },
    "devDependencies": {
      "@babel/core": "^7.1.6",
      "@babel/plugin-proposal-class-properties": "^7.1.0",
      "@babel/plugin-proposal-export-default-from": "^7.0.0",
      "@babel/plugin-transform-runtime": "^7.1.0",
      "@babel/preset-env": "^7.1.6",
      "@babel/preset-react": "^7.0.0",
      "@types/react": "^16.8.18",
      "babel-core": "^7.0.0-bridge.0",
      "babel-eslint": "^10.0.1",
      "babel-jest": "^23.6.0",
      "babel-plugin-dev-expression": "^0.2.1",
      "babel-plugin-external-helpers": "^6.22.0",
      "babel-plugin-transform-react-remove-prop-types": "^0.4.12",
      "babel-preset-env": "^1.6.1",
      "babel-preset-react": "^6.11.1",
      "babel-preset-stage-1": "^6.5.0",
      "eslint": "^5.9.0",
      "eslint-plugin-import": "^2.14.0",
      "eslint-plugin-jest": "^22.1.0",
      "eslint-plugin-react": "^7.11.1",
      "gzip-size": "^3.0.0",
      "jest": "^23.6.0",
      "pascal-case": "^2.0.1",
      "pretty-bytes": "^4.0.2",
      "react": "^15.4.1 || ^0.14.7",
      "react-dom": "^15.3.0 || ^0.14.7",
      "rollup": "^0.67.3",
      "rollup-plugin-babel": "^4.0.3",
      "rollup-plugin-commonjs": "^9.2.0",
      "rollup-plugin-node-resolve": "^3.4.0",
      "rollup-plugin-replace": "^2.1.0",
      "rollup-plugin-size-snapshot": "^0.7.0",
      "rollup-plugin-uglify": "^6.0.0",
      "typescript": "^3.4.5"
    },
    "keywords": [
      "react",
      "media",
      "media query",
      "query",
      "css",
      "responsive"
    ],
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-react-media-1.10.0-7b0c5fe8ac55a53ce31b5249db3aaf8a22ff7703-integrity/node_modules/react-media/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-media [![Travis][build-badge]][build] [![npm package][npm-badge]][npm]\n\n[build-badge]: https://img.shields.io/travis/ReactTraining/react-media/master.svg?style=flat-square\n[build]: https://travis-ci.org/ReactTraining/react-media\n[npm-badge]: https://img.shields.io/npm/v/react-media.svg?style=flat-square\n[npm]: https://www.npmjs.org/package/react-media\n\n[`react-media`](https://www.npmjs.com/package/react-media) is a CSS media query component for React.\n\nA `<Media>` component listens for matches to a [CSS media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries) and renders stuff based on whether the query matches or not.\n\n## Installation\n\nUsing npm:\n\n    $ npm install --save react-media\n\nThen, use as you would anything else:\n\n```js\n// using ES modules\nimport Media from 'react-media';\n\n// using CommonJS modules\nvar Media = require('react-media');\n```\n\nThe UMD build is also available on [unpkg](https://unpkg.com):\n\n```html\n<script src=\"https://unpkg.com/react-media\"></script>\n```\n\nYou can find the library on `window.ReactMedia`.\n\n## Basic usage\n\n### queries\n\nRender a `<Media>` component with a `queries` prop whose value is an object,\nwhere each value is a valid\n[CSS media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries).\nThe `children` prop should be a function whose argument will be an object with the\nsame keys as your `queries` object, and whose values are booleans indicating whether\neach query matches.\n\n```jsx\nimport React, { Fragment } from 'react';\nimport Media from 'react-media';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Media queries={{\n          small: \"(max-width: 599px)\",\n          medium: \"(min-width: 600px) and (max-width: 1199px)\",\n          large: \"(min-width: 1200px)\"\n        }}>\n          {matches => (\n            <Fragment>\n              {matches.small && <p>I am small!</p>}\n              {matches.medium && <p>I am medium!</p>}\n              {matches.large && <p>I am large!</p>}\n            </Fragment>\n          )}\n        </Media>\n      </div>\n    );\n  }\n}\n```\n\n### query\n\nAlternatively, if you only need to match against a single media query, the `query` prop provides a less-verbose approach.\nMore documentation about the difference betwen `query` and `queries` can be found below.\n\n```jsx\nimport React, { Fragment } from 'react';\nimport Media from 'react-media';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Media query=\"(max-width: 599px)\" render={() =>\n          (\n            <p>I am small!</p>\n          )}\n        />\n      </div>\n    );\n  }\n}\n```\n\n## `query` vs `queries`\n\nThe `queries` prop was added to allow for multiple media queries to be matched without excessive nesting or other\nworkarounds. The `query` prop was retained out of recognition that a single query covers many use cases, and there\nis already a lot of usage that would be a pain to migrate.\n\nThe salient points:\n\n* **You cannot use them together**: if you do, the component will throw an error. This is to avoid confusion around\nprecedence.\n* **The render methods differ slightly**: for the `queries` prop, the `render` and child JSX methods will render if\n**at least one** of the given queries is matched. The `query` prop renders if the given query matches.\n\n\n## `queries`\n\nIn addition to passing a valid media query string, the `queries`\nprop will also accept an object of objects whose forms are similar to\n[React's built-in support for inline style objects](https://facebook.github.io/react/tips/inline-styles.html)\nin e.g. `<div style>`. These objects are converted to CSS\nmedia queries via [json2mq](https://github.com/akiran/json2mq/blob/master/README.md#usage).\n\n```jsx\nimport React from 'react';\nimport Media from 'react-media';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>These two Media components are equivalent</h1>\n\n        <Media queries={{ small: { maxWidth: 599 } }}>\n          {matches =>\n            matches.small ? (\n              <p>The document is less than 600px wide.</p>\n            ) : (\n              <p>The document is at least 600px wide.</p>\n            )\n          }\n        </Media>\n\n        <Media queries={{ small: \"(max-width: 599px)\" }}>\n          {matches =>\n            matches.small ? (\n              <p>The document is less than 600px wide.</p>\n            ) : (\n              <p>The document is at least 600px wide.</p>\n            )\n          }\n        </Media>\n      </div>\n    );\n  }\n}\n```\n\nKeys of media query objects are camel-cased and numeric values automatically get the `px` suffix. See the [json2mq docs](https://github.com/akiran/json2mq/blob/master/README.md#usage) for more examples of queries you can construct using objects.\n\n### Render props\n\nThere are three props which allow you to render your content. They each serve a subtly different purpose.\n\n|prop|description|example|\n|---|---|---|\n|render|Only invoked when **at least one** of the queries matches. This is a nice shorthand if you only want to render something for a matching query.|`<Media queries={{ foo: ... }} render={() => <p>I matched!</p>} />`|\n|children (function)|Receives an object of booleans whose keys are the same as the `queries` prop, indicating whether each media query matched. Use this prop if you need to render different output for each of specified queries.|`<Media queries={{ foo: ... }}>{matches => matches.foo ? <p>I matched!</p> : <p>I didn't match</p>}</Media>`|\n|children (react element)|If you render a regular React element within `<Media>`, it will render that element when **at least one** of the queries matches. This method serves the same purpose as the `render` prop, however, you'll create component instances regardless of whether the queries match or not. Hence, using the `render` prop is preferred ([more info](https://github.com/ReactTraining/react-media/issues/70#issuecomment-347774260)).|`<Media queries={{ ... }}><p>I matched!</p></Media>`|\n\n## `query`\n\nIn addition to passing a valid media query string, the `query` prop will also accept an object, similar to [React's built-in support for inline style objects](https://facebook.github.io/react/tips/inline-styles.html) in e.g. `<div style>`. These objects are converted to CSS media queries via [json2mq](https://github.com/akiran/json2mq/blob/master/README.md#usage).\n\n```jsx\nimport React from 'react';\nimport Media from 'react-media';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>These two Media components are equivalent</h1>\n\n        <Media query={{ maxWidth: 599 }}>\n          {matches =>\n            matches ? (\n              <p>The document is less than 600px wide.</p>\n            ) : (\n              <p>The document is at least 600px wide.</p>\n            )\n          }\n        </Media>\n\n        <Media query=\"(max-width: 599px)\">\n          {matches =>\n            matches ? (\n              <p>The document is less than 600px wide.</p>\n            ) : (\n              <p>The document is at least 600px wide.</p>\n            )\n          }\n        </Media>\n      </div>\n    );\n  }\n}\n```\n\nKeys of media query objects are camel-cased and numeric values automatically get the `px` suffix. See the [json2mq docs](https://github.com/akiran/json2mq/blob/master/README.md#usage) for more examples of queries you can construct using objects.\n\n### Render props\n\nThere are three props which allow you to render your content. They each serve a subtly different purpose.\n\n|prop|description|example|\n|---|---|---|\n|render|Only invoked when the query matches. This is a nice shorthand if you only want to render something for a matching query.|`<Media query=\"...\" render={() => <p>I matched!</p>} />`|\n|children (function)|Receives a single boolean element, indicating whether the media query matched. Use this prop if you need to render something when the query doesn't match.|`<Media query=\"...\">{matches => matches ? <p>I matched!</p> : <p>I didn't match</p>}</Media>`|\n|children (react element)|If you render a regular React element within `<Media>`, it will render that element when the query matches. This method serves the same purpose as the `render` prop, however, you'll create component instances regardless of whether the query matches or not. Hence, using the `render` prop is preferred ([more info](https://github.com/ReactTraining/react-media/issues/70#issuecomment-347774260)).|`<Media query=\"...\"><p>I matched!</p></Media>`|\n\n## `onChange`\n\nYou can specify an optional `onChange` prop, which is a callback function that will be invoked when the status of the media queries changes. This can be useful for triggering side effects, independent of the render lifecycle.\n\n```jsx\nimport React from 'react';\nimport Media from 'react-media';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Media\n          query={{ small: \"(max-width: 599px)\" }}\n          onChange={matches =>\n            matches.small\n              ? alert('The document is less than 600px wide.')\n              : alert('The document is at least 600px wide.')\n          }\n        />\n      </div>\n    );\n  }\n}\n```\n\n### Server-side rendering (SSR)\n\nIf you render a `<Media>` component on the server, it will match by default. You can override the default behavior by setting the `defaultMatches` prop.\n\nWhen rendering on the server you can use the `defaultMatches` prop to set the initial state on the server to match whatever you think it will be on the client. You can detect the user's device [by analyzing the user-agent string](https://github.com/ReactTraining/react-media/pull/50#issuecomment-415700905) from the HTTP request in your server-side rendering code.\n\n```js\ninitialState = {\n  device: 'mobile' // add your own guessing logic here, based on user-agent for example\n};\n\n<div>\n  <Media\n    queries={{ medium: \"(max-width: 500px)\" }}\n    defaultMatches={{ medium: state.device === 'mobile' }}\n    render={() => <Text>Render me below medium breakpoint.</Text>}\n  />\n\n  <Media\n    queries={{ medium: \"(min-width: 501px)\" }}\n    defaultMatches={{ medium: state.device === 'desktop' }}\n    render={() => <Text>Render me above medium breakpoint.</Text>}\n  />\n</div>;\n```\n\n## `targetWindow`\n\nAn optional `targetWindow` prop can be specified if you want the `queries` to be evaluated against a different window object than the one the code is running in. This can be useful if you are rendering part of your component tree to an iframe or [a popup window](https://hackernoon.com/using-a-react-16-portal-to-do-something-cool-2a2d627b0202). See [this PR thread](https://github.com/ReactTraining/react-media/pull/78) for context.\n\n## About\n\n`react-media` is developed and maintained by [React Training](https://reacttraining.com). If you're interested in learning more about what React can do for your company, please [get in touch](mailto:hello@reacttraining.com)!\n",
    "licenseText": "MIT License\n\nCopyright (c) 2016-2017 React Training\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-media/-/react-media-1.10.0.tgz#7b0c5fe8ac55a53ce31b5249db3aaf8a22ff7703",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-media/-/react-media-1.10.0.tgz",
    "hash": "7b0c5fe8ac55a53ce31b5249db3aaf8a22ff7703",
    "integrity": "sha512-FjgYmFoaPTImST06jqotuu0Mk8LOXiGYS/fIyiXuLnf20l3DPniBwtrxi604/HxxjqvmHS3oz5rAwnqdvosV4A==",
    "registry": "npm",
    "packageName": "react-media",
    "cacheIntegrity": "sha512-FjgYmFoaPTImST06jqotuu0Mk8LOXiGYS/fIyiXuLnf20l3DPniBwtrxi604/HxxjqvmHS3oz5rAwnqdvosV4A== sha1-ewxf6KxVpTzjG1JJ2zqviiL/dwM="
  },
  "registry": "npm",
  "hash": "7b0c5fe8ac55a53ce31b5249db3aaf8a22ff7703"
}