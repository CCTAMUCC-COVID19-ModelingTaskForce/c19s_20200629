{
  "manifest": {
    "name": "jsurl",
    "description": "URL friendly JSON-like formatting and parsing",
    "version": "0.1.5",
    "license": "MIT",
    "homepage": "http://github.com/Sage/jsurl",
    "author": {
      "name": "Bruno Jouhier"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/Sage/jsurl.git"
    },
    "devDependencies": {
      "qunit": "^0.7.7"
    },
    "scripts": {
      "test": "node test"
    },
    "main": "index.js",
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-jsurl-0.1.5-2a5c8741de39cacafc12f448908bf34e960dcee8-integrity/node_modules/jsurl/package.json",
    "contributors": [
      {
        "name": "Bruno Jouhier",
        "email": "bruno.jouhier@sage.com"
      }
    ],
    "readmeFilename": "README.md",
    "readme": "## JSURL\n\nJSURL is an alternative to JSON + URL encoding (or JSON + base64 encoding). \nIt makes it handy to pass complex values via URL query parameters.\n\nJSURL has been designed to be:\n\n* Compact: its output is much more compact than JSON + URL encoding (except in pathological cases). \n  It is even often slightly more compact than regular JSON!\n* Readable: its output is much more readable than JSON + URL encoding.\n* Foolproof: its output only contains characters that are unaffected by URL encoding/decoding. \n  There is no risk of missing a URL encoding/decoding pass, or of messing up a JSURL string by applying \n  an extra URL encoding or decoding pass.\n* Easy to generate and parse\n\n## Syntax\n\nThink of it as JSON with the following changes:\n\n* Curly braces (`{` and `}`) replaced by parentheses (`(` and `)`)\n* Square brackets (`[` and `]`) replaced by `(~` and `)`\n* Property names unquoted (but escaped -- see below).\n* String values prefixed by a single quote (`'`) and escaped\n* All other JSON punctuation (colon `:` and comma `,`) replaced by tildes (`~`)\n* An extra tilde (`~`) at the very beginning.\n\nProperty names and string values are escaped as follows:\n\n* Letters, digits, underscore (`_`), hyphen (`-`) and dot (`.`) are preserved.\n* Dollar sign (`$`) is replaced by exclamation mark (`!`)\n* Other characters with UNICODE value <= `0xff` are encoded as `*XX`\n* Characters with UNICODE value > `0xff` are encoded as `**XXXX`\n\n## Examples\n\nJSON:\n\n``` json\n{\"name\":\"John Doe\",\"age\":42,\"children\":[\"Mary\",\"Bill\"]}\n```\n\nJSON + URL encoding:\n\n```\n%7B%22name%22%3A%22John%20Doe%22%2C%22age%22%3A42%2C%22children%22%3A%5B%22Mary%22%2C%22Bill%22%5D%7D\n```\n\nJSURL:\n\n``` jsurl\n~(name~'John*20Doe~age~42~children~(~'Mary~'Bill))\n```\n\n## API\n\n``` javascript\nvar JSURL = require(\"jsurl\");\n\nstr = JSURL.stringify(obj);\nobj = JSURL.parse(str);\n\n// return def instead of throwing on error\nobj = JSURL.tryParse(str[, def]);\n```\n\n# Installation\n\nThe easiest way to install `jsurl` is with NPM:\n\n```sh\nnpm install jsurl\n```\n\n## License\n\nThis work is licensed under the [MIT license](http://en.wikipedia.org/wiki/MIT_License).\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jsurl/-/jsurl-0.1.5.tgz#2a5c8741de39cacafc12f448908bf34e960dcee8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jsurl/-/jsurl-0.1.5.tgz",
    "hash": "2a5c8741de39cacafc12f448908bf34e960dcee8",
    "integrity": "sha1-KlyHQd45ysr8EvRIkIvzTpYNzug=",
    "registry": "npm",
    "packageName": "jsurl",
    "cacheIntegrity": "sha512-HyrafsIRCa+VlJAsvuvxWUM0iMeZd6+2J4JngECGF0JTRi5moUFV/mLxgyYfDizGF4ofLLYRpvD/Kt1d9wlUUg== sha1-KlyHQd45ysr8EvRIkIvzTpYNzug="
  },
  "registry": "npm",
  "hash": "2a5c8741de39cacafc12f448908bf34e960dcee8"
}