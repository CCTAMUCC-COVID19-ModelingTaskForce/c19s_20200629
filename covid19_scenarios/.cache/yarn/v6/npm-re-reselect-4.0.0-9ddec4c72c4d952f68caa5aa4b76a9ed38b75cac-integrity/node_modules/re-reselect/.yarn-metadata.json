{
  "manifest": {
    "name": "re-reselect",
    "version": "4.0.0",
    "description": "Enhance Reselect selectors with deeper memoization and cache management",
    "main": "lib/index.js",
    "module": "es/index.js",
    "jsnext:main": "es/index.js",
    "browser": "dist/index.js",
    "typings": "src/index.d.ts",
    "files": [
      "dist",
      "es",
      "lib",
      "src",
      "!__tests__",
      "!__util__"
    ],
    "scripts": {
      "test": "npm run test:typescript && jest ./src",
      "test:typescript": "typings-tester --dir typescript_test",
      "test:bundles": "npm run test:bundles:snapshot && npm run test:bundles:unit",
      "test:bundles:unit": "jest ./src --config ./jest/es.config.js && jest ./src --config ./jest/lib.config.js && jest ./src --config ./jest/dist.config.js",
      "test:bundles:snapshot": "jest ./jest/bundles-snapshot.test.js",
      "test:update": "npm run compile && npm run test:bundles:snapshot -- -u",
      "clean": "rimraf dist es lib",
      "compile": "npm run clean && rollup -c",
      "contrib:add": "all-contributors add",
      "contrib:generate": "all-contributors generate",
      "preversion": "npm run prepublish",
      "version": "git add package.json",
      "postversion": "git push && git push --tags",
      "prepublish": "npm test -- --coverage && npm run compile && npm run test:bundles",
      "format": "prettier --write \"**/*.{js,ts,json,md}\""
    },
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged"
      }
    },
    "keywords": [
      "react",
      "redux",
      "reselect",
      "memoize",
      "cache"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/toomuchdesign/re-reselect.git"
    },
    "author": {
      "name": "Andrea Carraro",
      "email": "me@andreacarraro.it"
    },
    "license": "MIT",
    "peerDependencies": {
      "reselect": ">1.0.0"
    },
    "devDependencies": {
      "@babel/core": "^7.9.6",
      "@babel/preset-env": "^7.9.6",
      "all-contributors-cli": "^6.14.2",
      "babel-jest": "^25.1.0",
      "coveralls": "^3.0.9",
      "husky": "^3.1.0",
      "jest": "^25.1.0",
      "lint-staged": "^9.5.0",
      "prettier": "^1.19.1",
      "reselect": "^4.0.0",
      "rimraf": "^3.0.1",
      "rollup": "^1.27.14",
      "rollup-plugin-babel": "^4.4.0",
      "typescript": "^3.7.5",
      "typings-tester": "^0.3.2"
    },
    "jest": {
      "moduleFileExtensions": [
        "js"
      ],
      "coverageReporters": [
        "text",
        "lcov"
      ],
      "coveragePathIgnorePatterns": [
        "__util__"
      ],
      "testEnvironment": "node"
    },
    "sideEffects": false,
    "lint-staged": {
      "**/*.{js,ts}": [
        "prettier --write",
        "npm t -- .",
        "git add"
      ],
      "**/*.md": [
        "prettier --write",
        "git add"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-re-reselect-4.0.0-9ddec4c72c4d952f68caa5aa4b76a9ed38b75cac-integrity/node_modules/re-reselect/package.json",
    "readmeFilename": "README.md",
    "readme": "# Re-reselect\n\n[![Build status][ci-badge]][ci]\n[![Npm version][npm-version-badge]][npm]\n[![Npm downloads][npm-downloads-badge]][npm]\n[![Test coverage report][coveralls-badge]][coveralls]\n\n`re-reselect` is a lightweight wrapper around **[Reselect][reselect]** meant to enhance selectors with **deeper memoization** and **cache management**.\n\n**Switching between different arguments** using standard `reselect` selectors causes **cache invalidation** since default `reselect` cache has a **limit of one**.\n\n`re-reselect` **forwards different calls to different** `reselect` **selectors** stored in cache, so that computed/memoized values are retained.\n\n`re-reselect` **selectors work as normal** `reselect` **selectors** but they are able to determine when **creating a new selector or querying a cached one** on the fly, depending on the supplied arguments.\n\n![Reselect and re-reselect][reselect-and-re-reselect-sketch]\n\nUseful to:\n\n- **Retain selector's cache** when sequentially **called with one/few different arguments** ([example][example-1])\n- **Join similar selectors** into one\n- **Share selectors** with props across multiple component instances (see [reselect example][reselect-sharing-selectors] and [re-reselect solution][example-2])\n- **Instantiate** selectors **on runtime**\n- Enhance `reselect` with [custom caching strategies][cache-objects-docs]\n\n<!-- prettier-ignore -->\n```js\nimport {createCachedSelector} from 're-reselect';\n\n// Normal reselect routine: declare \"inputSelectors\" and \"resultFunc\"\nconst getUsers = state => state.users;\nconst getLibraryId = (state, libraryName) => state.libraries[libraryName].id;\n\nconst getUsersByLibrary = createCachedSelector(\n  // inputSelectors\n  getUsers,\n  getLibraryId,\n\n  // resultFunc\n  (users, libraryId) => expensiveComputation(users, libraryId),\n)(\n  // re-reselect keySelector (receives selectors' arguments)\n  // Use \"libraryName\" as cacheKey\n  (_state_, libraryName) => libraryName\n);\n\n// Cached selectors behave like normal selectors:\n// 2 reselect selectors are created, called and cached\nconst reactUsers = getUsersByLibrary(state, 'react');\nconst vueUsers = getUsersByLibrary(state, 'vue');\n\n// This 3rd call hits the cache\nconst reactUsersAgain = getUsersByLibrary(state, 'react');\n// reactUsers === reactUsersAgain\n// \"expensiveComputation\" called twice in total\n```\n\n## Table of contents\n\n- [Installation](#installation)\n- [Why? + example](#why--example)\n  - [re-reselect solution](#re-reselect-solution)\n  - [Other viable solutions](#other-viable-solutions)\n- [Examples](#examples)\n- [FAQ](#faq)\n- [API](#api)\n  - [`createCachedSelector`](#createCachedSelector)\n  - [`createStructuredCachedSelector`](#createStructuredCachedSelector)\n  - [keySelector](#keyselector)\n  - [options](#options)\n  - [selector instance][selector-instance-docs]\n- [About re-reselect](#about-re-reselect)\n- [Todo's](#todos)\n- [Contributors](#contributors)\n\n## Installation\n\n```console\nnpm install reselect -S\nnpm install re-reselect -S\n```\n\n## Why? + example\n\nLet's say `getData` is a `reselect` selector.\n\n```js\ngetData(state, itemId, 'dataA');\ngetData(state, itemId, 'dataB');\ngetData(state, itemId, 'dataA');\n```\n\nThe **3rd argument invalidates `reselect` cache** on each call, forcing `getData` to re-evaluate and return a new value.\n\n### re-reselect solution\n\n`re-reselect` selectors keep a **cache of `reselect` selectors** stored by `cacheKey`.\n\n<!-- Please note that part of this lines are repeated in #api chapter -->\n\n`cacheKey` is the return value of the `keySelector` function. It's by default a `string` or `number` but it can be anything depending on the chosen cache strategy (see [cache objects docs][cache-objects-docs]).\n\n`keySelector` is a custom function which:\n\n- takes the same arguments as the selector itself (in the example: `state`, `itemId`, `dataType`)\n- returns a `cacheKey`\n\nA **unique persisting `reselect` selector instance** stored in cache is used to compute data for a given `cacheKey` (1:1).\n\nBack to the example, we might setup `re-reselect` to retrieve data by **querying one of the cached selectors** using the 3rd argument as `cacheKey`, allowing cache invalidation only when `state` or `itemId` change (but not `dataType`):\n\n<!-- prettier-ignore -->\n```js\nconst getPieceOfData = createCachedSelector(\n  state => state,\n  (state, itemId) => itemId,\n  (state, itemId, dataType) => dataType,\n  (state, itemId, dataType) => expensiveComputation(state, itemId, dataType)\n)(\n  (state, itemId, dataType) => dataType // Use dataType as cacheKey\n);\n```\n\n**Replacing a selector with a cached selector is invisible to the consuming application since the API is the same.**\n\n**When a cached selector is called**, the following happens behind the scenes:\n\n1.  **Evaluate the `cacheKey`** for the current call by executing `keySelector`\n2.  **Retrieve** from cache the **`reselect` selector** stored under the given `cacheKey`\n3.  **Return found selector or create a new one** if no selector was found\n4.  **Call returned selector** with provided arguments\n\n### Other viable solutions\n\n#### 1- Declare a different selector for each different call\n\nEasy, but doesn't scale. See [\"join similar selectors\" example][example-1].\n\n#### 2- Declare a `makeGetPieceOfData` selector factory as explained in Reselect docs\n\nThe solution suggested in [Reselect docs][reselect-sharing-selectors] is fine, but it has a few downsides:\n\n- Bloats your code by exposing both `get` selectors and `makeGet` selector factories\n- Needs to import/call the selector factory instead of directly using the selector\n- Two different instances, given the same arguments, will individually store and recompute the same result (read [this](https://github.com/reactjs/reselect/pull/213))\n\n#### 3- Wrap your `makeGetPieceOfData` selector factory into a memoizer function and call the returning memoized selector\n\nThis is what `re-reselect` actually does. 😀\n\n## Examples\n\n- [Join similar selectors][example-1]\n- [Avoid selector factories][example-2]\n- [Cache API calls][example-3]\n- [Programmatic keySelector composition][example-4]\n- [Usage with Selectorator][example-5]\n\n## FAQ\n\n<details>\n  <summary>\n    <b>How do I wrap my existing selector with re-reselect?</b>\n  </summary>\n  <br/>\n\nGiven your `reselect` selectors:\n\n  <!-- prettier-ignore -->\n\n```js\nimport {createSelector} from 'reselect';\n\nexport const getMyData = createSelector(\n  selectorA,\n  selectorB,\n  selectorC,\n  (A, B, C) => doSomethingWith(A, B, C)\n);\n```\n\n...add `keySelector` in the second function call:\n\n  <!-- prettier-ignore -->\n\n```js\nimport {createCachedSelector} from 're-reselect';\n\nexport const getMyData = createCachedSelector(\n  selectorA,\n  selectorB,\n  selectorC,\n  (A, B, C) => doSomethingWith(A, B, C)\n)(\n  (state, arg1, arg2) => arg2 // Use arg2 as cacheKey\n);\n```\n\nVoilà, `getMyData` is ready for use!\n\n```js\nconst myData = getMyData(state, 'foo', 'bar');\n```\n\n</details>\n\n<details>\n  <summary>\n    <b>How do I use multiple inputs to set the cacheKey?</b>\n  </summary>\n  <br/>\n\nA few good examples and [a bonus](https://github.com/toomuchdesign/re-reselect/issues/3):\n\n<!-- prettier-ignore -->\n```js\n// Basic usage: use a single argument as cacheKey\ncreateCachedSelector(\n  // ...\n)(\n  (state, arg1, arg2, arg3) => arg3\n)\n\n// Use multiple arguments and chain them into a string\ncreateCachedSelector(\n  // ...\n)(\n  (state, arg1, arg2, arg3) => `${arg1}:${arg3}`\n)\n\n// Extract properties from an object\ncreateCachedSelector(\n  // ...\n)(\n  (state, props) => `${props.a}:${props.b}`\n)\n```\n\n</details>\n\n<details>\n  <summary>\n    <b>How do I limit the cache size?</b>\n  </summary>\n  <br/>\n\nUse a [`cacheObject`][cache-objects-docs] which provides that feature by supplying a [`cacheObject` option](#cacheobject).\n\nYou can also write **your own cache strategy**!\n\n</details>\n\n<details>\n  <summary>\n    <b>How to share a selector across multiple components while passing in props and retaining memoization?</b>\n  </summary>\n  <br/>\n\n[This example][example-2] shows how `re-reselect` would solve the scenario described in [reselect docs][reselect-sharing-selectors].\n\n</details>\n\n<details>\n  <summary>\n    <b>How do I test a re-reselect selector?</b>\n  </summary>\n  <br/>\n\nLike a normal reselect selector!\n\n`re-reselect` selectors expose the same `reselect` testing methods:\n\n- `dependencies`\n- `resultFunc`\n- `recomputations`\n- `resetRecomputations`\n\nRead more about testing selectors on [`reselect` docs][reselect-test-selectors].\n\n#### Testing `reselect` selectors stored in the cache\n\nEach **re-reselect** selector exposes a `getMatchingSelector` method which returns the **underlying matching selector** instance for the given arguments, **instead of the result**.\n\n`getMatchingSelector` expects the same arguments as a normal selector call **BUT returns the instance of the cached selector itself**.\n\nOnce you get a selector instance you can call [its public methods][reselect-selectors-methods].\n\n<!-- prettier-ignore -->\n```js\nimport {createCachedSelector} from 're-reselect';\n\nexport const getMyData = createCachedSelector(selectorA, selectorB, (A, B) =>\n  doSomethingWith(A, B)\n)(\n  (state, arg1) => arg1 // cacheKey\n);\n\n// Call your selector\nconst myFooData = getMyData(state, 'foo');\nconst myBarData = getMyData(state, 'bar');\n\n// Call getMatchingSelector method to retrieve underlying reselect selectors\n// which generated \"myFooData\" and \"myBarData\" results\nconst myFooDataSelector = getMyData.getMatchingSelector(state, 'foo');\nconst myBarDataSelector = getMyData.getMatchingSelector(state, 'bar');\n\n// Call reselect's selectors methods\nmyFooDataSelector.recomputations();\nmyFooDataSelector.resetRecomputations();\n```\n\n</details>\n\n## API\n\n### createCachedSelector\n\n<!-- prettier-ignore -->\n```js\nimport {createCachedSelector} from 're-reselect';\n\ncreateCachedSelector(\n  // ...reselect's `createSelector` arguments\n)(\n  keySelector | { options }\n)\n```\n\nTakes the same arguments as reselect's [`createSelector`][reselect-create-selector] and returns a new function which accepts a [`keySelector`](#keyselector) or an [`options`](#options) object.\n\n**Returns** a [selector instance][selector-instance-docs].\n\n### createStructuredCachedSelector\n\n<!-- prettier-ignore -->\n```js\nimport {createStructuredCachedSelector} from 're-reselect';\n\ncreateStructuredCachedSelector(\n  // ...reselect's `createStructuredSelector` arguments\n)(\n  keySelector | { options }\n)\n```\n\nTakes the same arguments as reselect's [`createStructuredSelector`][reselect-create-structured-selector] and returns a new function which accepts a [`keySelector`](#keyselector) or an [`options`](#options) object.\n\n**Returns** a [selector instance][selector-instance-docs].\n\n### keySelector\n\nA custom function receiving the same arguments as your selectors (and `inputSelectors`) and **returning a `cacheKey`**.\n\n`cacheKey` is **by default a `string` or `number`** but can be anything depending on the chosen cache strategy (see [`cacheObject` option](#optionscacheobject)).\n\nThe `keySelector` idea comes from [Lodash's .memoize resolver][lodash-memoize].\n\n### options\n\n#### keySelector\n\nType: `function`<br />\nDefault: `undefined`\n\nThe [`keySelector`](#keyselector) used by the cached selector.\n\n#### cacheObject\n\nType: `object`<br />\nDefault: [`FlatObjectCache`][cache-objects-docs]\n\nAn optional custom **cache strategy object** to handle the caching behaviour. Read more about [re-reselect's custom cache here][cache-objects-docs].\n\n#### keySelectorCreator\n\nType: `function`<br />\nDefault: `undefined`\n\nAn optional function with the following signature returning the [`keySelector`](#keyselector) used by the cached selector.\n\n```typescript\ntype keySelectorCreator = (selectorInputs: {\n  inputSelectors: InputSelector[];\n  resultFunc: ResultFunc;\n  keySelector: KeySelector;\n}) => KeySelector;\n```\n\nThis allows the ability to dynamically **generate `keySelectors` on runtime** based on provided `inputSelectors`/`resultFunc` supporting [**key selectors composition**](https://github.com/toomuchdesign/re-reselect/pull/73). It overrides any provided `keySelector`.\n\nSee [programmatic keySelector composition][example-4] example.\n\n#### selectorCreator\n\nType: `function`<br />\nDefault: `reselect`'s [`createSelector`][reselect-create-selector]\n\nAn optional function describing a [custom version of createSelector][reselect-create-selector-creator].\n\n### re-reselect selector instance\n\n`createCachedSelector` and `createStructuredCachedSelector` return a **selector instance** which extends the API of a **standard reselect selector**.\n\n> The followings are advanced methods and you won't need them for basic usage!\n\n#### selector`.getMatchingSelector(selectorArguments)`\n\nRetrieve the selector responding to the given arguments.\n\n#### selector`.removeMatchingSelector(selectorArguments)`\n\nRemove from the cache the selector responding to the given arguments.\n\n#### selector`.cache`\n\nGet the cacheObject instance being used by the selector (for advanced caching operations like [this](https://github.com/toomuchdesign/re-reselect/issues/40)).\n\n#### selector`.clearCache()`\n\nClear whole `selector` cache.\n\n#### selector`.dependencies`\n\nGet an array containing the provided `inputSelectors`. Refer to relevant discussion on [Reselect repo][reselect-test-selectors-dependencies].\n\n#### selector`.resultFunc`\n\nGet `resultFunc` for easily [testing composed selectors][reselect-test-selectors].\n\n#### selector`.recomputations()`\n\nReturn the number of times the selector's result function has been recomputed.\n\n#### selector`.resetRecomputations()`\n\nReset `recomputations` count.\n\n#### selector`.keySelector`\n\nGet `keySelector` for utility compositions or testing.\n\n## About re-reselect\n\n- [re-reselect your whole redux state](https://patrickdesjardins.com/blog/re-reselect-your-whole-redux-state)\n- [Understanding reselect and re-reselect](http://alexnitta.com/understanding-reselect-and-re-reselect/)\n- [Advanced Redux patterns: selectors](https://blog.brainsandbeards.com/advanced-redux-patterns-selectors-cb9f88381d74)\n- [Be selective with your state](https://medium.com/riipen-engineering/be-selective-with-your-state-8f1be76cb9f4)\n- [A swift developer’s React Native experience](https://swiftwithjustin.co/2018/06/24/a-swift-developers-react-native-experience)\n- [5 key Redux libraries to improve code reuse](https://blog.logrocket.com/5-redux-libraries-to-improve-code-reuse-9f93eaceaa83)\n- [Rematch's docs](https://github.com/rematch/rematch/blob/1.1.0/plugins/select/README.md#re-reselect)\n- [Redux re-reselect playground](https://codesandbox.io/s/135rwqj2jj)\n\n## Todo's\n\n- Improve TS tests readability\n- More examples\n\n## Contributors\n\nThanks to you all ([emoji key][docs-all-contributors]):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"http://www.andreacarraro.it\"><img src=\"https://avatars3.githubusercontent.com/u/4573549?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Andrea Carraro</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=toomuchdesign\" title=\"Code\">💻</a> <a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=toomuchdesign\" title=\"Documentation\">📖</a> <a href=\"#infra-toomuchdesign\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=toomuchdesign\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/toomuchdesign/re-reselect/pulls?q=is%3Apr+reviewed-by%3Atoomuchdesign\" title=\"Reviewed Pull Requests\">👀</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xsburg\"><img src=\"https://avatars2.githubusercontent.com/u/830824?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Stepan Burguchev</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=xsburg\" title=\"Code\">💻</a> <a href=\"#ideas-xsburg\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#question-xsburg\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/toomuchdesign/re-reselect/pulls?q=is%3Apr+reviewed-by%3Axsburg\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=xsburg\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sgrishchenko\"><img src=\"https://avatars3.githubusercontent.com/u/15995890?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sergei Grishchenko</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=sgrishchenko\" title=\"Code\">💻</a> <a href=\"#ideas-sgrishchenko\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=sgrishchenko\" title=\"Tests\">⚠️</a> <a href=\"#tool-sgrishchenko\" title=\"Tools\">🔧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Andarist\"><img src=\"https://avatars2.githubusercontent.com/u/9800850?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mateusz Burzyński</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=Andarist\" title=\"Code\">💻</a> <a href=\"#infra-Andarist\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n    <td align=\"center\"><a href=\"https://olslash.github.io/\"><img src=\"https://avatars3.githubusercontent.com/u/693493?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mitch Robb</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=olslash\" title=\"Code\">💻</a> <a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=olslash\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rufman\"><img src=\"https://avatars3.githubusercontent.com/u/1128559?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Stephane Rufer</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=rufman\" title=\"Code\">💻</a> <a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=rufman\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/spiffysparrow\"><img src=\"https://avatars0.githubusercontent.com/u/2788860?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Mullen</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=spiffysparrow\" title=\"Code\">💻</a> <a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=spiffysparrow\" title=\"Tests\">⚠️</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://www.skc.name\"><img src=\"https://avatars1.githubusercontent.com/u/4211838?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sushain Cherivirala</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=sushain97\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/MaoStevemao\"><img src=\"https://avatars0.githubusercontent.com/u/6316590?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Steve Mao</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=stevemao\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Dante-101\"><img src=\"https://avatars2.githubusercontent.com/u/1428826?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gaurav Lahoti</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/issues?q=author%3ADante-101\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"http://lon.im\"><img src=\"https://avatars3.githubusercontent.com/u/13602053?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Lon</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/issues?q=author%3Acnlon\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/bratushka\"><img src=\"https://avatars2.githubusercontent.com/u/5492495?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>bratushka</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=bratushka\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://andrz.me\"><img src=\"https://avatars3.githubusercontent.com/u/615381?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Anders D. Johnson</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=AndersDJohnson\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/wormyy\"><img src=\"https://avatars3.githubusercontent.com/u/8556724?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Július Retzer</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=wormyy\" title=\"Documentation\">📖</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/maartenschumacher\"><img src=\"https://avatars3.githubusercontent.com/u/10407025?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Maarten Schumacher</b></sub></a><br /><a href=\"#ideas-maartenschumacher\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/alexanderjarvis\"><img src=\"https://avatars2.githubusercontent.com/u/664238?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alexander Jarvis</b></sub></a><br /><a href=\"#ideas-alexanderjarvis\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/greggb\"><img src=\"https://avatars1.githubusercontent.com/u/514026?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gregg B</b></sub></a><br /><a href=\"#example-greggb\" title=\"Examples\">💡</a></td>\n    <td align=\"center\"><a href=\"http://ianobermiller.com\"><img src=\"https://avatars0.githubusercontent.com/u/897931?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ian Obermiller</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/pulls?q=is%3Apr+reviewed-by%3Aianobermiller\" title=\"Reviewed Pull Requests\">👀</a></td>\n    <td align=\"center\"><a href=\"https://github.com/lukyth\"><img src=\"https://avatars3.githubusercontent.com/u/7040242?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kanitkorn Sujautra</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=lukyth\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/suark\"><img src=\"https://avatars2.githubusercontent.com/u/6233440?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Brian Kraus</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=suark\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/el-dav\"><img src=\"https://avatars1.githubusercontent.com/u/7252227?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>el-dav</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/issues?q=author%3Ael-dav\" title=\"Bug reports\">🐛</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://augustin-riedinger.fr\"><img src=\"https://avatars3.githubusercontent.com/u/1970156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Augustin Riedinger</b></sub></a><br /><a href=\"#ideas-augnustin\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/RichardForrester\"><img src=\"https://avatars0.githubusercontent.com/u/12902182?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>RichardForrester</b></sub></a><br /><a href=\"#ideas-RichardForrester\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://alfonsomillan.com/\"><img src=\"https://avatars3.githubusercontent.com/u/25711137?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alfonso Millan</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/commits?author=mechmillan\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/parkerault\"><img src=\"https://avatars2.githubusercontent.com/u/78856?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>parkerault</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/issues?q=author%3Aparkerault\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dahannes\"><img src=\"https://avatars0.githubusercontent.com/u/2493211?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>johannes</b></sub></a><br /><a href=\"https://github.com/toomuchdesign/re-reselect/issues?q=author%3Adahannes\" title=\"Bug reports\">🐛</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n[reselect]: https://github.com/reactjs/reselect\n[reselect-sharing-selectors]: https://github.com/reduxjs/reselect/tree/v4.0.0#sharing-selectors-with-props-across-multiple-component-instances\n[reselect-test-selectors]: https://github.com/reactjs/reselect/tree/v4.0.0#q-how-do-i-test-a-selector\n[reselect-test-selectors-dependencies]: https://github.com/reduxjs/reselect/issues/76#issuecomment-299194186\n[reselect-selectors-methods]: https://github.com/reduxjs/reselect/blob/v4.0.0/src/index.js#L81\n[reselect-create-selector]: https://github.com/reactjs/reselect/tree/v4.0.0#createselectorinputselectors--inputselectors-resultfunc\n[reselect-create-structured-selector]: https://github.com/reduxjs/reselect/tree/v4.0.0#createstructuredselectorinputselectors-selectorcreator--createselector\n[reselect-create-selector-creator]: https://github.com/reactjs/reselect/tree/v4.0.0#createselectorcreatormemoize-memoizeoptions\n[lodash-memoize]: https://lodash.com/docs/4.17.4#memoize\n[ci-badge]: https://travis-ci.org/toomuchdesign/re-reselect.svg?branch=master\n[ci]: https://travis-ci.org/toomuchdesign/re-reselect\n[coveralls-badge]: https://coveralls.io/repos/github/toomuchdesign/re-reselect/badge.svg?branch=master\n[coveralls]: https://coveralls.io/github/toomuchdesign/re-reselect?branch=master\n[npm]: https://www.npmjs.com/package/re-reselect\n[npm-version-badge]: https://img.shields.io/npm/v/re-reselect.svg\n[npm-downloads-badge]: https://img.shields.io/npm/dm/re-reselect.svg\n[reselect-and-re-reselect-sketch]: examples/reselect-and-re-reselect.png?raw=true\n[example-1]: examples/1-join-selectors.md\n[example-2]: examples/2-avoid-selector-factories.md\n[example-3]: examples/3-cache-api-calls.md\n[example-4]: examples/4-programmatic-keyselector-composition.md\n[example-5]: examples/5-selectorator.md\n[selector-instance-docs]: #re-reselect-selector-instance\n[cache-objects-docs]: src/cache#readme\n[docs-all-contributors]: https://allcontributors.org/docs/en/emoji-key\n",
    "licenseText": "Copyright (c) Andrea Carraro\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/re-reselect/-/re-reselect-4.0.0.tgz#9ddec4c72c4d952f68caa5aa4b76a9ed38b75cac",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/re-reselect/-/re-reselect-4.0.0.tgz",
    "hash": "9ddec4c72c4d952f68caa5aa4b76a9ed38b75cac",
    "integrity": "sha512-wuygyq8TXUlSdVXv2kigXxQNOgdb9m7LbIjwfTNGSpaY1riLd5e+VeQjlQMyUtrk0oiyhi1AqIVynworl3qxHA==",
    "registry": "npm",
    "packageName": "re-reselect",
    "cacheIntegrity": "sha512-wuygyq8TXUlSdVXv2kigXxQNOgdb9m7LbIjwfTNGSpaY1riLd5e+VeQjlQMyUtrk0oiyhi1AqIVynworl3qxHA== sha1-nd7ExyxNlS9oyqWqS3ap7Ti3XKw="
  },
  "registry": "npm",
  "hash": "9ddec4c72c4d952f68caa5aa4b76a9ed38b75cac"
}