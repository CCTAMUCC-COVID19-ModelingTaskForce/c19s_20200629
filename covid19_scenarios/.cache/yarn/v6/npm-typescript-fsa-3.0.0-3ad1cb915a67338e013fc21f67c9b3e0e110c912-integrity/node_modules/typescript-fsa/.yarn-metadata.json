{
  "manifest": {
    "name": "typescript-fsa",
    "version": "3.0.0",
    "description": "Type-safe action creator utilities",
    "keywords": [
      "redux",
      "flux",
      "typescript",
      "action",
      "action creator"
    ],
    "main": "lib/index.js",
    "typings": "lib/index.d.ts",
    "files": [
      "dist",
      "lib",
      "src"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/aikoven/typescript-fsa.git"
    },
    "scripts": {
      "clean": "rimraf lib dist",
      "lint": "tslint -c tslint.json src/index.ts tests/index.ts",
      "test": "ts-node -P tsconfig.tests.json node_modules/.bin/tape tests/*.ts",
      "build:commonjs": "tsc",
      "build:umd": "NODE_ENV=development rollup -c -o dist/typescript-fsa.js",
      "build:umd:min": "NODE_ENV=production rollup -c -o dist/typescript-fsa.min.js",
      "build": "npm run build:commonjs && npm run build:umd && npm run build:umd:min",
      "prepublish": "npm run clean && npm run lint && npm run test && npm run build"
    },
    "author": {
      "name": "Daniel Lytkin",
      "email": "dan.lytkin@gmail.com"
    },
    "license": "MIT",
    "devDependencies": {
      "@alexlur/rollup-plugin-typescript": "^1.0.4",
      "@types/tape": "^4.2.28",
      "rimraf": "^2.5.4",
      "rollup": "^0.46.0",
      "rollup-plugin-execute": "^1.0.0",
      "rollup-plugin-replace": "^1.1.1",
      "rollup-plugin-uglify": "^2.0.1",
      "tape": "^4.6.2",
      "ts-node": "^6.0.0",
      "tslint": "^5.0.0",
      "typescript": "^3.6.2",
      "typings-tester": "^0.3.0"
    },
    "greenkeeper": {
      "ignore": [
        "rollup",
        "rollup-plugin-execute",
        "rollup-plugin-replace",
        "rollup-plugin-uglify"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-typescript-fsa-3.0.0-3ad1cb915a67338e013fc21f67c9b3e0e110c912-integrity/node_modules/typescript-fsa/package.json",
    "readmeFilename": "README.md",
    "readme": "# TypeScript FSA [![npm version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url]\n\nAction Creator library for TypeScript. Its goal is to provide type-safe experience with Flux actions with minimum boilerplate.\nCreated actions are FSA-compliant:\n\n```ts\ninterface Action<Payload> {\n  type: string;\n  payload: Payload;\n  error?: boolean;\n  meta?: Object;\n}\n```\n\n## Installation\n\n```\nnpm install --save typescript-fsa\n```\n\n## Usage\n\n### Basic\n\n```ts\nimport actionCreatorFactory from 'typescript-fsa';\n\nconst actionCreator = actionCreatorFactory();\n\n// Specify payload shape as generic type argument.\nconst somethingHappened = actionCreator<{foo: string}>('SOMETHING_HAPPENED');\n\n// Get action creator type.\nconsole.log(somethingHappened.type);  // SOMETHING_HAPPENED\n\n// Create action.\nconst action = somethingHappened({foo: 'bar'});\nconsole.log(action);  // {type: 'SOMETHING_HAPPENED', payload: {foo: 'bar'}}\n```\n\n### Async Action Creators\n\nAsync Action Creators are objects with properties `started`, `done` and\n`failed` whose values are action creators. There is a number of [Companion Packages](#companion-packages) that help with binding Async Action Creators to async processes.\n\n```ts\nimport actionCreatorFactory from 'typescript-fsa';\n\nconst actionCreator = actionCreatorFactory();\n\n// specify parameters and result shapes as generic type arguments\nconst doSomething =\n  actionCreator.async<{foo: string},   // parameter type\n                      {bar: number},   // success type\n                      {code: number}   // error type\n                     >('DO_SOMETHING');\n\nconsole.log(doSomething.started({foo: 'lol'}));\n// {type: 'DO_SOMETHING_STARTED', payload: {foo: 'lol'}}\n\nconsole.log(doSomething.done({\n  params: {foo: 'lol'},\n  result: {bar: 42},\n}));\n// {type: 'DO_SOMETHING_DONE', payload: {\n//   params: {foo: 'lol'},\n//   result: {bar: 42},\n// }}\n\nconsole.log(doSomething.failed({\n  params: {foo: 'lol'},\n  error: {code: 42},\n}));\n// {type: 'DO_SOMETHING_FAILED', payload: {\n//   params: {foo: 'lol'},\n//   error: {code: 42},\n// }, error: true}\n```\n\n### Actions With Type Prefix\n\nYou can specify a prefix that will be prepended to all action types. This is\nuseful to namespace library actions as well as for large projects where it's\nconvenient to keep actions near the component that dispatches them.\n\n```ts\n// MyComponent.actions.ts\nimport actionCreatorFactory from 'typescript-fsa';\n\nconst actionCreator = actionCreatorFactory('MyComponent');\n\nconst somethingHappened = actionCreator<{foo: string}>('SOMETHING_HAPPENED');\n\nconst action = somethingHappened({foo: 'bar'});\nconsole.log(action);\n// {type: 'MyComponent/SOMETHING_HAPPENED', payload: {foo: 'bar'}}\n```\n\n### Redux\n\n```ts\n// actions.ts\nimport actionCreatorFactory from 'typescript-fsa';\n\nconst actionCreator = actionCreatorFactory();\n\nexport const somethingHappened =\n  actionCreator<{foo: string}>('SOMETHING_HAPPENED');\nexport const somethingAsync =\n  actionCreator.async<{foo: string},\n                      {bar: string}\n                     >('SOMETHING_ASYNC');\n\n\n// reducer.ts\nimport {Action} from 'redux';\nimport {isType} from 'typescript-fsa';\nimport {somethingHappened, somethingAsync} from './actions';\n\ntype State = {bar: string};\n\nexport const reducer = (state: State, action: Action): State => {\n  if (isType(action, somethingHappened)) {\n    // action.payload is inferred as {foo: string};\n\n    action.payload.bar;  // error\n\n    return {bar: action.payload.foo};\n  }\n\n  if (isType(action, somethingAsync.started)) {\n    return {bar: action.payload.foo};\n  }\n\n  if (isType(action, somethingAsync.done)) {\n    return {bar: action.payload.result.bar};\n  }\n\n  return state;\n};\n```\n\n#### redux-observable\n\n```ts\n// epic.ts\nimport {Action} from 'redux';\nimport {Observable} from 'rxjs';\nimport {somethingAsync} from './actions';\n\nexport const epic = (actions$: Observable<Action>) =>\n  actions$.filter(somethingAsync.started.match)\n    .delay(2000)\n    .map(action => {\n      // action.payload is inferred as {foo: string};\n\n      action.payload.bar;  // error\n\n      return somethingAsync.done({\n        params: action.payload,\n        result: {\n          bar: 'bar',\n        },\n      });\n    });\n```\n\n## Companion Packages\n\n* [typescript-fsa-redux-saga](https://github.com/aikoven/typescript-fsa-redux-saga)\n* [typescript-fsa-redux-observable](https://github.com/m0a/typescript-fsa-redux-observable)\n* [typescript-fsa-redux-thunk](https://github.com/xdave/typescript-fsa-redux-thunk)\n* [typescript-fsa-reducers](https://github.com/dphilipson/typescript-fsa-reducers)\n\n## Resources\n\n* [Type-safe Flux Standard Actions (FSA) in React Using TypeScript FSA](https://www.triplet.fi/blog/type-safe-flux-standard-actions-fsa-in-react-using-typescript-fsa/)\n* [Type-safe Asynchronous Actions (Redux Thunk) Using TypeScript FSA](https://www.triplet.fi/blog/type-safe-asynchronous-actions-redux-thunk-using-typescript-fsa/)\n\n## API\n\n### `actionCreatorFactory(prefix?: string, defaultIsError?: Predicate): ActionCreatorFactory`\n\nCreates Action Creator factory with optional prefix for action types.\n\n* `prefix?: string`: Prefix to be prepended to action types as `<prefix>/<type>`.\n* `defaultIsError?: Predicate`: Function that detects whether action is error\n given the payload. Default is `payload => payload instanceof Error`.\n\n### `ActionCreatorFactory<Payload>#(type: string, commonMeta?: object, isError?: boolean): ActionCreator<Payload>`\n\nCreates Action Creator that produces actions with given `type` and payload of type `Payload`.\n\n* `type: string`: Type of created actions.\n* `commonMeta?: object`: Metadata added to created actions.\n* `isError?: boolean`: Defines whether created actions are error actions.\n\n### `ActionCreatorFactory#async<Params, Result, Error>(type: string, commonMeta?: object): AsyncActionCreators<Params, Result, Error>`\n\nCreates three Action Creators:\n* `started: ActionCreator<Params>`\n* `done: ActionCreator<{params: Params, result: Result}>`\n* `failed: ActionCreator<{params: Params, error: Error}>`\n\nUseful to wrap asynchronous processes.\n\n* `type: string`: Prefix for types of created actions, which will have types `${type}_STARTED`, `${type}_DONE` and `${type}_FAILED`.\n* `commonMeta?: object`: Metadata added to created actions.\n\n### `ActionCreator<Payload>#(payload: Payload, meta?: object): Action<Payload>`\n\nCreates action with given payload and metadata.\n\n* `payload: Payload`: Action payload.\n* `meta?: object`: Action metadata. Merged with `commonMeta` of Action Creator.\n\n### `isType(action: Action, actionCreator: ActionCreator): boolean`\n\nReturns `true` if action has the same type as action creator. Defines\n[Type Guard](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards)\nthat lets TypeScript know `payload` type inside blocks where `isType` returned\n`true`:\n\n```ts\nconst somethingHappened = actionCreator<{foo: string}>('SOMETHING_HAPPENED');\n\nif (isType(action, somethingHappened)) {\n  // action.payload has type {foo: string}\n}\n```\n\n### `ActionCreator#match(action: Action): boolean`\n\nIdentical to `isType` except it is exposed as a bound method of an action\ncreator. Since it is bound and takes a single argument it is ideal for passing\nto a filtering function like `Array.prototype.filter` or\n[RxJS](http://reactivex.io/rxjs/)'s `Observable.prototype.filter`.\n\n```ts\nconst somethingHappened = actionCreator<{foo: string}>('SOMETHING_HAPPENED');\nconst somethingElseHappened =\n  actionCreator<{bar: number}>('SOMETHING_ELSE_HAPPENED');\n\nif (somethingHappened.match(action)) {\n  // action.payload has type {foo: string}\n}\n\nconst actionArray = [\n  somethingHappened({foo: 'foo'}),\n  somethingElseHappened({bar: 5}),\n];\n\n// somethingHappenedArray has inferred type Action<{foo: string}>[]\nconst somethingHappenedArray = actionArray.filter(somethingHappened.match);\n```\n\nFor more on using `Array.prototype.filter` as a type guard, see\n[this github issue](https://github.com/Microsoft/TypeScript/issues/7657).\n\n\n[npm-image]: https://badge.fury.io/js/typescript-fsa.svg\n[npm-url]: https://badge.fury.io/js/typescript-fsa\n[travis-image]: https://travis-ci.org/aikoven/typescript-fsa.svg?branch=master\n[travis-url]: https://travis-ci.org/aikoven/typescript-fsa\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Daniel Lytkin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/typescript-fsa/-/typescript-fsa-3.0.0.tgz#3ad1cb915a67338e013fc21f67c9b3e0e110c912",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/typescript-fsa/-/typescript-fsa-3.0.0.tgz",
    "hash": "3ad1cb915a67338e013fc21f67c9b3e0e110c912",
    "integrity": "sha512-xiXAib35i0QHl/+wMobzPibjAH5TJLDj+qGq5jwVLG9qR4FUswZURBw2qihBm0m06tHoyb3FzpnJs1GRhRwVag==",
    "registry": "npm",
    "packageName": "typescript-fsa",
    "cacheIntegrity": "sha512-xiXAib35i0QHl/+wMobzPibjAH5TJLDj+qGq5jwVLG9qR4FUswZURBw2qihBm0m06tHoyb3FzpnJs1GRhRwVag== sha1-OtHLkVpnM44BP8IfZ8mz4OEQyRI="
  },
  "registry": "npm",
  "hash": "3ad1cb915a67338e013fc21f67c9b3e0e110c912"
}