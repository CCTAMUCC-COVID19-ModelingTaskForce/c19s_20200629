{
  "manifest": {
    "name": "broccoli-plugin",
    "description": "Base class for all Broccoli plugins",
    "version": "1.3.1",
    "author": {
      "name": "Jo Liss",
      "email": "joliss42@gmail.com"
    },
    "main": "index.js",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/broccolijs/broccoli-plugin"
    },
    "keywords": [
      "broccoli-plugin"
    ],
    "scripts": {
      "pretest": "multidep test/multidep.json",
      "test": "mocha"
    },
    "dependencies": {
      "promise-map-series": "^0.2.1",
      "quick-temp": "^0.1.3",
      "rimraf": "^2.3.4",
      "symlink-or-copy": "^1.1.8"
    },
    "devDependencies": {
      "broccoli-fixturify": "^0.3.0",
      "chai": "^4.1.2",
      "chai-as-promised": "^7.1.1",
      "fixturify": "^0.3.4",
      "mocha": "^5.2.0",
      "mocha-jshint": "^2.2.3",
      "multidep": "^2.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-broccoli-plugin-1.3.1-a26315732fb99ed2d9fb58f12a1e14e986b4fabd-integrity/node_modules/broccoli-plugin/package.json",
    "readmeFilename": "README.md",
    "readme": "# The Broccoli Plugin Base Class\n\n[![Build Status](https://travis-ci.org/broccolijs/broccoli-plugin.svg?branch=master)](https://travis-ci.org/broccolijs/broccoli-plugin)\n[![Build status](https://ci.appveyor.com/api/projects/status/k4tk8b99m1e58ftd?svg=true)](https://ci.appveyor.com/project/joliss/broccoli-plugin)\n\n## Example Usage\n\n```js\nvar Plugin = require('broccoli-plugin');\nvar path = require('path');\n\n// Create a subclass MyPlugin derived from Plugin\nMyPlugin.prototype = Object.create(Plugin.prototype);\nMyPlugin.prototype.constructor = MyPlugin;\nfunction MyPlugin(inputNodes, options) {\n  options = options || {};\n  Plugin.call(this, inputNodes, {\n    annotation: options.annotation\n  });\n  this.options = options;\n}\n\nMyPlugin.prototype.build = function() {\n  // Read files from this.inputPaths, and write files to this.outputPath.\n  // Silly example:\n\n  // Read 'foo.txt' from the third input node\n  var inputBuffer = fs.readFileSync(path.join(this.inputPaths[2], 'foo.txt'));\n  var outputBuffer = someCompiler(inputBuffer);\n  // Write to 'bar.txt' in this node's output\n  fs.writeFileSync(path.join(this.outputPath, 'bar.txt'), outputBuffer);\n};\n```\n\n## Reference\n\n### `new Plugin(inputNodes, options)`\n\nCall this base class constructor from your subclass constructor.\n\n* `inputNodes`: An array of node objects that this plugin will read from.\n  Nodes are usually other plugin instances; they were formerly known as\n  \"trees\".\n\n* `options`\n\n    * `name`: The name of this plugin class. Defaults to `this.constructor.name`.\n    * `annotation`: A descriptive annotation. Useful for debugging, to tell\n      multiple instances of the same plugin apart.\n    * `persistentOutput`: If true, the output directory is not automatically\n      emptied between builds.\n    * `needsCache` : If `true`, a cache directory is created automatically\n      and the path is set at `cachePath`. If `false`, a cache directory is not created\n      and `this.cachePath` is `undefined`. Defaults to `true`.\n\n### `Plugin.prototype.build()`\n\nOverride this method in your subclass. It will be called on each (re-)build.\n\nThis function will typically access the following read-only properties:\n\n* `this.inputPaths`: An array of paths on disk corresponding to each node in\n  `inputNodes`. Your plugin will read files from these paths.\n\n* `this.outputPath`: The path on disk corresponding to this plugin instance\n  (this node). Your plugin will write files to this path. This directory is\n  emptied by Broccoli before each build, unless the `persistentOutput` options\n  is true.\n\n* `this.cachePath`: The path on disk to an auxiliary cache directory. Use this\n  to store files that you want preserved between builds. This directory will\n  only be deleted when Broccoli exits. If a cache directory is not needed, set\n  `needsCache` to `false` when calling `broccoli-plugin` constructor.\n\nAll paths stay the same between builds.\n\nTo perform asynchronous work, return a promise. The promise's eventual value\nis ignored (typically `null`).\n\nTo report a compile error, `throw` it or return a rejected promise. Also see\nsection \"Error Objects\" below.\n\n### `Plugin.prototype.getCallbackObject()`\n\nAdvanced usage only.\n\nReturn the object on which Broccoli will call `obj.build()`. Called once after\ninstantiation. By default, returns `this`. Plugins do not usually need to\noverride this, but it can be useful for base classes that other plugins in turn\nderive from, such as\n[broccoli-caching-writer](https://github.com/ember-cli/broccoli-caching-writer).\n\nFor example, to intercept `.build()` calls, you might\n`return { build: this.buildWrapper.bind(this) }`.\nOr, to hand off the plugin implementation to a completely separate object:\n`return new MyPluginWorker(this.inputPaths, this.outputPath, this.cachePath)`,\nwhere `MyPluginWorker` provides a `.build` method.\n\n### Error Objects\n\nTo help with displaying clear error messages for build errors, error objects\nmay have the following optional properties in addition to the standard\n`message` property:\n\n* `file`: Path of the file in which the error occurred, relative to one of the\n  `inputPaths` directories\n* `treeDir`: The path that `file` is relative to. Must be an element of\n  `this.inputPaths`. (The name `treeDir` is for historical reasons.)\n* `line`: Line in which the error occurred (one-indexed)\n* `column`: Column in which the error occurred (zero-indexed)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Jo Liss\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/broccoli-plugin/-/broccoli-plugin-1.3.1.tgz#a26315732fb99ed2d9fb58f12a1e14e986b4fabd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/broccoli-plugin/-/broccoli-plugin-1.3.1.tgz",
    "hash": "a26315732fb99ed2d9fb58f12a1e14e986b4fabd",
    "integrity": "sha512-DW8XASZkmorp+q7J4EeDEZz+LoyKLAd2XZULXyD9l4m9/hAKV3vjHmB1kiUshcWAYMgTP1m2i4NnqCE/23h6AQ==",
    "registry": "npm",
    "packageName": "broccoli-plugin",
    "cacheIntegrity": "sha512-DW8XASZkmorp+q7J4EeDEZz+LoyKLAd2XZULXyD9l4m9/hAKV3vjHmB1kiUshcWAYMgTP1m2i4NnqCE/23h6AQ== sha1-omMVcy+5ntLZ+1jxKh4U6Ya0+r0="
  },
  "registry": "npm",
  "hash": "a26315732fb99ed2d9fb58f12a1e14e986b4fabd"
}