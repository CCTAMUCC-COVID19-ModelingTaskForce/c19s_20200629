{
  "manifest": {
    "name": "promise-timeout",
    "version": "1.3.0",
    "description": "Simple timeouts for promises",
    "main": "index.js",
    "scripts": {
      "test": "mocha"
    },
    "keywords": [
      "promise",
      "timeout"
    ],
    "author": {
      "name": "David M. Lee, II",
      "email": "leedm777@yahoo.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/building5/promise-timeout.git"
    },
    "devDependencies": {
      "mocha": "^3.2.0"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-promise-timeout-1.3.0-d1c78dd50a607d5f0a5207410252a3a0914e1014-integrity/node_modules/promise-timeout/package.json",
    "readmeFilename": "README.md",
    "readme": "# promise-timeout\n\nA super-simple way to put a timeout on promise resolution.\n\nIt assumes you already have either platform support for promises (Node 0.12 or\ngreater), or you have a polyfill (see [es6-promise][]).\n\n## Installation\n\n```bash\n$ npm install promise-timeout\n```\n\n## Usage\n\n### timeout(promise, timeoutMillis)\n\nRejects a promise with a `TimeoutError` if it does not settle within the\nspecified timeout. Parameters:\n\n * `promise: Promise` - Promise to monitor.\n * `timeoutMillis: number` - Number of milliseconds to wait on settling.\n\n## TimeoutError\n\nException indicating that the timeout expired.\n\n## Examples\n\nES2015:\n\n```javascript\nimport { timeout, TimeoutError } from 'promise-timeout';\n\nlet somePromise = goDoSomething();\n\ntimeout(somePromise, 1000)\n  .then((thing) => console.log('I did a thing!'))\n  .catch((err) => {\n    if (err instanceof TimeoutError) {\n      console.error('Timeout :-(');\n    }\n  });\n```\n\nES5:\n\n```javascript\n'use strict';\n\nvar pt = require('promise-timeout');\n\nvar somePromise = goDoSomething();\n\npt.timeout(somePromise, 1000)\n  .then(function (thing) {\n    console.log('I did a thing!');\n  }).catch(function (err) {\n    if (err instanceof pt.TimeoutError) {\n      console.error('Timeout :-(');\n    }\n  });\n```\n\n [es6-promise]: https://www.npmjs.com/package/es6-promise\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 David M. Lee, II\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/promise-timeout/-/promise-timeout-1.3.0.tgz#d1c78dd50a607d5f0a5207410252a3a0914e1014",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/promise-timeout/-/promise-timeout-1.3.0.tgz",
    "hash": "d1c78dd50a607d5f0a5207410252a3a0914e1014",
    "integrity": "sha512-5yANTE0tmi5++POym6OgtFmwfDvOXABD9oj/jLQr5GPEyuNEb7jH4wbbANJceJid49jwhi1RddxnhnEAb/doqg==",
    "registry": "npm",
    "packageName": "promise-timeout",
    "cacheIntegrity": "sha512-5yANTE0tmi5++POym6OgtFmwfDvOXABD9oj/jLQr5GPEyuNEb7jH4wbbANJceJid49jwhi1RddxnhnEAb/doqg== sha1-0ceN1QpgfV8KUgdBAlKjoJFOEBQ="
  },
  "registry": "npm",
  "hash": "d1c78dd50a607d5f0a5207410252a3a0914e1014"
}