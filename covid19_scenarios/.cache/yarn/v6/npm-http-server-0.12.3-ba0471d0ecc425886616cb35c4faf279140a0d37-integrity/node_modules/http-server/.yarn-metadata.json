{
  "manifest": {
    "name": "http-server",
    "version": "0.12.3",
    "description": "A simple zero-configuration command-line http server",
    "main": "./lib/http-server",
    "repository": {
      "type": "git",
      "url": "git://github.com/http-party/http-server.git"
    },
    "keywords": [
      "cli",
      "command",
      "http",
      "server"
    ],
    "scripts": {
      "start": "node ./bin/http-server",
      "pretest": "common bin/http-server lib/ test",
      "test": "vows --spec --isolate"
    },
    "files": [
      "lib",
      "bin",
      "doc"
    ],
    "man": [
      "./doc/http-server.1"
    ],
    "engines": {
      "node": ">=6"
    },
    "contributors": [
      {
        "name": "Charlie Robbins",
        "email": "charlie.robbins@gmail.com"
      },
      {
        "name": "Marak Squires",
        "email": "marak.squires@gmail.com"
      },
      {
        "name": "Charlie McConnell",
        "email": "charlie@charlieistheman.com"
      },
      {
        "name": "Joshua Holbrook",
        "email": "josh.holbrook@gmail.com"
      },
      {
        "name": "Maciej Ma≈Çecki",
        "email": "maciej.malecki@notimplemented.org"
      },
      {
        "name": "Matthew Bergman",
        "email": "mzbphoto@gmail.com"
      },
      {
        "name": "brad dunbar",
        "email": "dunbarb2@gmail.com"
      },
      {
        "name": "Dominic Tarr"
      },
      {
        "name": "Travis Person",
        "email": "travis.person@gmail.com"
      },
      {
        "name": "Jinkwon Lee",
        "email": "master@bdyne.net"
      },
      {
        "name": "BigBlueHat",
        "email": "byoung@bigbluehat.com"
      },
      {
        "name": "Daniel Dalton",
        "email": "daltond2@hawkmail.newpaltz.edu"
      },
      {
        "name": "Jade Michael Thornton",
        "email": "jade@jmthornton.net"
      }
    ],
    "dependencies": {
      "basic-auth": "^1.0.3",
      "colors": "^1.4.0",
      "corser": "^2.0.1",
      "ecstatic": "^3.3.2",
      "http-proxy": "^1.18.0",
      "minimist": "^1.2.5",
      "opener": "^1.5.1",
      "portfinder": "^1.0.25",
      "secure-compare": "3.0.1",
      "union": "~0.5.0"
    },
    "devDependencies": {
      "common-style": "^3.0.0",
      "request": "^2.88.2",
      "vows": "~0.8.3"
    },
    "bugs": {
      "url": "https://github.com/http-party/http-server/issues"
    },
    "license": "MIT",
    "preferGlobal": true,
    "bin": {
      "http-server": "bin/http-server",
      "hs": "bin/http-server"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-http-server-0.12.3-ba0471d0ecc425886616cb35c4faf279140a0d37-integrity/node_modules/http-server/package.json",
    "readmeFilename": "README.md",
    "readme": "[![build status](https://img.shields.io/travis/http-party/http-server.svg?style=flat-square)](https://travis-ci.org/http-party/http-server)\n[![npm](https://img.shields.io/npm/v/http-server.svg?style=flat-square)](https://www.npmjs.com/package/http-server) [![homebrew](https://img.shields.io/homebrew/v/http-server?style=flat-square)](https://formulae.brew.sh/formula/http-server) [![npm downloads](https://img.shields.io/npm/dm/http-server?color=blue&label=npm%20downloads&style=flat-square)](https://www.npmjs.com/package/http-server)\n[![license](https://img.shields.io/github/license/http-party/http-server.svg?style=flat-square)](https://github.com/http-party/http-server)\n\n# http-server: a command-line http server\n\n`http-server` is a simple, zero-configuration command-line http server.  It is powerful enough for production usage, but it's simple and hackable enough to be used for testing, local development, and learning.\n\n![Example of running http-server](https://github.com/http-party/http-server/raw/master/screenshots/public.png)\n\n## Installation:\n\n#### Globally via `npm`\n\n    npm install --global http-server\n\nThis will install `http-server` globally so that it may be run from the command line anywhere.\n\n#### Globally via Homebrew\n\n    brew install http-server\n\n#### Running on-demand:\n\nUsing `npx` you can run the script without installing it first:\n\n    npx http-server [path] [options]\n     \n#### As a dependency in your `npm` package:\n\n    npm install http-server\n\n## Usage:\n\n     http-server [path] [options]\n\n`[path]` defaults to `./public` if the folder exists, and `./` otherwise.\n\n*Now you can visit http://localhost:8080 to view your server*\n\n**Note:** Caching is on by default. Add `-c-1` as an option to disable caching.\n\n## Available Options:\n\n`-p` or `--port` Port to use (defaults to 8080)\n\n`-a` Address to use (defaults to 0.0.0.0)\n\n`-d` Show directory listings (defaults to `true`)\n\n`-i` Display autoIndex (defaults to `true`)\n\n`-g` or `--gzip` When enabled (defaults to `false`) it will serve `./public/some-file.js.gz` in place of `./public/some-file.js` when a gzipped version of the file exists and the request accepts gzip encoding. If brotli is also enabled, it will try to serve brotli first.\n\n`-b` or `--brotli` When enabled (defaults to `false`) it will serve `./public/some-file.js.br` in place of `./public/some-file.js` when a brotli compressed version of the file exists and the request accepts `br` encoding. If gzip is also enabled, it will try to serve brotli first.\n\n`-e` or `--ext` Default file extension if none supplied (defaults to `html`)\n\n`-s` or `--silent` Suppress log messages from output\n\n`--cors` Enable CORS via the `Access-Control-Allow-Origin` header\n\n`-o [path]` Open browser window after starting the server. Optionally provide a URL path to open. e.g.: -o /other/dir/\n\n`-c` Set cache time (in seconds) for cache-control max-age header, e.g. `-c10` for 10 seconds (defaults to `3600`). To disable caching, use `-c-1`.\n\n`-U` or `--utc` Use UTC time format in log messages.\n\n`--log-ip` Enable logging of the client's IP address (default: `false`).\n\n`-P` or `--proxy` Proxies all requests which can't be resolved locally to the given url. e.g.: -P http://someurl.com\n\n`--username` Username for basic authentication [none]\n\n`--password` Password for basic authentication [none]\n\n`-S` or `--ssl` Enable https.\n\n`-C` or `--cert` Path to ssl cert file (default: `cert.pem`).\n\n`-K` or `--key` Path to ssl key file (default: `key.pem`).\n\n`-r` or `--robots` Provide a /robots.txt (whose content defaults to `User-agent: *\\nDisallow: /`)\n\n`--no-dotfiles` Do not show dotfiles\n\n`-h` or `--help` Print this list and exit.\n\n`-v` or `--version` Print the version and exit.\n\n## Magic Files\n\n- `index.html` will be served as the default file to any directory requests.\n- `404.html` will be served if a file is not found. This can be used for Single-Page App (SPA) hosting to serve the entry page.\n\n## Catch-all redirect\n\nTo implement a catch-all redirect, use the index page itself as the proxy with:\n\n```\nhttp-server --proxy http://localhost:8080?\n```\n\nNote the `?` at the end of the proxy URL. Thanks to [@houston3](https://github.com/houston3) for this clever hack!\n\n## TLS/SSL\n\nFirst, you need to make sure that [openssl](https://github.com/openssl/openssl) is installed correctly, and you have `key.pem` and `cert.pem` files. You can generate them using this command:\n\n``` sh\nopenssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem\n```\n\nYou will be prompted with a few questions after entering the command. Use `127.0.0.1` as value for `Common name` if you want to be able to install the certificate in your OS's root certificate store or browser so that it is trusted.\n\nThis generates a cert-key pair and it will be valid for 3650 days (about 10 years).\n\nThen you need to run the server with `-S` for enabling SSL and `-C` for your certificate file.\n\n``` sh\nhttp-server -S -C cert.pem\n```\n\nThis is what should be output if successful:\n\n``` sh\nStarting up http-server, serving ./ through https\nAvailable on:\n  https:127.0.0.1:8080\n  https:192.168.1.101:8080\n  https:192.168.1.104:8080\nHit CTRL-C to stop the server\n```\n\n# Development\n\nCheckout this repository locally, then:\n\n```sh\n$ npm i\n$ node bin/http-server\n```\n\n*Now you can visit http://localhost:8080 to view your server*\n\nYou should see the turtle image in the screenshot above hosted at that URL. See\nthe `./public` folder for demo content.\n",
    "licenseText": "Copyright (c) 2011-2020 Charlie Robbins, Marak Squires, and the Contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/http-server/-/http-server-0.12.3.tgz#ba0471d0ecc425886616cb35c4faf279140a0d37",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/http-server/-/http-server-0.12.3.tgz",
    "hash": "ba0471d0ecc425886616cb35c4faf279140a0d37",
    "integrity": "sha512-be0dKG6pni92bRjq0kvExtj/NrrAd28/8fCXkaI/4piTwQMSDSLMhWyW0NI1V+DBI3aa1HMlQu46/HjVLfmugA==",
    "registry": "npm",
    "packageName": "http-server",
    "cacheIntegrity": "sha512-be0dKG6pni92bRjq0kvExtj/NrrAd28/8fCXkaI/4piTwQMSDSLMhWyW0NI1V+DBI3aa1HMlQu46/HjVLfmugA== sha1-ugRx0OzEJYhmFss1xPryeRQKDTc="
  },
  "registry": "npm",
  "hash": "ba0471d0ecc425886616cb35c4faf279140a0d37"
}