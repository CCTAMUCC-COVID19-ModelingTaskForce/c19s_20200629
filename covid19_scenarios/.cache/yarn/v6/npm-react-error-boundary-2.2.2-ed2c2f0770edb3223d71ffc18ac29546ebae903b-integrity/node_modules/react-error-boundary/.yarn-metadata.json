{
  "manifest": {
    "name": "react-error-boundary",
    "version": "2.2.2",
    "description": "Simple reusable React error boundary component",
    "main": "dist/react-error-boundary.cjs.js",
    "module": "dist/react-error-boundary.esm.js",
    "browser": "dist/react-error-boundary.umd.js",
    "sideEffects": false,
    "keywords": [
      "react",
      "error boundary",
      "error handling"
    ],
    "author": {
      "name": "Brian Vaughn",
      "email": "brian.david.vaughn@gmail.com"
    },
    "license": "MIT",
    "engines": {
      "node": ">=10",
      "npm": ">=6"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/bvaughn/react-error-boundary"
    },
    "bugs": {
      "url": "https://github.com/bvaughn/react-error-boundary/issues"
    },
    "homepage": "https://github.com/bvaughn/react-error-boundary#readme",
    "files": [
      "dist",
      "index.d.ts"
    ],
    "scripts": {
      "build": "kcd-scripts build --bundle",
      "lint": "kcd-scripts lint",
      "setup": "npm install && npm run validate -s",
      "test": "kcd-scripts test",
      "test:update": "npm test -- --updateSnapshot --coverage",
      "validate": "kcd-scripts validate"
    },
    "dependencies": {
      "@babel/runtime": "^7.9.6"
    },
    "devDependencies": {
      "@testing-library/jest-dom": "^5.5.0",
      "@testing-library/react": "^10.0.4",
      "@testing-library/user-event": "^10.1.0",
      "kcd-scripts": "^5.11.1",
      "react": "^16.13.1",
      "react-dom": "^16.13.1",
      "typescript": "^3.8.3"
    },
    "peerDependencies": {
      "react": ">=16.0.0"
    },
    "eslintConfig": {
      "extends": "./node_modules/kcd-scripts/eslint.js",
      "rules": {
        "react/prop-types": "off",
        "react/no-did-update-set-state": "off"
      }
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-react-error-boundary-2.2.2-ed2c2f0770edb3223d71ffc18ac29546ebae903b-integrity/node_modules/react-error-boundary/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n<h1>react-error-boundary</h1>\n\n<p>Simple reusable React error boundary component</p>\n</div>\n\n---\n\n<!-- prettier-ignore-start -->\n[![Build Status][build-badge]][build]\n[![Code Coverage][coverage-badge]][coverage]\n[![version][version-badge]][package]\n[![downloads][downloads-badge]][npmtrends]\n[![MIT License][license-badge]][license]\n\n[![PRs Welcome][prs-badge]][prs]\n[![Code of Conduct][coc-badge]][coc]\n<!-- prettier-ignore-end -->\n\n## The problem\n\nReact [v16](https://reactjs.org/blog/2017/09/26/react-v16.0.html) introduced the\nconcept of [‚Äúerror boundaries‚Äù](https://reactjs.org/docs/error-boundaries.html).\n\n## This solution\n\nThis component provides a simple and reusable wrapper that you can use to wrap\naround your components. Any rendering errors in your components hierarchy can\nthen be gracefully handled.\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Error Recovery](#error-recovery)\n- [API](#api)\n  - [`ErrorBoundary` props](#errorboundary-props)\n  - [`children`](#children)\n  - [`FallbackComponent`](#fallbackcomponent)\n  - [`fallbackRender`](#fallbackrender)\n  - [`fallback`](#fallback)\n  - [`onError`](#onerror)\n  - [`onReset`](#onreset)\n  - [`resetKeys`](#resetkeys)\n  - [`onResetKeysChange`](#onresetkeyschange)\n- [Issues](#issues)\n  - [üêõ Bugs](#-bugs)\n  - [üí° Feature Requests](#-feature-requests)\n- [LICENSE](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nThis module is distributed via [npm][npm] which is bundled with [node][node] and\nshould be installed as one of your project's `dependencies`:\n\n```\nnpm install --save react-error-boundary\n```\n\n## Usage\n\nThe simplest way to use `<ErrorBoundary>` is to wrap it around any component\nthat may throw an error. This will handle errors thrown by that component and\nits descendants too.\n\n```jsx\nimport {ErrorBoundary} from 'react-error-boundary'\n\nfunction ErrorFallback({error, componentStack, resetErrorBoundary}) {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n      <pre>{componentStack}</pre>\n      <button onClick={resetErrorBoundary}>Try again</button>\n    </div>\n  )\n}\n\nconst ui = (\n  <ErrorBoundary\n    FallbackComponent={ErrorFallback}\n    onReset={() => {\n      // reset the state of your app so the error doesn't happen again\n    }}\n  >\n    <ComponentThatMayError />\n  </ErrorBoundary>\n)\n```\n\nYou can react to errors (e.g. for logging) by providing an `onError` callback:\n\n```jsx\nimport {ErrorBoundary} from 'react-error-boundary'\n\nconst myErrorHandler = (error: Error, componentStack: string) => {\n  // Do something with the error\n  // E.g. log to an error logging client here\n}\n\nconst ui = (\n  <ErrorBoundary FallbackComponent={ErrorFallback} onError={myErrorHandler}>\n    <ComponentThatMayError />\n  </ErrorBoundary>,\n)\n```\n\nYou can also use it as a\n[higher-order component](https://reactjs.org/docs/higher-order-components.html):\n\n```jsx\nimport {withErrorBoundary} from 'react-error-boundary'\n\nconst ComponentWithErrorBoundary = withErrorBoundary(ComponentThatMayError, {\n  FallbackComponent: ErrorBoundaryFallbackComponent,\n  onError(error, componentStack) {\n    // Do something with the error\n    // E.g. log to an error logging client here\n  },\n})\n\nconst ui = <ComponentWithErrorBoundary />\n```\n\n### Error Recovery\n\nIn the event of an error if you want to recover from that error and allow the\nuser to \"try again\" or continue with their work, you'll need a way to reset the\nErrorBoundary's internal state. You can do this various ways, but here's the\nmost idiomatic approach:\n\n```jsx\nfunction ErrorFallback({error, componentStack, resetErrorBoundary}) {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n      <pre>{componentStack}</pre>\n      <button onClick={resetErrorBoundary}>Try again</button>\n    </div>\n  )\n}\n\nfunction Bomb() {\n  throw new Error('üí• CABOOM üí•')\n}\n\nfunction App() {\n  const [explode, setExplode] = React.useState(false)\n  return (\n    <div>\n      <button onClick={() => setExplode(e => !e)}>toggle explode</button>\n      <ErrorBoundary\n        FallbackComponent={ErrorFallback}\n        onReset={() => setExplode(false)}\n        resetKeys={[explode]}\n      >\n        {explode ? <Bomb /> : null}\n      </ErrorBoundary>\n    </div>\n  )\n}\n```\n\nSo, with this setup, you've got a button which when clicked will trigger an\nerror. Clicking the button again will trigger a re-render which recovers from\nthe error (we no longer render the `<Bomb />`). We also pass the `resetKeys`\nprop which is an array of elements for the `ErrorBoundary` to check each render\n(if there's currently an error state). If any of those elements change between\nrenders, then the `ErrorBoundary` will reset the state which will re-render the\nchildren.\n\nWe have the `onReset` prop so that if the user clicks the \"Try again\" button we\nhave an opportunity to re-initialize our state into a good place before\nattempting to re-render the children.\n\nThis combination allows us both the opportunity to give the user something\nspecific to do to recover from the error, and recover from the error by\ninteracting with other areas of the app that might fix things for us. It's hard\nto describe here, but hopefully it makes sense when you apply it to your\nspecific scenario.\n\n## API\n\n### `ErrorBoundary` props\n\n### `children`\n\nThis is what you want rendered when everything's working fine. If there's an\nerror that React can handle within the children of the `ErrorBoundary`, the\n`ErrorBoundary` will catch that and allow you to handle it gracefully.\n\n### `FallbackComponent`\n\nThis is a component you want rendered in the event of an error. As props it will\nbe passed the `error`, `componentStack`, and `resetErrorBoundary` (which will\nreset the error boundary's state when called, useful for a \"try again\" button\nwhen used in combination with the `onReset` prop).\n\nThis is required if no `fallback` or `fallbackRender` prop is provided.\n\n### `fallbackRender`\n\nThis is a render-prop based API that allows you to inline your error fallback UI\ninto the component that's using the `ErrorBoundary`. This is useful if you need\naccess to something that's in the scope of the component you're using.\n\nIt will be called with an object that has `error`, `componentStack`, and\n`resetErrorBoundary`:\n\n```jsx\nconst ui = (\n  <ErrorBoundary\n    fallbackRender={({error, resetErrorBoundary}) => (\n      <div role=\"alert\">\n        <div>Oh no</div>\n        <pre>{error.message}</pre>\n        <button\n          onClick={() => {\n            // this next line is why the fallbackRender is useful\n            resetComponentState()\n            // though you could accomplish this with a combination\n            // of the FallbackCallback and onReset props as well.\n            resetErrorBoundary()\n          }}\n        >\n          Try again\n        </button>\n      </div>\n    )}\n  >\n    <ComponentThatMayError />\n  </ErrorBoundary>\n)\n```\n\nI know what you're thinking: I thought we ditched render props when hooks came\naround. Unfortunately, the current React Error Boundary API only supports class\ncomponents at the moment, so render props are the best solution we have to this\nproblem.\n\nThis is required if no `FallbackComponent` or `fallback` prop is provided.\n\n### `fallback`\n\nIn the spirit of consistency with the `React.Suspense` component, we also\nsupport a simple `fallback` prop which you can use for a generic fallback. This\nwill not be passed any props so you can't show the user anything actually useful\nthough, so it's not really recommended.\n\n```jsx\nconst ui = (\n  <ErrorBoundary fallback={<div>Oh no</div>}>\n    <ComponentThatMayError />\n  </ErrorBoundary>\n)\n```\n\n### `onError`\n\nThis will be called when there's been an error that the `ErrorBoundary` has\nhandled. It will be called with two arguments: `error`, `componentStack`.\n\n### `onReset`\n\nThis will be called immediately before the `ErrorBoundary` resets it's internal\nstate (which will result in rendering the `children` again). You should use this\nto ensure that re-rendering the children will not result in a repeat of the same\nerror happening again.\n\n`onReset` will be called with whatever `resetErrorBoundary` is called with.\n\n**Important**: `onReset` will _not_ be called when reset happens from a change\nin `resetKeys`. Use `onResetKeysChange` for that.\n\n### `resetKeys`\n\nSometimes an error happens as a result of local state to the component that's\nrendering the error. If this is the case, then you can pass `resetKeys` which is\nan array of values. If the `ErrorBoundary` is in an error state, then it will\ncheck these values each render and if they change from one render to the next,\nthen it will reset automatically (triggering a re-render of the `children`).\n\nSee the recovery examples above.\n\n### `onResetKeysChange`\n\nThis is called when the `resetKeys` are changed (triggering a reset of the\n`ErrorBoundary`). It's called with the `prevResetKeys` and the `resetKeys`.\n\n## Issues\n\n_Looking to contribute? Look for the [Good First Issue][good-first-issue]\nlabel._\n\n### üêõ Bugs\n\nPlease file an issue for bugs, missing documentation, or unexpected behavior.\n\n[**See Bugs**][bugs]\n\n### üí° Feature Requests\n\nPlease file an issue to suggest new features. Vote on feature requests by adding\na üëç. This helps maintainers prioritize what to work on.\n\n[**See Feature Requests**][requests]\n\n## LICENSE\n\nMIT\n\n<!-- prettier-ignore-start -->\n[npm]: https://www.npmjs.com\n[node]: https://nodejs.org\n[build-badge]: https://img.shields.io/travis/bvaughn/react-error-boundary.svg?style=flat-square\n[build]: https://travis-ci.org/bvaughn/react-error-boundary\n[coverage-badge]: https://img.shields.io/codecov/c/github/bvaughn/react-error-boundary.svg?style=flat-square\n[coverage]: https://codecov.io/github/bvaughn/react-error-boundary\n[version-badge]: https://img.shields.io/npm/v/react-error-boundary.svg?style=flat-square\n[package]: https://www.npmjs.com/package/react-error-boundary\n[downloads-badge]: https://img.shields.io/npm/dm/react-error-boundary.svg?style=flat-square\n[npmtrends]: http://www.npmtrends.com/react-error-boundary\n[license-badge]: https://img.shields.io/npm/l/react-error-boundary.svg?style=flat-square\n[license]: https://github.com/bvaughn/react-error-boundary/blob/master/LICENSE\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[coc-badge]: https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square\n[coc]: https://github.com/bvaughn/react-error-boundary/blob/master/other/CODE_OF_CONDUCT.md\n[bugs]: https://github.com/bvaughn/react-error-boundary/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Acreated-desc+label%3Abug\n[requests]: https://github.com/bvaughn/react-error-boundary/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3Aenhancement\n[good-first-issue]: https://github.com/bvaughn/react-error-boundary/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3Aenhancement+label%3A%22good+first+issue%22\n<!-- prettier-ignore-end -->\n",
    "licenseText": "The MIT License (MIT)\nCopyright (c) 2020 Brian Vaughn\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-error-boundary/-/react-error-boundary-2.2.2.tgz#ed2c2f0770edb3223d71ffc18ac29546ebae903b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-error-boundary/-/react-error-boundary-2.2.2.tgz",
    "hash": "ed2c2f0770edb3223d71ffc18ac29546ebae903b",
    "integrity": "sha512-P6gKUS1eTTYIWJKyjhIH5MZzgXbI5lrAL0BkIMpHZaaen+ZPaEfZrdnnXILUqDFzI+WwIPDesyzQvhRbxuvjcg==",
    "registry": "npm",
    "packageName": "react-error-boundary",
    "cacheIntegrity": "sha512-P6gKUS1eTTYIWJKyjhIH5MZzgXbI5lrAL0BkIMpHZaaen+ZPaEfZrdnnXILUqDFzI+WwIPDesyzQvhRbxuvjcg== sha1-7SwvB3DtsyI9cf/BisKVRuuukDs="
  },
  "registry": "npm",
  "hash": "ed2c2f0770edb3223d71ffc18ac29546ebae903b"
}