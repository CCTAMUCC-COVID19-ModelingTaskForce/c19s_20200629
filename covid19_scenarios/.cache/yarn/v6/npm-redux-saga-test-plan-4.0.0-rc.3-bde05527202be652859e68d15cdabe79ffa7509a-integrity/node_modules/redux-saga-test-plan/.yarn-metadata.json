{
  "manifest": {
    "name": "redux-saga-test-plan",
    "version": "4.0.0-rc.3",
    "description": "Test Redux Saga with an easy plan",
    "main": "lib/index.js",
    "files": [
      "decls",
      "src",
      "lib",
      "matchers.js",
      "providers.js",
      "*.d.ts"
    ],
    "scripts": {
      "build": "babel src --out-dir lib --ignore __mocks__",
      "check": "npm run lint && npm run typecheck && npm test",
      "clean": "rimraf lib",
      "format": "prettier --write \"{src,__tests__}/**/*.js\"",
      "lint": "eslint src/ __tests__/",
      "prepublishOnly": "npm run clean && npm run build",
      "test": "jest",
      "test:ci": "jest --runInBand",
      "watch:test": "npm test -- --watch",
      "typecheck": "flow",
      "docs:clean": "rimraf _book",
      "docs:prepare": "gitbook install",
      "docs:build": "npm run docs:prepare && gitbook build",
      "docs:watch": "npm run docs:prepare && gitbook serve",
      "docs:publish": "npm run docs:clean && npm run docs:build && cp CNAME _book && cd _book && git init && git commit --allow-empty -m 'update book' && git checkout -b gh-pages && touch .nojekyll && git add . && git commit -am 'update book' && git push git@github.com:jfairbank/redux-saga-test-plan gh-pages --force"
    },
    "typings": "index.d.ts",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/jfairbank/redux-saga-test-plan.git"
    },
    "keywords": [
      "redux",
      "saga",
      "redux-saga",
      "test",
      "testing",
      "tdd",
      "bdd"
    ],
    "author": {
      "name": "Jeremy Fairbank",
      "email": "elpapapollo@gmail.com",
      "url": "http://jeremyfairbank.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/jfairbank/redux-saga-test-plan/issues"
    },
    "homepage": "https://github.com/jfairbank/redux-saga-test-plan#readme",
    "devDependencies": {
      "babel-cli": "^6.7.7",
      "babel-core": "^6.7.7",
      "babel-eslint": "^8.0.0",
      "babel-jest": "^21.0.2",
      "babel-plugin-transform-async-to-generator": "^6.16.0",
      "babel-plugin-transform-export-extensions": "^6.22.0",
      "babel-plugin-transform-flow-strip-types": "^6.8.0",
      "babel-plugin-transform-object-rest-spread": "^6.20.2",
      "babel-polyfill": "^6.16.0",
      "babel-preset-es2015": "^6.16.0",
      "babel-register": "^6.7.2",
      "eslint": "^4.7.0",
      "eslint-config-airbnb-base": "^12.0.0",
      "eslint-config-prettier": "^6.3.0",
      "eslint-import-resolver-node": "^0.3.0",
      "eslint-plugin-flowtype": "^3.3.0",
      "eslint-plugin-import": "^2.1.0",
      "eslint-plugin-prettier": "^2.6.0",
      "flow-bin": "^0.93.0",
      "gitbook-cli": "^2.3.0",
      "gitbook-plugin-advanced-emoji": "^0.2.2",
      "gitbook-plugin-github": "^2.0.0",
      "jest": "^21.1.0",
      "prettier": "1.11.0",
      "redux": "^4.0.0",
      "redux-saga": "^1.1.1",
      "@redux-saga/is": "^1.1.0",
      "@redux-saga/testing-utils": "^1.1.1",
      "@redux-saga/symbols": "^1.1.0",
      "rimraf": "^2.5.4"
    },
    "dependencies": {
      "core-js": "^2.4.1",
      "fsm-iterator": "^1.1.0",
      "lodash.isequal": "^4.5.0",
      "lodash.ismatch": "^4.4.0",
      "object-assign": "^4.1.0",
      "util-inspect": "^0.1.8"
    },
    "peerDependencies": {
      "redux-saga": "^1.0.1"
    },
    "jest": {
      "testEnvironment": "node",
      "collectCoverage": true,
      "collectCoverageFrom": [
        "src/**/*.js",
        "!src/utils/**/*.js"
      ],
      "coverageReporters": [
        "json",
        "lcov",
        "text-summary"
      ],
      "modulePaths": [
        "<rootDir>/src/",
        "<rootDir/__tests__/"
      ],
      "testRegex": "__tests__/.*\\.test\\.js$"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-redux-saga-test-plan-4.0.0-rc.3-bde05527202be652859e68d15cdabe79ffa7509a-integrity/node_modules/redux-saga-test-plan/package.json",
    "readmeFilename": "README.md",
    "readme": "# Redux Saga Test Plan\n\n## Notice:\n* v4.0.0-rc.1 compatible with redux-saga prior v1.1.1\n* v4.0.0-rc.2 compatible with redux-saga v1.1.1 and typescript 3.6 onwards.\n\n[![npm](https://img.shields.io/npm/v/redux-saga-test-plan.svg?style=flat-square)](https://www.npmjs.com/package/redux-saga-test-plan)\n[![Travis branch](https://img.shields.io/travis/jfairbank/redux-saga-test-plan/master.svg?style=flat-square)](https://travis-ci.org/jfairbank/redux-saga-test-plan)\n[![Codecov](https://img.shields.io/codecov/c/github/jfairbank/redux-saga-test-plan.svg?style=flat-square)](https://codecov.io/gh/jfairbank/redux-saga-test-plan)\n\n#### Test Redux Saga with an easy plan.\n\nRedux Saga Test Plan makes testing sagas a breeze. Whether you need to test\nexact effects and their ordering or just test your saga `put`'s a specific\naction at some point, Redux Saga Test Plan has you covered.\n\nRedux Saga Test Plan aims to embrace both integration testing and unit testing\napproaches to make testing your sagas easy.\n\n## Table of Contents\n\n* [Integration Testing](#integration-testing)\n  * [Simple Example](#simple-example)\n  * [Mocking with Providers](#mocking-with-providers)\n  * [Example with Reducer](#example-with-reducer)\n* [Unit Testing](#unit-testing)\n* [Install](#install)\n\n## Documentation\n\n* [Introduction](http://redux-saga-test-plan.jeremyfairbank.com/)\n* [Getting Started](http://redux-saga-test-plan.jeremyfairbank.com/getting-started.html)\n* [Integration Testing](http://redux-saga-test-plan.jeremyfairbank.com/integration-testing/)\n* [Unit Testing](http://redux-saga-test-plan.jeremyfairbank.com/unit-testing/)\n\n## Integration Testing\n\n**Requires global `Promise` to be available**\n\nOne downside to unit testing sagas is that it couples your test to your\nimplementation. Simple reordering of yielded effects in your saga could break\nyour tests even if the functionality stays the same. If you're not concerned\nwith the order or exact effects your saga yields, then you can take an\nintegrative approach, testing the behavior of your saga when run by Redux Saga.\nThen, you can simply test that a particular effect was yielded during the saga\nrun. For this, use the `expectSaga` test function.\n\n### Simple Example\n\nImport the `expectSaga` function and pass in your saga function as an argument.\nAny additional arguments to `expectSaga` will become arguments to the saga\nfunction. The return value is a chainable API with assertions for the different\neffect creators available in Redux Saga.\n\nIn the example below, we test that the `userSaga` successfully `put`s a\n`RECEIVE_USER` action with the `fakeUser` as the payload. We call `expectSaga`\nwith the `userSaga` and supply an `api` object as an argument to `userSaga`. We\nassert the expected `put` effect via the `put` assertion method. Then, we call\nthe `dispatch` method with a `REQUEST_USER` action that contains the user id\npayload. The `dispatch` method will supply actions to `take` effects. Finally,\nwe start the test by calling the `run` method which returns a `Promise`. Tests\nwith `expectSaga` will always run asynchronously, so the returned `Promise`\nresolves when the saga finishes or when `expectSaga` forces a timeout. If you're\nusing a test runner like Jest, you can return the `Promise` inside your Jest\ntest so Jest knows when the test is complete.\n\n```js\nimport { call, put, take } from 'redux-saga/effects';\nimport { expectSaga } from 'redux-saga-test-plan';\n\nfunction* userSaga(api) {\n  const action = yield take('REQUEST_USER');\n  const user = yield call(api.fetchUser, action.payload);\n\n  yield put({ type: 'RECEIVE_USER', payload: user });\n}\n\nit('just works!', () => {\n  const api = {\n    fetchUser: id => ({ id, name: 'Tucker' }),\n  };\n\n  return expectSaga(userSaga, api)\n    // Assert that the `put` will eventually happen.\n    .put({\n      type: 'RECEIVE_USER',\n      payload: { id: 42, name: 'Tucker' },\n    })\n\n    // Dispatch any actions that the saga will `take`.\n    .dispatch({ type: 'REQUEST_USER', payload: 42 })\n\n    // Start the test. Returns a Promise.\n    .run();\n});\n```\n\n### Mocking with Providers\n\n`expectSaga` runs your saga with Redux Saga, so it will try to resolve effects\njust like Redux Saga would in your application. This is great for integration\ntesting, but sometimes it can be laborious to bootstrap your entire application\nfor tests or mock things like server APIs. In those cases, you can use\n_providers_ which are perfect for mocking values directly with `expectSaga`.\nProviders are similar to middleware that allow you to intercept effects before\nthey reach Redux Saga. You can choose to return a mock value instead of allowing\nRedux Saga to handle the effect, or you can pass on the effect to other\nproviders or eventually Redux Saga.\n\n`expectSaga` has two flavors of providers, _static providers_ and _dynamic\nproviders_. Static providers are easier to compose and reuse, but dynamic\nproviders give you more flexibility with non-deterministic effects. Here is one\nexample below using static providers. There are more examples of providers [in\nthe\ndocs](http://redux-saga-test-plan.jeremyfairbank.com/integration-testing/mocking/).\n\n```js\nimport { call, put, take } from 'redux-saga/effects';\nimport { expectSaga } from 'redux-saga-test-plan';\nimport * as matchers from 'redux-saga-test-plan/matchers';\nimport { throwError } from 'redux-saga-test-plan/providers';\nimport api from 'my-api';\n\nfunction* userSaga(api) {\n  try {\n    const action = yield take('REQUEST_USER');\n    const user = yield call(api.fetchUser, action.payload);\n    const pet = yield call(api.fetchPet, user.petId);\n\n    yield put({\n      type: 'RECEIVE_USER',\n      payload: { user, pet },\n    });\n  } catch (e) {\n    yield put({ type: 'FAIL_USER', error: e });\n  }\n}\n\nit('fetches the user', () => {\n  const fakeUser = { name: 'Jeremy', petId: 20 };\n  const fakeDog = { name: 'Tucker' };\n\n  return expectSaga(userSaga, api)\n    .provide([\n      [call(api.fetchUser, 42), fakeUser],\n      [matchers.call.fn(api.fetchPet), fakeDog],\n    ])\n    .put({\n      type: 'RECEIVE_USER',\n      payload: { user: fakeUser, pet: fakeDog },\n    })\n    .dispatch({ type: 'REQUEST_USER', payload: 42 })\n    .run();\n});\n\nit('handles errors', () => {\n  const error = new Error('error');\n\n  return expectSaga(userSaga, api)\n    .provide([\n      [matchers.call.fn(api.fetchUser), throwError(error)],\n    ])\n    .put({ type: 'FAIL_USER', error })\n    .dispatch({ type: 'REQUEST_USER', payload: 42 })\n    .run();\n});\n```\n\nNotice we pass in an array of tuple pairs (or array pairs) that contain a\nmatcher and a fake value. You can use the effect creators from Redux Saga or\nmatchers from the `redux-saga-test-plan/matchers` module to match effects. The\nbonus of using Redux Saga Test Plan's matchers is that they offer special\npartial matchers like `call.fn` which matches by the function without worrying\nabout the specific `args` contained in the actual `call` effect. Notice in the\nsecond test that we can also simulate errors with the `throwError` function from\nthe `redux-saga-test-plan/providers` module. This is perfect for simulating\nserver problems.\n\n### Example with Reducer\n\nOne good use case for integration testing is testing your reducer too. You can\nhook up your reducer to your test by calling the `withReducer` method with your\nreducer function.\n\n```js\nimport { put } from 'redux-saga/effects';\nimport { expectSaga } from 'redux-saga-test-plan';\n\nconst initialDog = {\n  name: 'Tucker',\n  age: 11,\n};\n\nfunction reducer(state = initialDog, action) {\n  if (action.type === 'HAVE_BIRTHDAY') {\n    return {\n      ...state,\n      age: state.age + 1,\n    };\n  }\n\n  return state;\n}\n\nfunction* saga() {\n  yield put({ type: 'HAVE_BIRTHDAY' });\n}\n\nit('handles reducers and store state', () => {\n  return expectSaga(saga)\n    .withReducer(reducer)\n\n    .hasFinalState({\n      name: 'Tucker',\n      age: 12, // <-- age changes in store state\n    })\n\n    .run();\n});\n```\n\n## Unit Testing\n\nIf you want to ensure that your saga yields specific types of effects in a\nparticular order, then you can use the `testSaga` function. Here's a simple\nexample:\n\n```js\nimport { testSaga } from 'redux-saga-test-plan';\n\nfunction identity(value) {\n  return value;\n}\n\nfunction* mainSaga(x, y) {\n  const action = yield take('HELLO');\n\n  yield put({ type: 'ADD', payload: x + y });\n  yield call(identity, action);\n}\n\nconst action = { type: 'TEST' };\n\nit('works with unit tests', () => {\n  testSaga(mainSaga, 40, 2)\n    // advance saga with `next()`\n    .next()\n\n    // assert that the saga yields `take` with `'HELLO'` as type\n    .take('HELLO')\n\n    // pass back in a value to a saga after it yields\n    .next(action)\n\n    // assert that the saga yields `put` with the expected action\n    .put({ type: 'ADD', payload: 42 })\n\n    .next()\n\n    // assert that the saga yields a `call` to `identity` with\n    // the `action` argument\n    .call(identity, action)\n\n    .next()\n\n    // assert that the saga is finished\n    .isDone();\n});\n```\n\n## Install\n\n### Redux Saga 1.0 Beta\n\nRedux Saga Test Plan **v4.0.0-beta.1** supports Redux Saga **v1.0.0-beta.1**.\n\nInstall with yarn or npm.\n\n```\nyarn add redux-saga-test-plan@beta --dev\n```\n\n```\nnpm install --save-dev redux-saga-test-plan@beta\n```\n\n### Redux Saga Stable\n\nRedux Saga Test Plan **v3** supports Redux Saga **>= v0.15**.\n\nInstall with yarn or npm.\n\n```\nyarn add redux-saga-test-plan --dev\n```\n\n```\nnpm install --save-dev redux-saga-test-plan\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Jeremy Fairbank\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/redux-saga-test-plan/-/redux-saga-test-plan-4.0.0-rc.3.tgz#bde05527202be652859e68d15cdabe79ffa7509a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/redux-saga-test-plan/-/redux-saga-test-plan-4.0.0-rc.3.tgz",
    "hash": "bde05527202be652859e68d15cdabe79ffa7509a",
    "integrity": "sha512-18Ha1AWmP4Xt64cSyJv2j7sH8lwQzdk/LByiyhoNyuqyhzkQzlKlflHr3LqiSCzn3e2AgFxagynto8XGRqsHcg==",
    "registry": "npm",
    "packageName": "redux-saga-test-plan",
    "cacheIntegrity": "sha512-18Ha1AWmP4Xt64cSyJv2j7sH8lwQzdk/LByiyhoNyuqyhzkQzlKlflHr3LqiSCzn3e2AgFxagynto8XGRqsHcg== sha1-veBVJyAr5lKFnmjRXNq+ef+nUJo="
  },
  "registry": "npm",
  "hash": "bde05527202be652859e68d15cdabe79ffa7509a"
}