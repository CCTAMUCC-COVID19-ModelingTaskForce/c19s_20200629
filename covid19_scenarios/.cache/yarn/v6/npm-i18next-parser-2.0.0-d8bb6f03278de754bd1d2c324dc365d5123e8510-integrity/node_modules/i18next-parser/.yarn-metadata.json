{
  "manifest": {
    "author": {
      "name": "Karel Ledru"
    },
    "description": "Command Line tool for i18next",
    "name": "i18next-parser",
    "version": "2.0.0",
    "license": "MIT",
    "main": "dist/index.js",
    "bin": {
      "i18next": "bin/cli.js"
    },
    "scripts": {
      "test": "mocha -r babel-register -r babel-polyfill --recursive test/*.test.js test/**/*.test.js",
      "watch": "babel src -d dist -w",
      "build": "prettier --write --no-semi --single-quote \"{src,test}/**/*.js\" && babel src -d dist"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/i18next/i18next-parser"
    },
    "dependencies": {
      "broccoli-plugin": "^1.3.0",
      "cheerio": "^1.0.0-rc.2",
      "colors": "~1.2.0-rc0",
      "commander": "~2.9.0",
      "concat-stream": "~1.6.0",
      "eol": "^0.9.1",
      "fs-extra": "^6.0.1",
      "gulp-sort": "^2.0.0",
      "i18next": "^19.0.1",
      "rsvp": "^4.8.2",
      "through2": "~2.0.3",
      "typescript": "^3.6.4",
      "vinyl": "~2.0.1",
      "vinyl-fs": "^3.0.2",
      "vue-template-compiler": "^2.6.11",
      "yamljs": "^0.3.0"
    },
    "optionalDependencies": {},
    "engines": {
      "node": ">=10",
      "npm": ">=6",
      "yarn": ">=1"
    },
    "devDependencies": {
      "babel-cli": "^6.26.0",
      "babel-plugin-add-module-exports": "^0.2.1",
      "babel-plugin-transform-object-rest-spread": "^6.26.0",
      "babel-polyfill": "^6.26.0",
      "babel-preset-env": "^1.6.1",
      "babel-register": "^6.26.0",
      "broccoli": "^1.1.4",
      "broccoli-funnel": "^2.0.1",
      "chai": "^4.1.2",
      "gulp": "^4.0.0",
      "mocha": "^5.0.0",
      "prettier": "2.0.5",
      "sinon": "^6.2.0"
    },
    "keywords": [
      "gulpplugin",
      "i18next",
      "parser",
      "commandline"
    ],
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-i18next-parser-2.0.0-d8bb6f03278de754bd1d2c324dc365d5123e8510-integrity/node_modules/i18next-parser/package.json",
    "readmeFilename": "README.md",
    "readme": "# i18next Parser [![Build Status](https://travis-ci.org/i18next/i18next-parser.svg?branch=master)](https://travis-ci.org/i18next/i18next-parser)\n\n[![NPM](https://nodei.co/npm/i18next-parser.png?downloads=true&stars=true)](https://www.npmjs.com/package/i18next-parser)\n\nWhen translating an application, maintaining the translation catalog by hand is painful. This package parses your code and automates this process.\n\nFinally, if you want to make this process even less painful, I invite you to check [Locize](https://locize.com/). They are a sponsor of this project. Actually, if you use this package and like it, supporting me on [Patreon](https://www.patreon.com/karelledru) would mean a great deal!\n\n<p>\n  <a href=\"https://www.patreon.com/karelledru\" target=\"_blank\">\n    <img src=\"https://c5.patreon.com/external/logo/become_a_patron_button.png\" alt=\"Become a Patreon\">\n  </a>\n</p>\n\n## Features\n\n- Choose your weapon: A CLI, a standalone parser or a stream transform\n- 6 built in lexers: Javascript, JSX, HTML, Handlebars, TypeScript+tsx and Vue\n- Creates one catalog file per locale and per namespace\n- Backs up the old keys your code doesn't use anymore in `namespace_old.json` catalog\n- Restores keys from the `_old` file if the one in the translation file is empty\n- Supports i18next features:\n  - **Context**: keys of the form `key_context`\n  - **Plural**: keys of the form `key_plural` and `key_0`, `key_1` as described [here](https://www.i18next.com/translation-function/plurals)\n- Tested on Node 10+. If you need support for 6 and 8, look at the `1.0.x` versions.\n\n## Versions\n\n`1.x` has been in beta for a good while. You can follow the pre-releases [here](https://github.com/i18next/i18next-parser/releases). It is a deep rewrite of this package that solves many issues, the main one being that it was slowly becoming unmaintainable. The [migration](docs/migration.md) from `0.x` contains all the breaking changes. Everything that follows is related to `1.x`. You can still find the old `0.x` documentation on its dedicated [branch](https://github.com/i18next/i18next-parser/tree/0.x.x).\n\n\n## Usage\n\n### CLI\n\nYou can use the CLI with the package installed locally but if you want to use it from anywhere, you better install it globally:\n\n```\nyarn global add i18next-parser\nnpm install -g i18next-parser\ni18next 'app/**/*.{js,hbs}' 'lib/**/*.{js,hbs}' [-oc]\n```\n\nMultiple globbing patterns are supported to specify complex file selections. You can learn how to write globs [here](https://github.com/isaacs/node-glob). Note that glob must be wrapped with single quotes when passed as arguments.\n\n**IMPORTANT NOTE**: If you pass the globs as CLI argument, they must be relative to where you run the command (aka relative to `process.cwd()`). If you pass the globs via the `input` option of the config file, they must be relative to the config file.\n\n- **-c, --config <path>**: Path to the config file (default: i18next-parser.config.js).\n- **-o, --output <path>**: Path to the output directory (default: locales/$LOCALE/$NAMESPACE.json).\n- **-S, --silent**: Disable logging to stdout.\n\n### Gulp\n\nSave the package to your devDependencies:\n\n```\nyarn add -D i18next-parser\nnpm install --save-dev i18next-parser\n```\n\n[Gulp](http://gulpjs.com/) defines itself as the streaming build system. Put simply, it is like Grunt, but performant and elegant.\n\n```javascript\nconst i18nextParser = require('i18next-parser').gulp;\n\ngulp.task('i18next', function() {\n  gulp.src('app/**')\n    .pipe(new i18nextParser({\n      locales: ['en', 'de'],\n      output: 'locales/$LOCALE/$NAMESPACE.json'\n    }))\n    .pipe(gulp.dest('./'));\n});\n```\n\n**IMPORTANT**: `output` is required to know where to read the catalog from. You might think that `gulp.dest()` is enough though it does not inform the transform where to read the existing catalog from.\n\n### Broccoli\n\nSave the package to your devDependencies:\n\n```\nyarn add -D i18next-parser\nnpm install --save-dev i18next-parser\n```\n\n[Broccoli.js](https://github.com/broccolijs/broccoli) defines itself as a fast, reliable asset pipeline, supporting constant-time rebuilds and compact build definitions.\n\n```javascript\n\nconst Funnel = require('broccoli-funnel')\nconst i18nextParser = require('i18next-parser').broccoli;\n\nconst appRoot = 'broccoli'\n\nlet i18n = new Funnel(appRoot, {\n  files: ['handlebars.hbs', 'javascript.js'],\n  annotation: 'i18next-parser'\n})\n\ni18n = new i18nextParser([i18n], {\n  output: 'broccoli/locales/$LOCALE/$NAMESPACE.json'\n})\n\nmodule.exports = i18n\n```\n\n## Options\n\nUsing a config file gives you fine-grained control over how i18next-parser treats your files. Here's an example config showing all config options with their defaults.\n\n```js\n// i18next-parser.config.js\n\nmodule.exports = {\n  contextSeparator: '_',\n  // Key separator used in your translation keys\n\n  createOldCatalogs: true,\n  // Save the \\_old files\n\n  defaultNamespace: 'translation',\n  // Default namespace used in your i18next config\n\n  defaultValue: '',\n  // Default value to give to empty keys\n\n  indentation: 2,\n  // Indentation of the catalog files\n\n  keepRemoved: false,\n  // Keep keys from the catalog that are no longer in code\n\n  keySeparator: '.',\n  // Key separator used in your translation keys\n  // If you want to use plain english keys, separators such as `.` and `:` will conflict. You might want to set `keySeparator: false` and `namespaceSeparator: false`. That way, `t('Status: Loading...')` will not think that there are a namespace and three separator dots for instance.\n\n  // see below for more details\n  lexers: {\n    hbs: ['HandlebarsLexer'],\n    handlebars: ['HandlebarsLexer'],\n\n    htm: ['HTMLLexer'],\n    html: ['HTMLLexer'],\n\n    mjs: ['JavascriptLexer'],\n    js: ['JavascriptLexer'], // if you're writing jsx inside .js files, change this to JsxLexer\n    ts: ['JavascriptLexer'],\n    jsx: ['JsxLexer'],\n    tsx: ['JsxLexer'],\n\n    default: ['JavascriptLexer']\n  },\n\n  lineEnding: 'auto',\n  // Control the line ending. See options at https://github.com/ryanve/eol\n\n  locales: ['en', 'fr'],\n  // An array of the locales in your applications\n\n  namespaceSeparator: ':',\n  // Namespace separator used in your translation keys\n  // If you want to use plain english keys, separators such as `.` and `:` will conflict. You might want to set `keySeparator: false` and `namespaceSeparator: false`. That way, `t('Status: Loading...')` will not think that there are a namespace and three separator dots for instance.\n\n  output: 'locales/$LOCALE/$NAMESPACE.json',\n  // Supports $LOCALE and $NAMESPACE injection\n  // Supports JSON (.json) and YAML (.yml) file formats\n  // Where to write the locale files relative to process.cwd()\n\n  input: undefined,\n  // An array of globs that describe where to look for source files\n  // relative to the location of the configuration file\n\n  reactNamespace: false,\n  // For react file, extract the defaultNamespace - https://react.i18next.com/latest/withtranslation-hoc\n  // Ignored when parsing a `.jsx` file and namespace is extracted from that file.\n\n  sort: false,\n  // Whether or not to sort the catalog\n\n  skipDefaultValues: false,\n  // Whether to ignore default values.\n\n  useKeysAsDefaultValue: false,\n  // Whether to use the keys as the default value; ex. \"Hello\": \"Hello\", \"World\": \"World\"\n  // This option takes precedence over the `defaultValue` and `skipDefaultValues` options\n\n  verbose: false,\n  // Display info about the parsing including some stats\n\n  customValueTemplate: null,\n  // If you wish to customize the value output the value as an object, you can set your own format.\n  // ${defaultValue} is the default value you set in your translation function.\n  // Any other custom property will be automatically extracted.\n  //\n  // Example:\n  // {\n  //   message: \"${defaultValue}\",\n  //   description: \"${maxLength}\", // t('my-key', {maxLength: 150})\n  // }\n}\n```\n\n### Lexers\n\nThe `lexers` option let you configure which Lexer to use for which extension. Here is the default:\n\nNote the presence of a `default` which will catch any extension that is not listed.\nThere are 4 lexers available: `HandlebarsLexer`, `HTMLLexer`, `JavascriptLexer` and\n`JsxLexer`. Each has configurations of its own. Typescript is supported via `JavascriptLexer` and `JsxLexer`.\nIf you need to change the defaults, you can do it like so:\n\n#### Javascript\nThe Javascript lexer uses [Acorn](https://github.com/acornjs/acorn) to walk through your code and extract references\ntranslation functions. If your code uses features not supported natively by Acorn, you can enable support through\n`injectors` and `plugins` configuration. Note that you must install these additional dependencies yourself through\n`yarn` or `npm`; they are not included in this package. This is an example configuration that adds all non-jsx plugins supported by acorn\nat the time of writing:\n```javascript\nconst injectAcornStaticClassPropertyInitializer = require('acorn-static-class-property-initializer/inject');\nconst injectAcornStage3 = require('acorn-stage3/inject');\nconst injectAcornEs7 = require('acorn-es7');\n\n// ...\n  js: [{\n    lexer: 'JavascriptLexer'\n    functions: ['t'], // Array of functions to match\n\n    // acorn config (for more information on the acorn options, see here: https://github.com/acornjs/acorn#main-parser)\n    acorn: {\n      injectors: [\n          injectAcornStaticClassPropertyInitializer,\n          injectAcornStage3,\n          injectAcornEs7,\n        ],\n      plugins: {\n        // The presence of these plugin options is important -\n        // without them, the plugins will be available but not\n        // enabled.\n        staticClassPropertyInitializer: true,\n        stage3: true,\n        es7: true,\n      }\n    }\n  }],\n// ...\n```\n\nIf you receive an error that looks like this:\n```bash\nTypeError: baseVisitor[type] is not a function\n# rest of stack trace...\n```\nThe problem is likely that you are missing a plugin that supports a feature that your code uses.\n\nThe default configuration is below:\n\n```js\n{\n  // JavascriptLexer default config (js, mjs)\n  js: [{\n    lexer: 'JavascriptLexer'\n    functions: ['t'], // Array of functions to match\n\n    // acorn config (for more information on the acorn options, see here: https://github.com/acornjs/acorn#main-parser)\n    acorn: {\n      sourceType: 'module',\n      ecmaVersion: 9, // forward compatibility\n      // Allows additional acorn plugins via the exported injector functions\n      injectors: [],\n      plugins: {},\n    }\n  }],\n}\n```\n\n#### Jsx\nThe JSX lexer builds off of the Javascript lexer, and additionally requires the `acorn-jsx` plugin. To use it, add `acorn-jsx` to your dev dependencies:\n```bash\nnpm install -D acorn-jsx\n# or\nyarn add -D acorn-jsx@4.1.1\n```\n\nDefault configuration:\n```js\n{\n  // JsxLexer default config (jsx)\n  // JsxLexer can take all the options of the JavascriptLexer plus the following\n  jsx: [{\n    lexer: 'JsxLexer',\n    attr: 'i18nKey', // Attribute for the keys\n\n    // acorn config (for more information on the acorn options, see here: https://github.com/acornjs/acorn#main-parser)\n    acorn: {\n      sourceType: 'module',\n      ecmaVersion: 9, // forward compatibility\n      injectors: [],\n      plugins: {},\n    }\n  }],\n}\n```\n#### Ts(x)\nTypescript is supported via Javascript and Jsx lexers. If you are using Javascript syntax (e.g. with React), follow the steps in Jsx section, otherwise Javascript section.\n\n#### Handlebars\n```js\n{\n  // HandlebarsLexer default config (hbs, handlebars)\n  handlebars: [{\n    lexer: 'HandlebarsLexer',\n    functions: ['t'] // Array of functions to match\n  }]\n}\n```\n#### Html\n```js\n{\n  // HtmlLexer default config (htm, html)\n  html: [{\n    lexer: 'HtmlLexer',\n    attr: 'data-i18n' // Attribute for the keys\n    optionAttr: 'data-i18n-options' // Attribute for the options\n  }]\n}\n```\n\n#### Custom lexers\nYou can provide function instead of string as a custom lexer.\n```js\nconst CustomJsLexer = require('./CustomJsLexer');\n\n// ...\n{\n  js: [CustomJsLexer],\n  jsx: [{\n    lexer: CustomJsLexer,\n    customOption: true // Custom attribute passed to CustomJsLexer class constructor\n  }]\n}\n// ...\n```\n\n## Events\n\nThe transform emits a `reading` event for each file it parses:\n\n`.pipe( i18next().on('reading', (file) => {}) )`\n\nThe transform emits a `error:json` event if the JSON.parse on json files fail:\n\n`.pipe( i18next().on('error:json', (path, error) => {}) )`\n\nThe transform emits a `warning:variable` event if the file has a key that contains a variable:\n\n`.pipe( i18next().on('warning:variable', (path, key) => {}) )`\n\n\n\n## Contribute\n\nAny contribution is welcome. Please [read the guidelines](docs/development.md) first.\n\nThanks a lot to all the previous [contributors](https://github.com/i18next/i18next-parser/graphs/contributors).\n\nIf you use this package and like it, supporting me on [Patreon](https://www.patreon.com/karelledru) is another great way to contribute!\n\n<p>\n  <a href=\"https://www.patreon.com/karelledru\" target=\"_blank\">\n    <img src=\"https://c5.patreon.com/external/logo/become_a_patron_button.png\" alt=\"Become a Patreon\">\n  </a>\n</p>\n\n--------------\n\n## Gold Sponsors\n\n<p>\n  <a href=\"https://locize.com/\" target=\"_blank\">\n    <img src=\"https://raw.githubusercontent.com/i18next/i18next/master/assets/locize_sponsor_240.gif\" width=\"240px\">\n  </a>\n</p>\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/i18next-parser/-/i18next-parser-2.0.0.tgz#d8bb6f03278de754bd1d2c324dc365d5123e8510",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/i18next-parser/-/i18next-parser-2.0.0.tgz",
    "hash": "d8bb6f03278de754bd1d2c324dc365d5123e8510",
    "integrity": "sha512-CjRkMqbDCi83UxSzhI0lffMXQY/EkdMStxgnnJGyliDf5yjWm4Dka4I+ace7ajP821/DPP8uIGxKLZycV/Vwqw==",
    "registry": "npm",
    "packageName": "i18next-parser",
    "cacheIntegrity": "sha512-CjRkMqbDCi83UxSzhI0lffMXQY/EkdMStxgnnJGyliDf5yjWm4Dka4I+ace7ajP821/DPP8uIGxKLZycV/Vwqw== sha1-2LtvAyeN51S9HSwyTcNl1RI+hRA="
  },
  "registry": "npm",
  "hash": "d8bb6f03278de754bd1d2c324dc365d5123e8510"
}