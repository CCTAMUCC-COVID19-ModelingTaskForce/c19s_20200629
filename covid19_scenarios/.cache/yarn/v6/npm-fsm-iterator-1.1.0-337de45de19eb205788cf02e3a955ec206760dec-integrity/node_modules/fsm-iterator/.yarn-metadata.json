{
  "manifest": {
    "name": "fsm-iterator",
    "version": "1.1.0",
    "description": "A finite state machine iterator for JavaScript",
    "main": "lib/index.js",
    "files": [
      "lib",
      "src"
    ],
    "scripts": {
      "build": "babel src --out-dir lib",
      "clean": "rimraf lib",
      "lint": "eslint src __tests__",
      "prepublish": "npm run clean && npm run build",
      "test": "jest"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/jfairbank/fsm-iterator.git"
    },
    "keywords": [
      "iterator",
      "iterable",
      "generator",
      "finite state machine",
      "state machine",
      "state",
      "fsm"
    ],
    "author": {
      "name": "Jeremy Fairbank",
      "email": "elpapapollo@gmail.com",
      "url": "http://jeremyfairbank.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/jfairbank/fsm-iterator/issues"
    },
    "homepage": "https://github.com/jfairbank/fsm-iterator#readme",
    "devDependencies": {
      "babel-cli": "^6.16.0",
      "babel-core": "^6.17.0",
      "babel-eslint": "^7.2.2",
      "babel-jest": "^16.0.0",
      "babel-plugin-transform-object-rest-spread": "^6.16.0",
      "babel-polyfill": "^6.16.0",
      "babel-preset-es2015": "^6.16.0",
      "eslint": "^3.7.1",
      "eslint-config-airbnb-base": "^8.0.0",
      "eslint-import-resolver-node": "^0.2.3",
      "eslint-plugin-import": "^1.16.0",
      "jest": "^16.0.1",
      "rimraf": "^2.5.4"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-fsm-iterator-1.1.0-337de45de19eb205788cf02e3a955ec206760dec-integrity/node_modules/fsm-iterator/package.json",
    "readmeFilename": "README.md",
    "readme": "# fsm-iterator\n\n[![Travis branch](https://img.shields.io/travis/jfairbank/fsm-iterator/master.svg?style=flat-square)](https://travis-ci.org/jfairbank/fsm-iterator)\n[![npm](https://img.shields.io/npm/v/fsm-iterator.svg?style=flat-square)](https://www.npmjs.com/package/fsm-iterator)\n\nA finite state machine iterator for JavaScript.\n\nUse fsm-iterator to implement a finite state machine generator function without\nthe need for generator `function*` syntax. This is a perfect for library authors\nthat need to use generators but don't want to burden their ES5 users with a\ntranspiled generator runtime.\n\n## Install\n\n```\nnpm install --save fsm-iterator\n```\n\n## Usage\n\nThe default export is the `fsmIterator` function. It takes an initial state as\nthe first argument and the state machine as an object literal as the second\nargument. Each key-value pair of your definition is a state and a function to\nhandle that state. States can be strings or symbols.\n\nThe state function takes any value that was passed into the `next` method of the\niterator as the first argument and the finite state machine definition itself as\nthe second argument.  This allows you to act on values passed back into the\n\"generator\" and delegate to other states. The finite state machine argument also\nincludes a `previousState` property if you need to use it.\n\nTo yield a value from your state function return an object literal with the\n`value` property set to the yielded value. To specify the next state to\ntransition to, set the `next` property to the next state. You can end the\niterator by including the `done` property set to `true`. If you don't supply the\n`next` property, then the iterator will stay in the same state. This is fine if\nyou want to loop on one thing, but if you have multiple states, then remember to\nuse the `next` property.\n\nYou may include a `throw` function to handle the `throw` method of the iterator.\nIt takes the thrown error as the first argument and the finite state machine\ndefinition as the second argument. If you don't supply a `throw` function, then\nyour iterator will stop, rethrowing the error.\n\nYou may intercept the iterator's `return` method by supplying a `return`\nfunction that receives the passed-in return value as the first argument and the\nfinite state machine definition as the second argument. You can return your own\nreturn value or keep your iterator returning. This is similar to handling the\n`finally` block in a `try..finally` statement in a ES2015 generator function.\n\n```js\n// ES2015 modules\nimport fsmIterator from 'fsm-iterator';\n\n// ES5 and CJS\nvar fsmIterator = require('fsm-iterator').default;\n\nconst FOO = 'FOO';\nconst BAR = 'BAR';\nconst BAZ = 'BAZ';\n\nconst definition = {\n  [FOO]: () => ({\n    value: 'foo',\n    next: BAR,\n  }),\n\n  [BAR](x) {\n    if (x < 0) {\n      return {\n        value: x / 2,\n        done: true,\n      };\n    }\n\n    return {\n      value: x * 2,\n      next: BAZ,\n    };\n  },\n\n  [BAZ]: (_, fsm) => ({\n    value: `baz : ${fsm.previousState}`,\n    next: FOO,\n  }),\n\n  return(value, fsm) {\n    return {\n      value: 'my own return',\n      done: true,\n    }\n  },\n\n  throw: (e, fsm) => ({\n    value: `${e.message} : ${fsm.previousState}`,\n    next: FOO,\n  }),\n};\n\n// Normal path\nlet iterator = fsmIterator(FOO, definition);\n\niterator.next();    // { value: 'foo', done: false }\niterator.next(21);  // { value: 42, done: false }\niterator.next();    // { value: 'baz : BAR', done: false }\niterator.next();    // { value: 'foo', done: false }\niterator.next(-42); // { value: -21, done: true }\n\n// Throwing\nconst error = new Error('error');\niterator = fsmIterator(FOO, definition);\n\niterator.next();       // { value: 'foo', done: false }\niterator.next(21);     // { value: 42, done: false }\niterator.throw(error); // { value: 'error : BAR', done: false }\niterator.next();       // { value: 'foo', done: false }\n\n// Returning\niterator = fsmIterator(FOO, definition);\n\niterator.next();            // { value: 'foo', done: false }\niterator.next(21);          // { value: 42, done: false }\niterator.return('the end'); // { value: 'my own return', done: true }\n```\n\n#### Equivalent ES2015 Generator\n\nHere is the comparable ES2015 generator for the previous example.\n\n```js\nconst FOO = 'FOO';\nconst BAR = 'BAR';\nconst BAZ = 'BAZ';\n\nfunction* myGenerator() {\n  let currentState = FOO;\n  let previousState = null;\n\n  function setState(newState) {\n    previousState = currentState;\n    currentState = newState;\n  }\n\n  while (true) {\n    try {\n      const x = yield 'foo';\n\n      setState(BAR);\n\n      if (x < 0) {\n        return x / 2;\n      }\n\n      yield x * 2;\n\n      setState(BAZ);\n\n      yield `baz : ${previousState}`;\n\n      setState(FOO);\n    } catch (e) {\n      setState(FOO);\n\n      yield `${e.message} : ${previousState}`;\n    } finally {\n      return 'my own return';\n    }\n  }\n}\n```\n\n#### Another Example\n\nHere is the implementation of the `router` saga from\n[redux-saga-router](https://github.com/jfairbank/redux-saga-router) using\n`fsmIterator`.\n\n```js\nimport { call, take } from 'redux-saga/effects';\nimport fsmIterator from 'fsm-iterator';\nimport buildRouteMatcher from './buildRouteMatcher';\nimport createHistoryChannel from './createHistoryChannel';\n\nconst INIT = 'INIT';\nconst LISTEN = 'LISTEN';\nconst HANDLE_LOCATION = 'HANDLE_LOCATION';\n\nexport default function router(history, routes) {\n  const routeMatcher = buildRouteMatcher(routes);\n  let historyChannel = null;\n  let lastMatch = null;\n\n  function errorMessageValue(error, message) {\n    let finalMessage = `Redux Saga Router: ${message}:\\n${error.message}`;\n\n    if ('stack' in error) {\n      finalMessage += `\\n${error.stack}`;\n    }\n\n    return {\n      value: call([console, console.error], finalMessage),\n      next: LISTEN,\n    };\n  }\n\n  return fsmIterator(INIT, {\n    [INIT]: () => ({\n      value: call(createHistoryChannel, history),\n      next: LISTEN,\n    }),\n\n    [LISTEN](channel) {\n      if (channel) {\n        historyChannel = channel;\n      }\n\n      return {\n        value: take(historyChannel),\n        next: HANDLE_LOCATION,\n      };\n    },\n\n    [HANDLE_LOCATION](location, fsm) {\n      const path = location.pathname;\n      const match = routeMatcher.match(path);\n\n      if (match) {\n        lastMatch = match;\n\n        return {\n          value: call(match.action, match.params),\n          next: LISTEN,\n        };\n      }\n\n      return fsm[LISTEN]();\n    },\n\n    throw(e, fsm) {\n      switch (fsm.previousState) {\n        case HANDLE_LOCATION:\n          return errorMessageValue(e, `Unhandled ${e.name} in route \"${lastMatch.route}\"`);\n\n        case LISTEN:\n          return errorMessageValue(e, `Unexpected ${e.name} while listening for route`);\n\n        default:\n          return { done: true };\n      }\n    },\n  });\n}\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2016 Jeremy Fairbank\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fsm-iterator/-/fsm-iterator-1.1.0.tgz#337de45de19eb205788cf02e3a955ec206760dec",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fsm-iterator/-/fsm-iterator-1.1.0.tgz",
    "hash": "337de45de19eb205788cf02e3a955ec206760dec",
    "integrity": "sha1-M33kXeGesgV4jPAuOpVewgZ2Dew=",
    "registry": "npm",
    "packageName": "fsm-iterator",
    "cacheIntegrity": "sha512-hg47CNYdIGJ5m9WSKh617LHRdvJo4PiF0VkncFLwPVxKvBEQfSPd1qx/xLV/eSusewEu0C8eUFrsLsWlBgIcOg== sha1-M33kXeGesgV4jPAuOpVewgZ2Dew="
  },
  "registry": "npm",
  "hash": "337de45de19eb205788cf02e3a955ec206760dec"
}