{
  "manifest": {
    "name": "vscode-nls",
    "version": "4.1.2",
    "description": "NPM module to externalize and localize VSCode extensions",
    "author": {
      "name": "Microsoft Corporation"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/Microsoft/vscode-nls.git"
    },
    "bugs": {
      "url": "https://github.com/Microsoft/vscode-nls/issues"
    },
    "main": "./lib/main.js",
    "typings": "./lib/main",
    "devDependencies": {
      "@types/node": "^12.12.29",
      "@types/mocha": "^7.0.2",
      "mocha": "^7.1.0",
      "typescript": "^3.8.3",
      "eslint": "^6.8.0",
      "@typescript-eslint/parser": "^2.24.0",
      "rimraf": "^3.0.2"
    },
    "scripts": {
      "prepublishOnly": "npm run lint && npm run compile && npm run test",
      "compile": "tsc -p ./src",
      "watch": "tsc -w -p ./src",
      "clean": "rimraf lib",
      "test": "mocha",
      "lint": "eslint --config .eslintrc.json ./src/**/*.ts"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-vscode-nls-4.1.2-ca8bf8bb82a0987b32801f9fddfdd2fb9fd3c167-integrity/node_modules/vscode-nls/package.json",
    "readmeFilename": "README.md",
    "readme": "# vscode-nls\n\n\nCommonJS module to support externalization and localization. The module only depends on Node.js however its\nprimary use case is for VSCode extensions.\n\n[![Build Status](https://travis-ci.org/Microsoft/vscode-nls.svg?branch=master)](https://travis-ci.org/Microsoft/vscode-nls)\n[![NPM Version](https://img.shields.io/npm/v/vscode-nls.svg)](https://npmjs.org/package/vscode-nls)\n[![NPM Downloads](https://img.shields.io/npm/dm/vscode-nls.svg)](https://npmjs.org/package/vscode-nls)\n\n## Usage\n\n```typescript\nimport * as nls from 'vscode-nls';\n\nlet localize = nls.config({ locale: 'de-DE' })();\n\nconsole.log(localize('keyOne', \"Hello World\"));\nconsole.log(localize('keyTwo', \"Current Date {0}\", Date.now()));\n```\n\nThe `config` call configures the nls module and should only be called once in the applications entry point. You pass in the locale you want to use and whether the resolved locale should be cached for all further calls. The config call returns a function which is used to load a message bundle. During development time the argument should stay empty. There is another tool that helps extracting the message from your sources and it creates the message bundles autmatically for you. The tool is available [here](https://github.com/Microsoft/vscode-nls-dev).\n\nIn secondary modules loaded from the 'main' module no configuration is necessary. However you still need to load the nls module and load the message bundle. This looks like this:\n\n```typescript\nimport * as nls from 'vscode-nls';\n\nlet localize = nls.loadMessageBundle();\n\nconsole.log(localize('keyOne', \"Hello World\"));\n```\n\nDuring development time the strings in the code are presented to the user. If the locale is set to 'pseudo' the messages are modified in the following form:\n\n* vowels are doubled\n* the string is prefixed with '\\uFF3B' (Unicode zenkaku representation for [) and postfixed with '\\uFF3D' (Unicode zenkaku representation for ])\n\n## History\n\n### 4.1.1\n\n* Fixes [Bundled nls doesn't work](https://github.com/microsoft/vscode-nls/issues/23)\n\n### 4.1.0\n\n* support language and locale when resolving options from `VSCODE_NLS_CONFIG` setting.\n\n### 4.0.0\n\n* make vscode-nls webpack friendly (removal of require calls)\n* narrow type for var args in `localize` function to `string | number | boolean | null | undefined`\n\n### 3.0.0:\n\n* added support to bundle the strings into a single `nls.bundle(.${locale})?.json` file.\n* added support for VS Code language packs.\n\n### 2.0.2:\n\n* moved to TypeScript 2.1.5. Adapted to @types d.ts files instead of including typings directly into the repository.\n\n### 2.0.1:\n\n* based on TypeScritp 2.0. Since TS changed the shape of the d.ts files for 2.0.x a major version number got introduce to not\n  break existing clients using TypeScript 1.8.x.\n\n## LICENSE\n[MIT](LICENSE)",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Microsoft Corporation\n\nAll rights reserved. \n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation \nfiles (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, \nmodify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software \nis furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES \nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS \nBE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT \nOF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vscode-nls/-/vscode-nls-4.1.2.tgz#ca8bf8bb82a0987b32801f9fddfdd2fb9fd3c167",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vscode-nls/-/vscode-nls-4.1.2.tgz",
    "hash": "ca8bf8bb82a0987b32801f9fddfdd2fb9fd3c167",
    "integrity": "sha512-7bOHxPsfyuCqmP+hZXscLhiHwe7CSuFE4hyhbs22xPIhQ4jv99FcR4eBzfYYVLP356HNFpdvz63FFb/xw6T4Iw==",
    "registry": "npm",
    "packageName": "vscode-nls",
    "cacheIntegrity": "sha512-7bOHxPsfyuCqmP+hZXscLhiHwe7CSuFE4hyhbs22xPIhQ4jv99FcR4eBzfYYVLP356HNFpdvz63FFb/xw6T4Iw== sha1-yov4u4KgmHsygB+f3f3S+5/TwWc="
  },
  "registry": "npm",
  "hash": "ca8bf8bb82a0987b32801f9fddfdd2fb9fd3c167"
}