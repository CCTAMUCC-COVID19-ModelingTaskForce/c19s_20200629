{
  "manifest": {
    "name": "eslint-plugin-cypress",
    "version": "2.11.1",
    "description": "An ESLint plugin for projects using Cypress",
    "main": "index.js",
    "author": {
      "name": "Chris Breiding",
      "url": "chris@cypress.io"
    },
    "license": "MIT",
    "keywords": [
      "eslint",
      "eslintplugin",
      "cypress"
    ],
    "repository": {
      "type": "git",
      "url": "git+https://github.com/cypress-io/eslint-plugin-cypress.git"
    },
    "bugs": {
      "url": "https://github.com/cypress-io/eslint-plugin-cypress/issues"
    },
    "homepage": "https://github.com/cypress-io/eslint-plugin-cypress#readme",
    "peerDependencies": {
      "eslint": ">= 3.2.1"
    },
    "dependencies": {
      "globals": "^11.12.0"
    },
    "devDependencies": {
      "@cypress/eslint-plugin-dev": "3.2.0",
      "@cypress/eslint-plugin-json": "3.2.1",
      "condition-circle": "2.0.2",
      "eslint": "^5.7.0",
      "husky": "^3.0.0",
      "jest": "^24.8.0",
      "semantic-release": "15.13.18"
    },
    "scripts": {
      "precommit": "npm run lint",
      "lint": "eslint '*.js' '**/**/*.js'",
      "lint-fix": "npm run lint -- --fix",
      "semantic-release": "semantic-release",
      "start": "yarn run test-watch",
      "test": "jest",
      "test:v4": "npm i eslint@4.x && npm run test",
      "test:v6": "npm i eslint@6.x && npm run test",
      "test-watch": "jest --watchAll"
    },
    "jest": {
      "testMatch": [
        "**/tests/**/*.js"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-eslint-plugin-cypress-2.11.1-a945e2774b88211e2c706a059d431e262b5c2862-integrity/node_modules/eslint-plugin-cypress/package.json",
    "readmeFilename": "README.md",
    "readme": "# Cypress ESLint Plugin [![CircleCI](https://circleci.com/gh/cypress-io/eslint-plugin-cypress/tree/master.svg?style=svg)](https://circleci.com/gh/cypress-io/eslint-plugin-cypress/tree/master)\n\nAn [ESLint](https://eslint.org) plugin for your [Cypress](https://cypress.io) tests.\n\nNote: If you installed ESLint globally then you must also install `eslint-plugin-cypress` globally.\n\n## Installation\n\n```sh\nnpm install eslint-plugin-cypress --save-dev\n```\nor\n```sh\nyarn add eslint-plugin-cypress --save-dev\n```\n\n## Usage\n\nAdd an `.eslintrc.json` file to your `cypress` directory with the following:\n\n```json\n{\n  \"plugins\": [\n    \"cypress\"\n  ]\n}\n```\n\nYou can add rules:\n\n```json\n{\n  \"rules\": {\n    \"cypress/no-assigning-return-values\": \"error\",\n    \"cypress/no-unnecessary-waiting\": \"error\",\n    \"cypress/assertion-before-screenshot\": \"warn\",\n    \"cypress/no-force\": \"warn\",\n    \"cypress/no-async-tests\": \"error\"\n  }\n}\n```\n\nYou can whitelist globals provided by Cypress:\n\n```json\n{\n  \"env\": {\n    \"cypress/globals\": true\n  }\n}\n```\n\n## Recommended configuration\n\nUse the recommended configuration and you can forego configuring _plugins_, _rules_, and _env_ individually. See below for which rules are included.\n\n```json\n{\n  \"extends\": [\n    \"plugin:cypress/recommended\"\n  ]\n}\n```\n\n## Rules\n\nThese rules enforce some of the [best practices recommended for using Cypress](https://on.cypress.io/best-practices).\n\nRules with a check mark (‚úÖ) are enabled by default while using the `plugin:cypress/recommended` config.\n\n**NOTE**: These rules currently require eslint 5.0 or greater. If you would like support added for eslint 4.x, please üëç  [this issue](https://github.com/cypress-io/eslint-plugin-cypress/issues/14).\n\n|     | Rule ID                                                                    | Description                                                     |\n| :-- | :------------------------------------------------------------------------- | :-------------------------------------------------------------- |\n| ‚úÖ  | [no-assigning-return-values](./docs/rules/no-assigning-return-values.md)   | Prevent assigning return values of cy calls                     |\n| ‚úÖ  | [no-unnecessary-waiting](./docs/rules/no-unnecessary-waiting.md)           | Prevent waiting for arbitrary time periods                      |\n| ‚úÖ  | [no-async-tests](./docs/rules/no-async-tests.md)                           | Prevent using async/await in Cypress test case                  |\n|     | [no-force](./docs/rules/no-force.md)                                       | Disallow using `force: true` with action commands               |\n|     | [assertion-before-screenshot](./docs/rules/assertion-before-screenshot.md) | Ensure screenshots are preceded by an assertion                 |\n|     | [require-data-selectors](./docs/rules/require-data-selectors.md)           | Only allow data-\\* attribute selectors (require-data-selectors) |\n\n## Chai and `no-unused-expressions`\n\nUsing an assertion such as `expect(value).to.be.true` can fail the ESLint rule `no-unused-expressions` even though it's not an error in this case. To fix this, you can install and use [eslint-plugin-chai-friendly](https://www.npmjs.com/package/eslint-plugin-chai-friendly).\n\n```sh\nnpm install --save-dev eslint-plugin-chai-friendly\n```\n\nIn your `.eslintrc.json`:\n\n```json\n{\n  \"plugins\": [\n    \"cypress\",\n    \"chai-friendly\"\n  ],\n  \"rules\": {\n    \"no-unused-expressions\": 0,\n    \"chai-friendly/no-unused-expressions\": 2\n  }\n}\n```\n\nOr you can simply add its `recommended` config:\n\n```json\n{\n  \"extends\": [\"plugin:chai-friendly/recommended\"]\n}\n```\n\n## Contribution Guide\n\nTo add a new rule:\n  * Fork and clone this repository\n  * Generate a new rule (a [yeoman generator](https://github.com/eslint/generator-eslint) is available)\n  * Run `yarn start` or `npm start`\n  * Write test scenarios then implement logic\n  * Describe the rule in the generated `docs` file\n  * Make sure all tests are passing\n  * Add the rule to this README\n  * Create a PR\n\nUse the following commit message conventions: https://github.com/semantic-release/semantic-release#commit-message-format\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Cypress.io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-plugin-cypress/-/eslint-plugin-cypress-2.11.1.tgz#a945e2774b88211e2c706a059d431e262b5c2862",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-plugin-cypress/-/eslint-plugin-cypress-2.11.1.tgz",
    "hash": "a945e2774b88211e2c706a059d431e262b5c2862",
    "integrity": "sha512-MxMYoReSO5+IZMGgpBZHHSx64zYPSPTpXDwsgW7ChlJTF/sA+obqRbHplxD6sBStE+g4Mi0LCLkG4t9liu//mQ==",
    "registry": "npm",
    "packageName": "eslint-plugin-cypress",
    "cacheIntegrity": "sha512-MxMYoReSO5+IZMGgpBZHHSx64zYPSPTpXDwsgW7ChlJTF/sA+obqRbHplxD6sBStE+g4Mi0LCLkG4t9liu//mQ== sha1-qUXid0uIIR4scGoFnUMeJitcKGI="
  },
  "registry": "npm",
  "hash": "a945e2774b88211e2c706a059d431e262b5c2862"
}