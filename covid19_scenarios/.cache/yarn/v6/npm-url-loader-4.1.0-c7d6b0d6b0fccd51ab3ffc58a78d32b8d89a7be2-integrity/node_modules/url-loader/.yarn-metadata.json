{
  "manifest": {
    "name": "url-loader",
    "version": "4.1.0",
    "description": "A loader for webpack which transforms files into base64 URIs",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/url-loader.git"
    },
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "homepage": "https://github.com/webpack-contrib/url-loader",
    "bugs": {
      "url": "https://github.com/webpack-contrib/url-loader/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/webpack"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 10.13.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "clean": "del-cli dist",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
      "commitlint": "commitlint --from=master",
      "security": "npm audit",
      "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css,ts}\" --list-different",
      "lint:js": "eslint --cache .",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "npm run test:only -- --watch",
      "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "pretest": "npm run lint",
      "test": "npm run test:coverage",
      "prepare": "npm run build",
      "release": "standard-version",
      "defaults": "webpack-defaults"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "webpack": "^4.0.0 || ^5.0.0",
      "file-loader": "*"
    },
    "peerDependenciesMeta": {
      "file-loader": {
        "optional": true
      }
    },
    "dependencies": {
      "loader-utils": "^2.0.0",
      "mime-types": "^2.1.26",
      "schema-utils": "^2.6.5"
    },
    "devDependencies": {
      "@babel/cli": "^7.8.4",
      "@babel/core": "^7.9.0",
      "@babel/preset-env": "^7.9.5",
      "@commitlint/cli": "^8.3.5",
      "@commitlint/config-conventional": "^8.3.4",
      "@webpack-contrib/defaults": "^6.3.0",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-jest": "^25.3.0",
      "commitlint-azure-pipelines-cli": "^1.0.3",
      "cross-env": "^7.0.2",
      "del": "^5.1.0",
      "del-cli": "^3.0.0",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.10.1",
      "eslint-plugin-import": "^2.20.2",
      "file-loader": "^6.0.0",
      "husky": "^4.2.3",
      "jest": "^25.3.0",
      "jest-junit": "^10.0.0",
      "lint-staged": "^10.1.2",
      "memfs": "^3.1.2",
      "mini-svg-data-uri": "^1.1.3",
      "npm-run-all": "^4.1.5",
      "prettier": "^2.0.4",
      "standard-version": "^7.1.0",
      "webpack": "^4.42.1"
    },
    "keywords": [
      "webpack"
    ],
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-url-loader-4.1.0-c7d6b0d6b0fccd51ab3ffc58a78d32b8d89a7be2-integrity/node_modules/url-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# url-loader\n\nA loader for webpack which transforms files into base64 URIs.\n\n## Getting Started\n\nTo begin, you'll need to install `url-loader`:\n\n```console\n$ npm install url-loader --save-dev\n```\n\n`url-loader` works like\n[`file-loader`](https://github.com/webpack-contrib/file-loader), but can return\na DataURL if the file is smaller than a byte limit.\n\n**index.js**\n\n```js\nimport img from './image.png';\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 8192,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nAnd run `webpack` via your preferred method.\n\n## Options\n\n|             Name              |            Type             |                            Default                            | Description                                                                         |\n| :---------------------------: | :-------------------------: | :-----------------------------------------------------------: | :---------------------------------------------------------------------------------- |\n|     **[`limit`](#limit)**     | `{Boolean\\|Number\\|String}` |                            `true`                             | Specifying the maximum size of a file in bytes.                                     |\n|  **[`mimetype`](#mimetype)**  |     `{Boolean\\|String}`     | based from [mime-types](https://github.com/jshttp/mime-types) | Sets the MIME type for the file to be transformed.                                  |\n|  **[`encoding`](#encoding)**  |     `{Boolean\\|String}`     |                           `base64`                            | Specify the encoding which the file will be inlined with.                           |\n| **[`generator`](#generator)** |        `{Function}`         |           `() => type/subtype;encoding,base64_data`           | You can create you own custom implementation for encoding data.                     |\n|  **[`fallback`](#fallback)**  |         `{String}`          |                         `file-loader`                         | Specifies an alternative loader to use when a target file's size exceeds the limit. |\n|  **[`esModule`](#esmodule)**  |         `{Boolean}`         |                            `true`                             | Use ES modules syntax.                                                              |\n\n### `limit`\n\nType: `Boolean|Number|String`\nDefault: `undefined`\n\nThe limit can be specified via loader options and defaults to no limit.\n\n#### `Boolean`\n\nEnable or disable transform files into base64.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `Number|String`\n\nA `Number` or `String` specifying the maximum size of a file in bytes.\nIf the file size is **equal** or **greater** than the limit [`file-loader`](https://github.com/webpack-contrib/file-loader) will be used (by default) and all query parameters are passed to it.\n\nUsing an alternative to `file-loader` is enabled via the `fallback` option.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              limit: 8192,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `mimetype`\n\nType: `Boolean|String`\nDefault: based from [mime-types](https://github.com/jshttp/mime-types)\n\nSpecify the `mimetype` which the file will be inlined with.\nIf unspecified the `mimetype` value will be used from [mime-types](https://github.com/jshttp/mime-types).\n\n#### `Boolean`\n\nThe `true` value allows to generation the `mimetype` part from [mime-types](https://github.com/jshttp/mime-types).\nThe `false` value removes the `mediatype` part from a Data URL (if omitted, defaults to `text/plain;charset=US-ASCII`).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              mimetype: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `String`\n\nSets the MIME type for the file to be transformed.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              mimetype: 'image/png',\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `encoding`\n\nType: `Boolean|String`\nDefault: `base64`\n\nSpecify the `encoding` which the file will be inlined with.\nIf unspecified the `encoding` will be `base64`.\n\n#### `Boolean`\n\nIf you don't want to use any encoding you can set `encoding` to `false` however if you set it to `true` it will use the default encoding `base64`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              encoding: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n#### `String`\n\nIt supports [Node.js Buffers and Character Encodings](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) which are `[\"utf8\",\"utf16le\",\"latin1\",\"base64\",\"hex\",\"ascii\",\"binary\",\"ucs2\"]`.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              encoding: 'utf8',\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `generator`\n\nType: `Function`\nDefault: `(mimetype, encoding, content, resourcePath) => mimetype;encoding,base64_content`\n\nYou can create you own custom implementation for encoding data.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|html)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              // The `mimetype` and `encoding` arguments will be obtained from your options\n              // The `resourcePath` argument is path to file.\n              generator: (content, mimetype, encoding, resourcePath) => {\n                if (/\\.html$/i.test(resourcePath)) {\n                  return `data:${mimetype},${content.toString()}`;\n                }\n\n                return `data:${mimetype}${\n                  encoding ? `;${encoding}` : ''\n                },${content.toString(encoding)}`;\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `fallback`\n\nType: `String`\nDefault: `'file-loader'`\n\nSpecifies an alternative loader to use when a target file's size exceeds the limit set in the `limit` option.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              fallback: require.resolve('responsive-loader'),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nThe fallback loader will receive the same configuration options as url-loader.\n\nFor example, to set the quality option of a responsive-loader above use:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              fallback: require.resolve('responsive-loader'),\n              quality: 85,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### `esModule`\n\nType: `Boolean`\nDefault: `true`\n\nBy default, `file-loader` generates JS modules that use the ES modules syntax.\nThere are some cases in which using ES modules is beneficial, like in the case of [module concatenation](https://webpack.js.org/plugins/module-concatenation-plugin/) and [tree shaking](https://webpack.js.org/guides/tree-shaking/).\n\nYou can enable a CommonJS module syntax using:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              esModule: false,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### SVG\n\nSVG can be compressed into a more compact output, avoiding `base64`.\nYou can read about it more [here](https://css-tricks.com/probably-dont-base64-svg/).\nYou can do it using [mini-svg-data-uri](https://github.com/tigt/mini-svg-data-uri) package.\n\n**webpack.config.js**\n\n```js\nconst svgToMiniDataURI = require('mini-svg-data-uri');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.svg$/i,\n        use: [\n          {\n            loader: 'url-loader',\n            options: {\n              generator: (content) => svgToMiniDataURI(content.toString()),\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/url-loader.svg\n[npm-url]: https://npmjs.com/package/url-loader\n[node]: https://img.shields.io/node/v/url-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/url-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/url-loader\n[tests]: https://dev.azure.com/webpack-contrib/url-loader/_apis/build/status/webpack-contrib.url-loader?branchName=master\n[tests-url]: https://dev.azure.com/webpack-contrib/url-loader/_build/latest?definitionId=2&branchName=master\n[cover]: https://codecov.io/gh/webpack-contrib/url-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/url-loader\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=url-loader\n[size-url]: https://packagephobia.now.sh/result?p=url-loader\n\n```\n\n```\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/url-loader/-/url-loader-4.1.0.tgz#c7d6b0d6b0fccd51ab3ffc58a78d32b8d89a7be2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/url-loader/-/url-loader-4.1.0.tgz",
    "hash": "c7d6b0d6b0fccd51ab3ffc58a78d32b8d89a7be2",
    "integrity": "sha512-IzgAAIC8wRrg6NYkFIJY09vtktQcsvU8V6HhtQj9PTefbYImzLB1hufqo4m+RyM5N3mLx5BqJKccgxJS+W3kqw==",
    "registry": "npm",
    "packageName": "url-loader",
    "cacheIntegrity": "sha512-IzgAAIC8wRrg6NYkFIJY09vtktQcsvU8V6HhtQj9PTefbYImzLB1hufqo4m+RyM5N3mLx5BqJKccgxJS+W3kqw== sha1-x9aw1rD8zVGrP/xYp40yuNiae+I="
  },
  "registry": "npm",
  "hash": "c7d6b0d6b0fccd51ab3ffc58a78d32b8d89a7be2"
}