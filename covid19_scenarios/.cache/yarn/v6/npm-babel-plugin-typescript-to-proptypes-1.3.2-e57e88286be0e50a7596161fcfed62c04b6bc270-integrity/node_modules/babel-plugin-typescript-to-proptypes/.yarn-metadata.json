{
  "manifest": {
    "name": "babel-plugin-typescript-to-proptypes",
    "version": "1.3.2",
    "description": "Generate React PropTypes from TypeScript prop interfaces.",
    "repository": {
      "type": "git",
      "url": "https://github.com/milesj/babel-plugin-typescript-to-proptypes"
    },
    "license": "MIT",
    "main": "./lib/index.js",
    "types": "./lib/index.d.ts",
    "keywords": [
      "babel-plugin",
      "typescript",
      "interfaces",
      "prop-types",
      "react"
    ],
    "scripts": {
      "build": "beemo typescript",
      "coverage": "yarn run jest --coverage",
      "eslint": "beemo eslint",
      "jest": "beemo jest",
      "prettier": "beemo prettier",
      "release": "npx np --yolo --no-yarn",
      "type": "beemo typescript --noEmit",
      "prerelease": "yarn test && yarn run build",
      "pretest": "yarn run type",
      "test": "yarn run jest",
      "posttest": "yarn run eslint"
    },
    "engines": {
      "node": ">=10.10.0"
    },
    "peerDependencies": {
      "@babel/core": "^7.0.0",
      "typescript": "^3.0.0"
    },
    "dependencies": {
      "@babel/helper-module-imports": "^7.8.3",
      "@babel/helper-plugin-utils": "^7.8.3",
      "@babel/plugin-syntax-typescript": "^7.8.3"
    },
    "devDependencies": {
      "@babel/core": "^7.8.7",
      "@babel/plugin-proposal-class-properties": "^7.8.3",
      "@babel/plugin-transform-runtime": "^7.8.3",
      "@babel/preset-env": "^7.8.7",
      "@babel/preset-react": "^7.8.3",
      "@babel/preset-typescript": "^7.8.3",
      "@milesj/build-tools": "^2.1.0",
      "@types/babel-core": "^6.25.6",
      "@types/babel-types": "^7.0.7",
      "@types/node": "^13.9.1",
      "@types/prop-types": "^15.7.3",
      "@types/react": "^16.9.23",
      "conventional-changelog-beemo": "^1.6.0",
      "fast-glob": "^3.2.2",
      "prop-types": "^15.7.2",
      "typescript": "^3.8.3"
    },
    "beemo": {
      "module": "@milesj/build-tools",
      "drivers": [
        "babel",
        "eslint",
        "jest",
        "prettier",
        "typescript"
      ],
      "settings": {
        "node": true
      },
      "babel": {
        "sourceType": "module",
        "ignore": [
          "tests/fixtures/**/*.js"
        ]
      },
      "eslint": {
        "rules": {
          "complexity": "off",
          "no-shadow": "off",
          "no-param-reassign": "off",
          "no-use-before-define": "off",
          "react/forbid-foreign-prop-types": "off",
          "typescript/no-use-before-define": "off",
          "import/no-extraneous-dependencies": "off"
        },
        "ignore": [
          "tests/fixtures/"
        ],
        "overrides": [
          {
            "files": [
              "*.ts"
            ],
            "rules": {
              "@typescript-eslint/no-explicit-any": "off"
            }
          }
        ]
      },
      "jest": {
        "testPathIgnorePatterns": [
          "/node_modules/",
          "/tests/fixtures/"
        ],
        "testEnvironment": "node",
        "transformIgnorePatterns": [
          "/node_modules/",
          "/tests/fixtures/"
        ],
        "modulePathIgnorePatterns": [
          "/node_modules/",
          "/tests/fixtures/"
        ]
      },
      "typescript": {
        "exclude": [
          "./tests/fixtures/**/*"
        ]
      }
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-babel-plugin-typescript-to-proptypes-1.3.2-e57e88286be0e50a7596161fcfed62c04b6bc270-integrity/node_modules/babel-plugin-typescript-to-proptypes/package.json",
    "readmeFilename": "README.md",
    "readme": "# babel-plugin-typescript-to-proptypes\n\n[![Build Status](https://github.com/milesj/babel-plugin-typescript-to-proptypes/workflows/Build/badge.svg)](https://github.com/milesj/babel-plugin-typescript-to-proptypes/actions?query=branch%3Amaster)\n[![npm version](https://badge.fury.io/js/babel-plugin-typescript-to-proptypes.svg)](https://www.npmjs.com/package/babel-plugin-typescript-to-proptypes)\n[![npm deps](https://david-dm.org/milesj/babel-plugin-typescript-to-proptypes.svg)](https://www.npmjs.com/package/babel-plugin-typescript-to-proptypes)\n\nA Babel plugin to generate React PropTypes from TypeScript interfaces or type aliases.\n\n> Does not support converting external type references (as Babel has no type information) without\n> the `typeCheck` option being enabled.\n\n## Examples\n\nSupports class components that define generic props.\n\n```tsx\n// Before\nimport React from 'react';\n\ninterface Props {\n  name?: string;\n}\n\nclass Example extends React.Component<Props> {\n  render() {\n    return <div />;\n  }\n}\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Example extends React.Component {\n  static propTypes = {\n    name: PropTypes.string,\n  };\n\n  render() {\n    return <div />;\n  }\n}\n```\n\nFunction components that annotate the props argument. Also supports anonymous functions without\nexplicit types (below).\n\n```tsx\n// Before\nimport React from 'react';\n\ninterface Props {\n  name: string;\n}\n\nfunction Example(props: Props) {\n  return <div />;\n}\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Example(props) {\n  return <div />;\n}\n\nExample.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n```\n\nAnd anonymous functions that are annotated as a `React.SFC`, `React.FC`, `React.StatelessComponent`,\nor `React.FunctionComponent`.\n\n```tsx\n// Before\nimport React from 'react';\n\ntype Props = {\n  name?: string;\n};\n\nconst Example: React.FC<Props> = props => <div />;\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Example = props => <div />;\n\nExample.propTypes = {\n  name: PropTypes.string,\n};\n```\n\n## Requirements\n\n- Babel 7+\n- TypeScript 3+\n\n## Installation\n\n```tsx\nyarn add --dev babel-plugin-typescript-to-proptypes\n// Or\nnpm install --save-dev babel-plugin-typescript-to-proptypes\n```\n\n## Usage\n\nAdd the plugin to your Babel config. It's preferred to enable this plugin for development only, or\nwhen building a library. Requires either the `@babel/plugin-syntax-jsx` plugin or the\n`@babel/preset-react` preset.\n\n```tsx\n// babel.config.js\nconst plugins = [];\n\nif (process.env.NODE_ENV !== 'production') {\n  plugins.push('babel-plugin-typescript-to-proptypes');\n}\n\nmodule.exports = {\n  // Required\n  presets: ['@babel/preset-typescript', '@babel/preset-react']\n  plugins,\n};\n```\n\nWhen transpiling down to ES5 or lower, the `@babel/plugin-proposal-class-properties` plugin is\nrequired.\n\n### Options\n\n#### `comments` (boolean)\n\nCopy comments from original source file for docgen purposes. Requires the `comments` option to also\nbe enabled in your Babel config. Defaults to `false`.\n\n```tsx\nmodule.exports = {\n  plugins: [['babel-plugin-typescript-to-proptypes', { comments: true }]],\n};\n```\n\n```tsx\n// Before\nimport React from 'react';\n\ninterface Props {\n  /** This name controls the fate of the whole universe */\n  name?: string;\n}\n\nclass Example extends React.Component<Props> {\n  render() {\n    return <div />;\n  }\n}\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Example extends React.Component {\n  static propTypes = {\n    /** This name controls the fate of the whole universe */\n    name: PropTypes.string,\n  };\n\n  render() {\n    return <div />;\n  }\n}\n```\n\n#### `customPropTypeSuffixes` (string[])\n\nReference custom types directly when they match one of the provided suffixes. This option requires\nthe type to be within the file itself, as imported types would be automatically removed by Babel.\nDefaults to `[]`.\n\n```tsx\nmodule.exports = {\n  plugins: [['babel-plugin-typescript-to-proptypes', { customPropTypeSuffixes: ['Shape'] }]],\n};\n```\n\n```tsx\n// Before\nimport React from 'react';\nimport { NameShape } from './shapes';\n\ninterface Props {\n  name?: NameShape;\n}\n\nclass Example extends React.Component<Props> {\n  render() {\n    return <div />;\n  }\n}\n\n// After\nimport React from 'react';\nimport { NameShape } from './shapes';\n\nclass Example extends React.Component {\n  static propTypes = {\n    name: NameShape,\n  };\n\n  render() {\n    return <div />;\n  }\n}\n```\n\n#### `forbidExtraProps` (boolean)\n\nAutomatically wrap all `propTypes` expressions with\n[airbnb-prop-types](https://github.com/airbnb/prop-types) `forbidExtraProps`, which will error for\nany unknown and unspecified prop. Defaults to `false`.\n\n```tsx\nmodule.exports = {\n  plugins: [['babel-plugin-typescript-to-proptypes', { forbidExtraProps: true }]],\n};\n```\n\n```tsx\n// Before\nimport React from 'react';\n\ninterface Props {\n  name?: string;\n}\n\nclass Example extends React.Component<Props> {\n  render() {\n    return <div />;\n  }\n}\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { forbidExtraProps } from 'airbnb-prop-types';\n\nclass Example extends React.Component {\n  static propTypes = forbidExtraProps({\n    name: PropTypes.string,\n  });\n\n  render() {\n    return <div />;\n  }\n}\n```\n\n#### `implicitChildren` (bool)\n\nAutomatically include a `children` prop type to mimic the implicit nature of TypeScript and\n`React.ReactNode`. Defaults to `false`.\n\n```tsx\nmodule.exports = {\n  plugins: [['babel-plugin-typescript-to-proptypes', { implicitChildren: true }]],\n};\n```\n\n```tsx\n// Before\nimport React from 'react';\n\ninterface Props {\n  foo: string;\n}\n\nclass Example extends React.Component<Props> {\n  render() {\n    return <div />;\n  }\n}\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Example extends React.Component {\n  static propTypes = {\n    foo: PropTypes.string.isRequired,\n    children: PropTypes.node,\n  };\n\n  render() {\n    return <div />;\n  }\n}\n```\n\n#### `maxDepth` (number)\n\nMaximum depth to convert while handling recursive or deeply nested shapes. Defaults to `3`.\n\n```tsx\nmodule.exports = {\n  plugins: [['babel-plugin-typescript-to-proptypes', { maxDepth: 3 }]],\n};\n```\n\n```tsx\n// Before\nimport React from 'react';\n\ninterface Props {\n  one: {\n    two: {\n      three: {\n        four: {\n          five: {\n            super: 'deep';\n          };\n        };\n      };\n    };\n  };\n}\n\nclass Example extends React.Component<Props> {\n  render() {\n    return <div />;\n  }\n}\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Example extends React.Component {\n  static propTypes = {\n    one: PropTypes.shape({\n      two: PropTypes.shape({\n        three: PropTypes.object,\n      }),\n    }),\n  };\n\n  render() {\n    return <div />;\n  }\n}\n```\n\n#### `maxSize` (number)\n\nMaximum number of prop types in a component, values in `oneOf` prop types (literal union), and\nproperties in `shape` prop types (interface / type alias). Defaults to `25`. Pass `0` to disable\nmax.\n\n```tsx\nmodule.exports = {\n  plugins: [['babel-plugin-typescript-to-proptypes', { maxSize: 2 }]],\n};\n```\n\n```tsx\n// Before\nimport React from 'react';\n\ninterface Props {\n  one: 'foo' | 'bar' | 'baz';\n  two: {\n    foo: number;\n    bar: string;\n    baz: boolean;\n  };\n  three: null;\n}\n\nclass Example extends React.Component<Props> {\n  render() {\n    return <div />;\n  }\n}\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Example extends React.Component {\n  static propTypes = {\n    one: PropTypes.oneOf(['foo', 'bar']),\n    two: PropTypes.shape({\n      foo: PropTypes.number,\n      bar: PropTypes.string,\n    }),\n  };\n\n  render() {\n    return <div />;\n  }\n}\n```\n\n#### `strict` (boolean)\n\nEnables strict prop types by adding `isRequired` to all non-optional properties. Disable this option\nif you want to accept nulls and non-required for all prop types. Defaults to `true`.\n\n```tsx\nmodule.exports = {\n  plugins: [['babel-plugin-typescript-to-proptypes', { strict: true }]],\n};\n```\n\n```tsx\n// Before\nimport React from 'react';\n\ninterface Props {\n  opt?: string;\n  req: number;\n}\n\nclass Example extends React.Component<Props> {\n  render() {\n    return <div />;\n  }\n}\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Example extends React.Component {\n  static propTypes = {\n    opt: PropTypes.string,\n    req: PropTyines.number.isRequired,\n  };\n\n  render() {\n    return <div />;\n  }\n}\n```\n\n#### `typeCheck` (boolean|string)\n\n_NOT FINISHED_ Resolve full type information for aliases and references using TypeScript's built-in\ntype checker. When enabled with `true`, will glob for files using `./src/**/*.ts`. Glob can be\ncustomized by passing a string. Defaults to `false`.\n\n> Note: This process is heavy and may increase compilation times.\n\n```tsx\nmodule.exports = {\n  plugins: [['babel-plugin-typescript-to-proptypes', { typeCheck: true }]],\n};\n```\n\n```tsx\n// Before\nimport React from 'react';\nimport { Location } from './types';\n\ninterface Props {\n  location?: Location;\n}\n\nclass Example extends React.Component<Props> {\n  render() {\n    return <div />;\n  }\n}\n\n// After\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Example extends React.Component {\n  static propTypes = {\n    location: PropTypes.shape({\n      lat: PropTypes.number,\n      long: PropTypes.number,\n    }),\n  };\n\n  render() {\n    return <div />;\n  }\n}\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018-2019 Miles Johnson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/babel-plugin-typescript-to-proptypes/-/babel-plugin-typescript-to-proptypes-1.3.2.tgz#e57e88286be0e50a7596161fcfed62c04b6bc270",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/babel-plugin-typescript-to-proptypes/-/babel-plugin-typescript-to-proptypes-1.3.2.tgz",
    "hash": "e57e88286be0e50a7596161fcfed62c04b6bc270",
    "integrity": "sha512-aoeJaO1OChCME0ZoLHc5k63RGwf1wBe7cfZ8zmRqbA/BX3nUbEnXLk5qWmrTQpdQxNa1v1BkF0395EJGCDb0yQ==",
    "registry": "npm",
    "packageName": "babel-plugin-typescript-to-proptypes",
    "cacheIntegrity": "sha512-aoeJaO1OChCME0ZoLHc5k63RGwf1wBe7cfZ8zmRqbA/BX3nUbEnXLk5qWmrTQpdQxNa1v1BkF0395EJGCDb0yQ== sha1-5X6IKGvg5Qp1lhYfz+1iwEtrwnA="
  },
  "registry": "npm",
  "hash": "e57e88286be0e50a7596161fcfed62c04b6bc270"
}