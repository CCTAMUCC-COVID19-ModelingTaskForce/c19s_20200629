function float64ToBigInt64(n) {
  var buffer = new ArrayBuffer(Float64Array.BYTES_PER_ELEMENT);
  var view = new DataView(buffer);
  view.setFloat64(0, n, true);
  return view.getBigInt64(0, true);
}

function signAndMagnitudeToBiased(sam) {
  if (sam < 0) {
    return ~sam + BigInt(1);
  }

  return sam;
}

function ulpDistance(a, b) {
  /* If the numbers are the same, the diff is zero. */
  if (a === b) {
    return BigInt(0);
  }

  var biased1 = signAndMagnitudeToBiased(float64ToBigInt64(a));
  var biased2 = signAndMagnitudeToBiased(float64ToBigInt64(b));
  return biased1 >= biased2 ? biased1 - biased2 : biased2 - biased1;
}
function ulpAlmostEqual(a, b, maxULP) {
  if (Number.isNaN(a) || Number.isNaN(b)) {
    return false;
  }

  return ulpDistance(a, b) <= BigInt(maxULP);
}
function ulpEqual(a, b) {
  if (Number.isNaN(a) || Number.isNaN(b)) {
    return false;
  }

  return ulpDistance(a, b) === BigInt(0);
}

export { float64ToBigInt64, ulpAlmostEqual, ulpDistance, ulpEqual };
//# sourceMappingURL=ieee754.esm.js.map
