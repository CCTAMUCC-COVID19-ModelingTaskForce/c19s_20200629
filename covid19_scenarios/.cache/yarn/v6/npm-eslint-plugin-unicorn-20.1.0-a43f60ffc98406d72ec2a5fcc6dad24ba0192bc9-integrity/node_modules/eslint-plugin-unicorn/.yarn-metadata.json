{
  "manifest": {
    "name": "eslint-plugin-unicorn",
    "version": "20.1.0",
    "description": "Various awesome ESLint rules",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/eslint-plugin-unicorn.git"
    },
    "funding": "https://github.com/sindresorhus/eslint-plugin-unicorn?sponsor=1",
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "https://sindresorhus.com"
    },
    "engines": {
      "node": ">=10"
    },
    "scripts": {
      "test": "xo && nyc ava",
      "lint": "node ./test/lint/lint.js",
      "integration": "node ./test/integration/test.js"
    },
    "files": [
      "index.js",
      "rules"
    ],
    "keywords": [
      "eslint",
      "eslintplugin",
      "eslint-plugin",
      "unicorn",
      "linter",
      "lint",
      "style",
      "xo"
    ],
    "dependencies": {
      "ci-info": "^2.0.0",
      "clean-regexp": "^1.0.0",
      "eslint-ast-utils": "^1.1.0",
      "eslint-template-visitor": "^2.0.0",
      "eslint-utils": "^2.0.0",
      "import-modules": "^2.0.0",
      "lodash": "^4.17.15",
      "pluralize": "^8.0.0",
      "read-pkg-up": "^7.0.1",
      "regexp-tree": "^0.1.21",
      "reserved-words": "^0.1.2",
      "safe-regex": "^2.1.1",
      "semver": "^7.3.2"
    },
    "devDependencies": {
      "@ava/babel": "^1.0.1",
      "@lubien/fixture-beta-package": "^1.0.0-beta.1",
      "@typescript-eslint/parser": "^2.33.0",
      "ava": "^3.8.2",
      "babel-eslint": "^10.1.0",
      "chalk": "^4.0.0",
      "eslint": "^7.0.0",
      "eslint-ava-rule-tester": "^4.0.0",
      "eslint-plugin-eslint-plugin": "^2.2.1",
      "execa": "^4.0.1",
      "listr": "^0.14.3",
      "nyc": "^15.0.1",
      "outdent": "^0.7.1",
      "pify": "^5.0.0",
      "typescript": "^3.9.2",
      "vue-eslint-parser": "^7.0.0",
      "xo": "^0.30.0"
    },
    "peerDependencies": {
      "eslint": ">=7.0.0"
    },
    "ava": {
      "babel": true,
      "files": [
        "test/*.js"
      ]
    },
    "nyc": {
      "reporter": [
        "text",
        "lcov"
      ]
    },
    "xo": {
      "parserOptions": {
        "sourceType": "script"
      },
      "plugins": [
        "eslint-plugin"
      ],
      "extends": [
        "plugin:eslint-plugin/all"
      ],
      "overrides": [
        {
          "files": "rules/utils/*.js",
          "rules": {
            "eslint-plugin/require-meta-docs-url": "off"
          }
        },
        {
          "files": "test/*.js",
          "parserOptions": {
            "sourceType": "module"
          }
        }
      ],
      "rules": {
        "strict": "error",
        "array-callback-return": [
          "error",
          {
            "allowImplicit": true
          }
        ],
        "unicorn/no-null": "error",
        "unicorn/string-content": "off"
      }
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-eslint-plugin-unicorn-20.1.0-a43f60ffc98406d72ec2a5fcc6dad24ba0192bc9-integrity/node_modules/eslint-plugin-unicorn/package.json",
    "readmeFilename": "readme.md",
    "readme": "# eslint-plugin-unicorn [![Build Status](https://github.com/sindresorhus/eslint-plugin-unicorn/workflows/CI/badge.svg?branch=master)](https://github.com/sindresorhus/eslint-plugin-unicorn/actions?query=branch%3Amaster+workflow%3ACI) [![Coverage Status](https://codecov.io/gh/sindresorhus/eslint-plugin-unicorn/branch/master/graph/badge.svg)](https://codecov.io/gh/sindresorhus/eslint-plugin-unicorn/branch/master)\n\n<img src=\"https://cloud.githubusercontent.com/assets/170270/18659176/1cc373d0-7f33-11e6-890f-0ba35362ee7e.jpg\" width=\"180\" align=\"right\">\n\n> Various awesome ESLint rules\n\nYou might want to check out [XO](https://github.com/xojs/xo), which includes this plugin.\n\n[**Propose or contribute a new rule âž¡**](.github/contributing.md)\n\n## Install\n\n```console\n$ npm install --save-dev eslint eslint-plugin-unicorn\n```\n\n## Usage\n\nConfigure it in `package.json`.\n\n```json\n{\n\t\"name\": \"my-awesome-project\",\n\t\"eslintConfig\": {\n\t\t\"env\": {\n\t\t\t\"es6\": true\n\t\t},\n\t\t\"parserOptions\": {\n\t\t\t\"ecmaVersion\": 2020,\n\t\t\t\"sourceType\": \"module\"\n\t\t},\n\t\t\"plugins\": [\n\t\t\t\"unicorn\"\n\t\t],\n\t\t\"rules\": {\n\t\t\t\"unicorn/better-regex\": \"error\",\n\t\t\t\"unicorn/catch-error-name\": \"error\",\n\t\t\t\"unicorn/consistent-function-scoping\": \"error\",\n\t\t\t\"unicorn/custom-error-definition\": \"off\",\n\t\t\t\"unicorn/error-message\": \"error\",\n\t\t\t\"unicorn/escape-case\": \"error\",\n\t\t\t\"unicorn/expiring-todo-comments\": \"error\",\n\t\t\t\"unicorn/explicit-length-check\": \"error\",\n\t\t\t\"unicorn/filename-case\": \"error\",\n\t\t\t\"unicorn/import-index\": \"error\",\n\t\t\t\"unicorn/new-for-builtins\": \"error\",\n\t\t\t\"unicorn/no-abusive-eslint-disable\": \"error\",\n\t\t\t\"unicorn/no-array-instanceof\": \"error\",\n\t\t\t\"unicorn/no-console-spaces\": \"error\",\n\t\t\t\"unicorn/no-fn-reference-in-iterator\": \"error\",\n\t\t\t\"unicorn/no-for-loop\": \"error\",\n\t\t\t\"unicorn/no-hex-escape\": \"error\",\n\t\t\t\"unicorn/no-keyword-prefix\": \"off\",\n\t\t\t\"no-nested-ternary\": \"off\",\n\t\t\t\"unicorn/no-nested-ternary\": \"error\",\n\t\t\t\"unicorn/no-new-buffer\": \"error\",\n\t\t\t\"unicorn/no-null\": \"error\",\n\t\t\t\"unicorn/no-process-exit\": \"error\",\n\t\t\t\"unicorn/no-reduce\": \"error\",\n\t\t\t\"unicorn/no-unreadable-array-destructuring\": \"error\",\n\t\t\t\"unicorn/no-unsafe-regex\": \"off\",\n\t\t\t\"unicorn/no-unused-properties\": \"off\",\n\t\t\t\"unicorn/no-useless-undefined\": \"error\",\n\t\t\t\"unicorn/no-zero-fractions\": \"error\",\n\t\t\t\"unicorn/number-literal-case\": \"error\",\n\t\t\t\"unicorn/prefer-add-event-listener\": \"error\",\n\t\t\t\"unicorn/prefer-dataset\": \"error\",\n\t\t\t\"unicorn/prefer-event-key\": \"error\",\n\t\t\t\"unicorn/prefer-flat-map\": \"error\",\n\t\t\t\"unicorn/prefer-includes\": \"error\",\n\t\t\t\"unicorn/prefer-modern-dom-apis\": \"error\",\n\t\t\t\"unicorn/prefer-negative-index\": \"error\",\n\t\t\t\"unicorn/prefer-node-append\": \"error\",\n\t\t\t\"unicorn/prefer-node-remove\": \"error\",\n\t\t\t\"unicorn/prefer-number-properties\": \"error\",\n\t\t\t\"unicorn/prefer-optional-catch-binding\": \"error\",\n\t\t\t\"unicorn/prefer-query-selector\": \"error\",\n\t\t\t\"unicorn/prefer-reflect-apply\": \"error\",\n\t\t\t\"unicorn/prefer-replace-all\": \"off\",\n\t\t\t\"unicorn/prefer-set-has\": \"error\",\n\t\t\t\"unicorn/prefer-spread\": \"error\",\n\t\t\t\"unicorn/prefer-starts-ends-with\": \"error\",\n\t\t\t\"unicorn/prefer-string-slice\": \"error\",\n\t\t\t\"unicorn/prefer-text-content\": \"error\",\n\t\t\t\"unicorn/prefer-trim-start-end\": \"error\",\n\t\t\t\"unicorn/prefer-type-error\": \"error\",\n\t\t\t\"unicorn/prevent-abbreviations\": \"error\",\n\t\t\t\"unicorn/string-content\": \"off\",\n\t\t\t\"unicorn/throw-new-error\": \"error\"\n\t\t}\n\t}\n}\n```\n\n## Rules\n\n- [better-regex](docs/rules/better-regex.md) - Improve regexes by making them shorter, consistent, and safer. *(fixable)*\n- [catch-error-name](docs/rules/catch-error-name.md) - Enforce a specific parameter name in catch clauses. *(fixable)*\n- [consistent-function-scoping](docs/rules/consistent-function-scoping.md) - Move function definitions to the highest possible scope.\n- [custom-error-definition](docs/rules/custom-error-definition.md) - Enforce correct `Error` subclassing. *(fixable)*\n- [error-message](docs/rules/error-message.md) - Enforce passing a `message` value when throwing a built-in error.\n- [escape-case](docs/rules/escape-case.md) - Require escape sequences to use uppercase values. *(fixable)*\n- [expiring-todo-comments](docs/rules/expiring-todo-comments.md) - Add expiration conditions to TODO comments.\n- [explicit-length-check](docs/rules/explicit-length-check.md) - Enforce explicitly comparing the `length` property of a value. *(partly fixable)*\n- [filename-case](docs/rules/filename-case.md) - Enforce a case style for filenames.\n- [import-index](docs/rules/import-index.md) - Enforce importing index files with `.`. *(fixable)*\n- [new-for-builtins](docs/rules/new-for-builtins.md) - Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`. *(fixable)*\n- [no-abusive-eslint-disable](docs/rules/no-abusive-eslint-disable.md) - Enforce specifying rules to disable in `eslint-disable` comments.\n- [no-array-instanceof](docs/rules/no-array-instanceof.md) - Require `Array.isArray()` instead of `instanceof Array`. *(fixable)*\n- [no-console-spaces](docs/rules/no-console-spaces.md) - Do not use leading/trailing space between `console.log` parameters. *(fixable)*\n- [no-fn-reference-in-iterator](docs/rules/no-fn-reference-in-iterator.md) - Prevent passing a function reference directly to iterator methods.\n- [no-for-loop](docs/rules/no-for-loop.md) - Do not use a `for` loop that can be replaced with a `for-of` loop. *(partly fixable)*\n- [no-hex-escape](docs/rules/no-hex-escape.md) - Enforce the use of Unicode escapes instead of hexadecimal escapes. *(fixable)*\n- [no-keyword-prefix](docs/rules/no-keyword-prefix.md) - Disallow identifiers starting with `new` or `class`.\n- [no-nested-ternary](docs/rules/no-nested-ternary.md) - Disallow nested ternary expressions. *(partly fixable)*\n- [no-new-buffer](docs/rules/no-new-buffer.md) - Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`. *(fixable)*\n- [no-null](docs/rules/no-null.md) - Disallow the use of the `null` literal.\n- [no-process-exit](docs/rules/no-process-exit.md) - Disallow `process.exit()`.\n- [no-reduce](docs/rules/no-reduce.md) - Disallow `Array#reduce()` and `Array#reduceRight()`.\n- [no-unreadable-array-destructuring](docs/rules/no-unreadable-array-destructuring.md) - Disallow unreadable array destructuring.\n- [no-unsafe-regex](docs/rules/no-unsafe-regex.md) - Disallow unsafe regular expressions.\n- [no-unused-properties](docs/rules/no-unused-properties.md) - Disallow unused object properties.\n- [no-useless-undefined](docs/rules/no-useless-undefined.md) - Disallow useless `undefined`. *(fixable)*\n- [no-zero-fractions](docs/rules/no-zero-fractions.md) - Disallow number literals with zero fractions or dangling dots. *(fixable)*\n- [number-literal-case](docs/rules/number-literal-case.md) - Enforce proper case for numeric literals. *(fixable)*\n- [prefer-add-event-listener](docs/rules/prefer-add-event-listener.md) - Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions. *(partly fixable)*\n- [prefer-dataset](docs/rules/prefer-dataset.md) - Prefer using `.dataset` on DOM elements over `.setAttribute(â€¦)`. *(fixable)*\n- [prefer-event-key](docs/rules/prefer-event-key.md) - Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`. *(partly fixable)*\n- [prefer-flat-map](docs/rules/prefer-flat-map.md) - Prefer `.flatMap(â€¦)` over `.map(â€¦).flat()`. *(fixable)*\n- [prefer-includes](docs/rules/prefer-includes.md) - Prefer `.includes()` over `.indexOf()` when checking for existence or non-existence. *(fixable)*\n- [prefer-modern-dom-apis](docs/rules/prefer-modern-dom-apis.md) - Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`. *(fixable)*\n- [prefer-negative-index](docs/rules/prefer-negative-index.md) - Prefer negative index over `.length - index` for `{String,Array,TypedArray}#slice()` and `Array#splice()`. *(fixable)*\n- [prefer-node-append](docs/rules/prefer-node-append.md) - Prefer `Node#append()` over `Node#appendChild()`. *(fixable)*\n- [prefer-node-remove](docs/rules/prefer-node-remove.md) - Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`. *(fixable)*\n- [prefer-number-properties](docs/rules/prefer-number-properties.md) - Prefer `Number` static properties over global ones. *(fixable)*\n- [prefer-optional-catch-binding](docs/rules/prefer-optional-catch-binding.md) - Prefer omitting the `catch` binding parameter. *(fixable)*\n- [prefer-query-selector](docs/rules/prefer-query-selector.md) - Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`. *(partly fixable)*\n- [prefer-reflect-apply](docs/rules/prefer-reflect-apply.md) - Prefer `Reflect.apply()` over `Function#apply()`. *(fixable)*\n- [prefer-replace-all](docs/rules/prefer-replace-all.md) - Prefer `String#replaceAll()` over regex searches with the global flag. *(fixable)*\n- [prefer-set-has](docs/rules/prefer-set-has.md) - Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence. *(fixable)*\n- [prefer-spread](docs/rules/prefer-spread.md) - Prefer the spread operator over `Array.from()`. *(fixable)*\n- [prefer-starts-ends-with](docs/rules/prefer-starts-ends-with.md) - Prefer `String#startsWith()` & `String#endsWith()` over more complex alternatives. *(partly fixable)*\n- [prefer-string-slice](docs/rules/prefer-string-slice.md) - Prefer `String#slice()` over `String#substr()` and `String#substring()`. *(partly fixable)*\n- [prefer-text-content](docs/rules/prefer-text-content.md) - Prefer `.textContent` over `.innerText`. *(fixable)*\n- [prefer-trim-start-end](docs/rules/prefer-trim-start-end.md) - Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`. *(fixable)*\n- [prefer-type-error](docs/rules/prefer-type-error.md) - Enforce throwing `TypeError` in type checking conditions. *(fixable)*\n- [prevent-abbreviations](docs/rules/prevent-abbreviations.md) - Prevent abbreviations. *(partly fixable)*\n- [string-content](docs/rules/string-content.md) - Enforce better string content. *(fixable)*\n- [throw-new-error](docs/rules/throw-new-error.md) - Require `new` when throwing an error. *(fixable)*\n\n## Deprecated Rules\n\n- [prefer-exponentiation-operator](docs/rules/prefer-exponentiation-operator.md) - Use the built-in ESLint [`prefer-exponentiation-operator`](https://eslint.org/docs/rules/prefer-exponentiation-operator) rule instead.\n- [regex-shorthand](docs/rules/regex-shorthand.md) - Renamed to [`better-regex`](docs/rules/better-regex.md).\n\n## Recommended config\n\nThis plugin exports a [`recommended` config](index.js) that enforces good practices.\n\nEnable it in your `package.json` with the `extends` option:\n\n```json\n{\n\t\"name\": \"my-awesome-project\",\n\t\"eslintConfig\": {\n\t\t\"extends\": \"plugin:unicorn/recommended\"\n\t}\n}\n```\n\nSee the [ESLint docs](https://eslint.org/docs/user-guide/configuring#extending-configuration-files) for more information about extending config files.\n\n**Note**: This config will also enable the correct [parser options](https://eslint.org/docs/user-guide/configuring#specifying-parser-options) and [environment](https://eslint.org/docs/user-guide/configuring#specifying-environments).\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [Adam Babcock](https://github.com/MrHen)\n- [futpib](https://github.com/futpib)\n- [Fisker Cheung](https://github.com/fisker)\n\n###### Former\n\n- [Jeroen Engels](https://github.com/jfmengels)\n- [Sam Verschueren](https://github.com/SamVerschueren)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-plugin-unicorn/-/eslint-plugin-unicorn-20.1.0.tgz#a43f60ffc98406d72ec2a5fcc6dad24ba0192bc9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-plugin-unicorn/-/eslint-plugin-unicorn-20.1.0.tgz",
    "hash": "a43f60ffc98406d72ec2a5fcc6dad24ba0192bc9",
    "integrity": "sha512-XQxLBJT/gnwyRR6cfYsIK1AdekQchAt5tmcsnldevGjgR2xoZsRUa5/i6e0seNHy2RoT57CkTnbVHwHF8No8LA==",
    "registry": "npm",
    "packageName": "eslint-plugin-unicorn",
    "cacheIntegrity": "sha512-XQxLBJT/gnwyRR6cfYsIK1AdekQchAt5tmcsnldevGjgR2xoZsRUa5/i6e0seNHy2RoT57CkTnbVHwHF8No8LA== sha1-pD9g/8mEBtcuwqX8xtrSS6AZK8k="
  },
  "registry": "npm",
  "hash": "a43f60ffc98406d72ec2a5fcc6dad24ba0192bc9"
}