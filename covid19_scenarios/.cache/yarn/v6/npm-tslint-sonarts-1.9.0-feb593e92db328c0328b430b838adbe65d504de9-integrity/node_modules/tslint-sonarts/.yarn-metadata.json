{
  "manifest": {
    "name": "tslint-sonarts",
    "version": "1.9.0",
    "description": "SonarTS rules for TSLint",
    "main": "tslint-sonarts.json",
    "bin": {
      "tsrunner": "bin/tsrunner"
    },
    "scripts": {
      "watch-cfg-viewer": "webpack-dev-server",
      "clear": "rm -rf lib/*",
      "prepack": "yarn build && cp ../README.md .",
      "postpack": "rm README.md",
      "build": "yarn install && yarn license-check && yarn check-format && yarn clear && yarn compile-sources && yarn type-check-tests",
      "build-cfg": "cp src/tools/cfgViewer/index.html lib/tools/cfgViewer && webpack",
      "build-ci": "yarn build && yarn test --coverage --runInBand",
      "build-local": "yarn build && yarn test",
      "test": "jest",
      "ruling": "ts-node tests/ruling/index.ts",
      "format": "prettier --write \"{src,tests}/**/!(*.lint).ts\"",
      "check-format": "prettier --list-different \"{src,tests}/**/!(*.lint).ts\"",
      "compile-sources": "tsc -p .",
      "type-check-tests": "tsc -p tests --noEmit",
      "new-rule": "ts-node src/tools/newRule.ts"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/SonarSource/SonarTS.git"
    },
    "keywords": [
      "sonarts",
      "sonarqube",
      "typescript",
      "tslint"
    ],
    "license": "LGPL-3.0",
    "bugs": {
      "url": "https://github.com/SonarSource/SonarTS/issues"
    },
    "homepage": "https://github.com/SonarSource/SonarTS",
    "engines": {
      "node": ">=6"
    },
    "dependencies": {
      "immutable": "^3.8.2"
    },
    "peerDependencies": {
      "tslint": "^5.11.0",
      "typescript": "^2.2 || ^3.0"
    },
    "devDependencies": {
      "@types/glob": "5.0.33",
      "@types/jest": "21.1.6",
      "@types/json-stable-stringify": "1.0.32",
      "@types/lodash": "4.14.85",
      "@types/minimist": "1.2.0",
      "@types/node": "8.0.53",
      "@types/vis": "4.21.0",
      "awesome-typescript-loader": "3.3.0",
      "glob": "7.1.2",
      "jest": "23.5.0",
      "jest-sonar-reporter": "1.3.0",
      "json-stable-stringify": "1.0.1",
      "license-check": "1.1.5",
      "lodash": "4.17.10",
      "minimist": "1.2.0",
      "prettier": "1.14.2",
      "sonarqube-scanner": "1.3.0",
      "source-map-support": "0.5.0",
      "ts-jest": "23.1.4",
      "ts-node": "3.3.0",
      "tslint": "5.11.0",
      "typescript": "3.0.1",
      "vis": "4.21.0",
      "webpack": "4.28.4",
      "webpack-cli": "3.2.1",
      "webpack-dev-server": "3.1.14"
    },
    "license-check-config": {
      "src": [
        "src/**/*.ts",
        "tests/**/*.ts",
        "!tests/**/*.lint.ts",
        "!node_modules/**/*"
      ],
      "path": "HEADER",
      "blocking": true,
      "logInfo": false,
      "logError": true
    },
    "prettier": {
      "printWidth": 120,
      "trailingComma": "all"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-tslint-sonarts-1.9.0-feb593e92db328c0328b430b838adbe65d504de9-integrity/node_modules/tslint-sonarts/package.json",
    "readmeFilename": "README.md",
    "readme": "# SonarTS [![Build Status](https://travis-ci.org/SonarSource/SonarTS.svg?branch=master)](https://travis-ci.org/SonarSource/SonarTS) [![NPM version](https://badge.fury.io/js/tslint-sonarts.svg)](http://badge.fury.io/js/tslint-sonarts) [![Quality Gate](https://next.sonarqube.com/sonarqube/api/project_badges/measure?project=sonarts&metric=alert_status)](https://next.sonarqube.com/sonarqube/dashboard?id=sonarts) [![Coverage](https://next.sonarqube.com/sonarqube/api/project_badges/measure?project=sonarts&metric=coverage)](https://next.sonarqube.com/sonarqube/component_measures/domain/Coverage?id=sonarts)\n\nStatic code analyzer for TypeScript detecting bugs and suspicious patterns in your code.\n\n**Follow us on [twitter](https://twitter.com/sonardash)** <br>\n\n_[To analyze pure JavaScript code, see SonarJS](https://github.com/SonarSource/sonarjs)_\n\nHow does it work?\n\n* The [TypeScript compiler](https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API) provides [**AST**](https://en.wikipedia.org/wiki/Abstract_syntax_tree) and **type** information\n* On top of it we build the **symbol model** and the [**control flow**](https://en.wikipedia.org/wiki/Control_flow_graph) model\n* Some rules are based on AST equivalence (like [no-all-duplicated-branches][`no-all-duplicated-branches`] or [no-identical-expressions][`no-identical-expressions`]).\n* We use **[live variable analysis](https://en.wikipedia.org/wiki/Live_variable_analysis)** to detect [dead stores][`no-dead-store`]\n* Experimentally, some of the rules are progressively starting to use **[symbolic execution](https://en.wikipedia.org/wiki/Symbolic_execution)** to catch data-flow-related bugs [`no-gratuitous-expressions`]\n\n## Rules\n\n### Bug Detection :bug:\n\nRules in this category aim to find places in code which has a high chance to be bugs, i.e. don't work as intended. \nMost of the time this is a result of bad copy-paste ([`no-identical-conditions`]) or improvident API usage ([`no-misleading-array-reverse`]).\nSome rules are raising issues on unused values ([`no-useless-increment`]), which is at best wasted code and at worst a bug.\n\n* All branches in a conditional structure should not have exactly the same implementation ([`no-all-duplicated-branches`])\n* Logical OR should not be used in switch cases ([`no-case-with-or`])\n* Collection sizes and array length comparisons should make sense ([`no-collection-size-mischeck`]) ([`requires type-check`])\n* Collection elements should not be replaced unconditionally ([`no-element-overwrite`]) ([`requires type-check`])\n* Empty collections should not be accessed or iterated ([`no-empty-array`])\n* Destructuring patterns should not be empty ([`no-empty-destructuring`])\n* Related \"if/else if\" statements and \"cases\" in a \"switch\" should not have the same condition ([`no-identical-conditions`])\n* Identical expressions should not be used on both sides of a binary operator ([`no-identical-expressions`])\n* Function parameters, caught exceptions and foreach variables' initial values should not be ignored ([`no-ignored-initial-value`]) ([`requires type-check`])\n* Return values should not be ignored when function calls don't have any side effects ([`no-ignored-return`]) ([`requires type-check`])\n* \"in\" operator should not be used on array ([`no-in-misuse`])\n* Array-mutating methods should not be used misleadingly ([`no-misleading-array-reverse`]) ([`requires type-check`])\n* Non-existent operators '=+', '=-' and '=!' should not be used ([`no-misspelled-operator`])\n* Variables should not be self-assigned ([`no-self-assignment`]) ([`requires type-check`])\n* Promise rejections should not be caught by 'try' block ([`no-try-promise`])\n* Errors should not be created without being thrown ([`no-unthrown-error`])\n* The output of functions that don't return anything should not be used ([`no-use-of-empty-return-value`]) ([`requires type-check`])\n* Values should not be uselessly incremented ([`no-useless-increment`])\n* Types without members, 'any' and 'never' should not be used in type intersections ([`no-useless-intersection`])\n\n### Code Smell Detection :pig:\n\nCode Smells issues, or Maintainability issues, are raised for places of code which might be costly to change in the future ([`cognitive-complexity`]).\nThese rules also help to keep the high code quality and readability ([`no-commented-code`], [`no-identical-functions`], [`use-primitive-type`]).\nAnd finally some rules report issues on different suspicious code patters ([`no-dead-store`], [`no-gratuitous-expressions`]).\n\n* Parameters should be passed in the correct order ([`arguments-order`])\n* Optional boolean parameters should have default value ([`bool-param-default`])\n* Cognitive Complexity of functions should not be too high ([`cognitive-complexity`])\n* Method overloads should be grouped together ([`consecutive-overloads`])\n* \"switch\" statements should not have too many \"case\" clauses ([`max-switch-cases`])\n* Union types should not have too many elements ([`max-union-size`])\n* Functions should not be too complex ([`mccabe-complexity`])\n* Getters and setters should access the expected fields ([`no-accessor-field-mismatch`]) ([`requires type-check`])\n* A compare function should be provided when using \"Array.prototype.sort()\" ([`no-alphabetical-sort`])\n* `delete` should not be used on arrays ([`no-array-delete`]) ([`requires type-check`])\n* Functions should not have too many lines of code ([`no-big-function`])\n* Collapsible \"if\" statements should be merged ([`no-collapsible-if`])\n* Sections of code should not be \"commented out\" ([`no-commented-code`])\n* Dead stores should be removed ([`no-dead-store`]) ([`requires type-check`])\n* Union and intersection types should not be defined with duplicated elements ([`no-duplicate-in-composite`])\n* String literals should not be duplicated ([`no-duplicate-string`])\n* Two branches in a conditional structure should not have exactly the same implementation ([`no-duplicated-branches`])\n* Nested blocks of code should not be left empty ([`no-empty-nested-blocks`])\n* Extra semicolons should be removed ([`no-extra-semicolon`])\n* Conditions should not always evaluate to \"true\" or to \"false\" ([`no-gratuitous-expressions`])\n* Credentials should not be hard-coded ([`no-hardcoded-credentials`])\n* Functions should not have identical implementations ([`no-identical-functions`])\n* Functions should use \"return\" consistently ([`no-inconsistent-return`])\n* \"await\" should only be used with promises ([`no-invalid-await`])\n* Function returns should not be invariant ([`no-invariant-return`])\n* Boolean checks should not be inverted ([`no-inverted-boolean-check`])\n* Multiline string literals should not be used ([`no-multiline-string-literals`])\n* Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression ([`no-nested-incdec`])\n* \"switch\" statements should not be nested ([`no-nested-switch`])\n* Template literals should not be nested ([`no-nested-template-literals`])\n* Boolean literals should not be redundant ([`no-redundant-boolean`])\n* Jump statements should not be redundant ([`no-redundant-jump`])\n* Redundant pairs of parentheses should be removed ([`no-redundant-parentheses`])\n* Primitive return types should be used ([`no-return-type-any`]) ([`requires type-check`])\n* Conditionals should start on new lines ([`no-same-line-conditional`])\n* \"switch\" statements should have at least 3 \"case\" clauses ([`no-small-switch`])\n* Statements should be on separate lines ([`no-statements-same-line`])\n* Loops with at most one iteration should be refactored ([`no-unconditional-jump`])\n* \"undefined\" should not be passed as the value of optional parameters ([`no-undefined-argument`])\n* Multiline blocks should be enclosed in curly braces ([`no-unenclosed-multiline-block`])\n* Array contents should be used ([`no-unused-array`]) ([`requires type-check`])\n* Redundant casts and not-null assertions should be avoided ([`no-useless-cast`]) ([`requires type-check`])\n* \"catch\" clauses should do more than rethrow ([`no-useless-catch`])\n* Variables should be declared before they are used ([`no-variable-usage-before-declaration`]) ([`requires type-check`])\n* Functions should not have too many parameters ([`parameters-max-number`])\n* \"default\" clauses should be last ([`prefer-default-last`])\n* Local variables should not be declared and then immediately returned or thrown ([`prefer-immediate-return`]) ([`requires type-check`])\n* Optional property declarations should use '?' syntax ([`prefer-optional`])\n* Shorthand promises should be used ([`prefer-promise-shorthand`])\n* Type guards should be used ([`prefer-type-guard`])\n* Wrapper objects should not be used for primitive types ([`use-primitive-type`]) ([`requires type-check`])\n* Type aliases should be used ([`use-type-alias`]) ([`requires type-check`])\n\n[`arguments-order`]: ./sonarts-core/docs/rules/arguments-order.md\n[`bool-param-default`]: ./sonarts-core/docs/rules/bool-param-default.md\n[`cognitive-complexity`]: ./sonarts-core/docs/rules/cognitive-complexity.md\n[`consecutive-overloads`]: ./sonarts-core/docs/rules/consecutive-overloads.md\n[`max-switch-cases`]: ./sonarts-core/docs/rules/max-switch-cases.md\n[`max-union-size`]: ./sonarts-core/docs/rules/max-union-size.md\n[`mccabe-complexity`]: ./sonarts-core/docs/rules/mccabe-complexity.md\n[`no-accessor-field-mismatch`]: ./sonarts-core/docs/rules/no-accessor-field-mismatch.md\n[`no-all-duplicated-branches`]: ./sonarts-core/docs/rules/no-all-duplicated-branches.md\n[`no-alphabetical-sort`]: ./sonarts-core/docs/rules/no-alphabetical-sort.md\n[`no-array-delete`]: ./sonarts-core/docs/rules/no-array-delete.md\n[`no-big-function`]: ./sonarts-core/docs/rules/no-big-function.md\n[`no-case-with-or`]: ./sonarts-core/docs/rules/no-case-with-or.md\n[`no-collapsible-if`]: ./sonarts-core/docs/rules/no-collapsible-if.md\n[`no-collection-size-mischeck`]: ./sonarts-core/docs/rules/no-collection-size-mischeck.md\n[`no-commented-code`]: ./sonarts-core/docs/rules/no-commented-code.md\n[`no-dead-store`]: ./sonarts-core/docs/rules/no-dead-store.md\n[`no-duplicate-in-composite`]: ./sonarts-core/docs/rules/no-duplicate-in-composite.md\n[`no-duplicate-string`]: ./sonarts-core/docs/rules/no-duplicate-string.md\n[`no-duplicated-branches`]: ./sonarts-core/docs/rules/no-duplicated-branches.md\n[`no-element-overwrite`]: ./sonarts-core/docs/rules/no-element-overwrite.md\n[`no-empty-array`]: ./sonarts-core/docs/rules/no-empty-array.md\n[`no-empty-destructuring`]: ./sonarts-core/docs/rules/no-empty-destructuring.md\n[`no-empty-nested-blocks`]: ./sonarts-core/docs/rules/no-empty-nested-blocks.md\n[`no-extra-semicolon`]: ./sonarts-core/docs/rules/no-extra-semicolon.md\n[`no-gratuitous-expressions`]: ./sonarts-core/docs/rules/no-gratuitous-expressions.md\n[`no-hardcoded-credentials`]: ./sonarts-core/docs/rules/no-hardcoded-credentials.md\n[`no-identical-conditions`]: ./sonarts-core/docs/rules/no-identical-conditions.md\n[`no-identical-expressions`]: ./sonarts-core/docs/rules/no-identical-expressions.md\n[`no-identical-functions`]: ./sonarts-core/docs/rules/no-identical-functions.md\n[`no-ignored-initial-value`]: ./sonarts-core/docs/rules/no-ignored-initial-value.md\n[`no-ignored-return`]: ./sonarts-core/docs/rules/no-ignored-return.md\n[`no-in-misuse`]: ./sonarts-core/docs/rules/no-in-misuse.md\n[`no-inconsistent-return`]: ./sonarts-core/docs/rules/no-inconsistent-return.md\n[`no-invalid-await`]: ./sonarts-core/docs/rules/no-invalid-await.md\n[`no-invariant-return`]: ./sonarts-core/docs/rules/no-invariant-return.md\n[`no-inverted-boolean-check`]: ./sonarts-core/docs/rules/no-inverted-boolean-check.md\n[`no-misleading-array-reverse`]: ./sonarts-core/docs/rules/no-misleading-array-reverse.md\n[`no-misspelled-operator`]: ./sonarts-core/docs/rules/no-misspelled-operator.md\n[`no-multiline-string-literals`]: ./sonarts-core/docs/rules/no-multiline-string-literals.md\n[`no-nested-incdec`]: ./sonarts-core/docs/rules/no-nested-incdec.md\n[`no-nested-switch`]: ./sonarts-core/docs/rules/no-nested-switch.md\n[`no-nested-template-literals`]: ./sonarts-core/docs/rules/no-nested-template-literals.md\n[`no-redundant-boolean`]: ./sonarts-core/docs/rules/no-redundant-boolean.md\n[`no-redundant-jump`]: ./sonarts-core/docs/rules/no-redundant-jump.md\n[`no-redundant-parentheses`]: ./sonarts-core/docs/rules/no-redundant-parentheses.md\n[`no-return-type-any`]: ./sonarts-core/docs/rules/no-return-type-any.md\n[`no-same-line-conditional`]: ./sonarts-core/docs/rules/no-same-line-conditional.md\n[`no-self-assignment`]: ./sonarts-core/docs/rules/no-self-assignment.md\n[`no-small-switch`]: ./sonarts-core/docs/rules/no-small-switch.md\n[`no-statements-same-line`]: ./sonarts-core/docs/rules/no-statements-same-line.md\n[`no-try-promise`]: ./sonarts-core/docs/rules/no-try-promise.md\n[`no-unconditional-jump`]: ./sonarts-core/docs/rules/no-unconditional-jump.md\n[`no-undefined-argument`]: ./sonarts-core/docs/rules/no-undefined-argument.md\n[`no-unenclosed-multiline-block`]: ./sonarts-core/docs/rules/no-unenclosed-multiline-block.md\n[`no-unthrown-error`]: ./sonarts-core/docs/rules/no-unthrown-error.md\n[`no-unused-array`]: ./sonarts-core/docs/rules/no-unused-array.md\n[`no-use-of-empty-return-value`]: ./sonarts-core/docs/rules/no-use-of-empty-return-value.md\n[`no-useless-cast`]: ./sonarts-core/docs/rules/no-useless-cast.md\n[`no-useless-catch`]: ./sonarts-core/docs/rules/no-useless-catch.md\n[`no-useless-increment`]: ./sonarts-core/docs/rules/no-useless-increment.md\n[`no-useless-intersection`]: ./sonarts-core/docs/rules/no-useless-intersection.md\n[`no-variable-usage-before-declaration`]: ./sonarts-core/docs/rules/no-variable-usage-before-declaration.md\n[`parameters-max-number`]: ./sonarts-core/docs/rules/parameters-max-number.md\n[`prefer-default-last`]: ./sonarts-core/docs/rules/prefer-default-last.md\n[`prefer-immediate-return`]: ./sonarts-core/docs/rules/prefer-immediate-return.md\n[`prefer-optional`]: ./sonarts-core/docs/rules/prefer-optional.md\n[`prefer-promise-shorthand`]: ./sonarts-core/docs/rules/prefer-promise-shorthand.md\n[`prefer-type-guard`]: ./sonarts-core/docs/rules/prefer-type-guard.md\n[`use-primitive-type`]: ./sonarts-core/docs/rules/use-primitive-type.md\n[`use-type-alias`]: ./sonarts-core/docs/rules/use-type-alias.md\n\n[`requires type-check`]: https://palantir.github.io/tslint/usage/type-checking/\n\n## Prerequisites\n\nNode.js (>=6.x).\n\n## Use in TSLint\n\n* If you don't have TSLint yet configured for your project follow [these instructions](https://github.com/palantir/tslint#installation--usage).\n* Install `tslint-sonarts`\n\n```sh\nnpm install tslint-sonarts --save-dev   # install in your project\nnpm install tslint-sonarts -g           # or install globally\n```\n\n* Add `tslint-sonarts` to your `tslint.json` `extends` property:\n\n```javascript\n{\n  \"extends\": [\"tslint:recommended\", \"tslint-sonarts\"]\n}\n```\n\n* Some of the rules in SonarTS require type information. So in order to provide as much value as possible run TSLint with **type-checker**, for example:\n\n```\ntslint --project ./tsconfig.json 'src/**/*.{ts,tsx}'\n```\n_[We also have a plugin for ESLint](https://github.com/SonarSource/eslint-plugin-sonarjs)_\n\n## Use in SonarQube\n\nSonarTS is available as plugin for SonarQube. [SonarQube](https://www.sonarqube.org/) is an open source platform for continuous inspection of code quality.\nThanks to the platform, SonarTS provides additional features:\n\n* Code coverage import\n* Duplication detection\n* Various metrics\n* More [rules](https://rules.sonarsource.com/typescript)\n\nSee the documentation [here](https://docs.sonarqube.org/display/PLUG/SonarTS) and example project [here](https://github.com/SonarSource/SonarTS-example/).\n\nAlso available online on :cloud: [SonarCloud](https://sonarcloud.io/)\n\n## Contributing\n\nYou want to participate to the development of our TypeScript analyzer?\nHave a look at our [contributor](./CONTRIBUTING.md) guide!\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/tslint-sonarts/-/tslint-sonarts-1.9.0.tgz#feb593e92db328c0328b430b838adbe65d504de9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/tslint-sonarts/-/tslint-sonarts-1.9.0.tgz",
    "hash": "feb593e92db328c0328b430b838adbe65d504de9",
    "integrity": "sha512-CJWt+IiYI8qggb2O/JPkS6CkC5DY1IcqRsm9EHJ+AxoWK70lvtP7jguochyNDMP2vIz/giGdWCfEM39x/I/Vnw==",
    "registry": "npm",
    "packageName": "tslint-sonarts",
    "cacheIntegrity": "sha512-CJWt+IiYI8qggb2O/JPkS6CkC5DY1IcqRsm9EHJ+AxoWK70lvtP7jguochyNDMP2vIz/giGdWCfEM39x/I/Vnw== sha1-/rWT6S2zKMAyi0MLg4rb5l1QTek="
  },
  "registry": "npm",
  "hash": "feb593e92db328c0328b430b838adbe65d504de9"
}