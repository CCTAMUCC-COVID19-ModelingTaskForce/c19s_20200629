{
  "manifest": {
    "author": {
      "name": "snyk.io"
    },
    "name": "@snyk/dep-graph",
    "description": "Snyk dependency graph library",
    "homepage": "https://github.com/snyk/dep-graph#readme",
    "license": "Apache-2.0",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "files": [
      "dist"
    ],
    "scripts": {
      "build": "tsc",
      "format": "prettier --write '{src,test,scripts}/**/*.ts'",
      "lint:tslint": "tslint -p tsconfig.json",
      "lint:prettier": "prettier --check '{src,test,scripts}/**/*.ts'",
      "lint": "npm run lint:tslint && npm run lint:prettier",
      "test": "jest --verbose --runInBand",
      "test:coverage": "npm run test -- --coverage",
      "prepare": "npm run build"
    },
    "engines": {
      "node": ">=8"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/snyk/dep-graph.git"
    },
    "bugs": {
      "url": "https://github.com/snyk/dep-graph/issues"
    },
    "devDependencies": {
      "@types/jest": "^25",
      "@types/node": "^8",
      "@types/object-hash": "^1.3.1",
      "@types/semver": "^7",
      "jest": "^25",
      "prettier": "^1.9.1",
      "ts-jest": "^25",
      "ts-node": "^8",
      "tslint": "^6",
      "typescript": "^3.9.3"
    },
    "dependencies": {
      "@snyk/graphlib": "2.1.9-patch",
      "lodash.isequal": "^4.5.0",
      "object-hash": "^2.0.3",
      "semver": "^6.0.0",
      "source-map-support": "^0.5.19",
      "tslib": "^2.0.0"
    },
    "version": "1.19.0",
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-@snyk-dep-graph-1.19.0-dfb2699520225e715083f6dd590bb91b55e99ba1-integrity/node_modules/@snyk/dep-graph/package.json",
    "readmeFilename": "README.md",
    "readme": "![Snyk logo](https://snyk.io/style/asset/logo/snyk-print.svg)\n\n***\n\n[![Known Vulnerabilities](https://snyk.io/test/npm/@snyk/dep-graph/badge.svg)](https://snyk.io/test/npm/@snyk/dep-graph)\n\nSnyk helps you find, fix and monitor for known vulnerabilities in your dependencies, both on an ad hoc basis and as part of your CI (Build) system.\n\n# Snyk dep-graph\n\nThis library provides a time and space efficient representation of a resolved package dependency graph, which can be used to construct, query and de/serialize dep-graphs.\n\n## The Graph\n\nA directed graph, where a node represents a package instance and an edge from node `foo` to node `bar` means `bar` is a dependency of `foo`.\n\nA package (`name@version`) can have several different nodes (i.e. instances) in the graph. This flexibility is useful for some ecosystems, for example:\n\n* in `npm` due to conflict-resolutions by duplication. e.g. try to `npm i tap@5.7` and then run `npm ls` and look for `strip-ansi@3.0.1`. You'll see that in some instances it depends on `ansi-regex@2.0.0` while in others on `ansi-regex@2.1.1`.\n* in `maven` due to \"exclusion\" rules. A dependency `foo` can be declared in the `pom.xml` such that some of it's sub-dependencies are excluded via the `<exclusions>` tag. If the same dependency is required elsewhere without (or with different) exclusions then `foo` can appear in the tree with different sub-trees.\n\nThis can also be used to break cycles in the graph, e.g.:\n\ninstead of:\n```\nA -> B -> C -> A\n```\ncan have:\n```\nA -> B -> C -> A'\n```\n\n## API Reference\n\n### `DepGraph`\n\n#### Interface\n\nA dep-graph instance can be queried using the following interface:\n\n```typescript\nexport interface DepGraph {\n  readonly pkgManager: {\n    name: string;\n    version?: string;\n    repositories?: Array<{\n      alias: string;\n    }>;\n  };\n  readonly rootPkg: {\n    name: string;\n    version?: string;\n  };\n  // all unique packages in the graph (including root package)\n  getPkgs(): Array<{\n    name: string;\n    version?: string;\n  }>;\n  // all unique packages in the graph, except the root package\n  getDepPkgs(): Array<{\n    name: string;\n    version?: string;\n  }>;\n  pkgPathsToRoot(pkg: Pkg): Array<Array<{\n    name: string;\n    version?: string;\n  }>>;\n  directDepsLeadingTo(pkg: Pkg): Array<{\n    name: string;\n    version?: string;\n  }>;\n  countPathsToRoot(pkg: Pkg): number;\n  toJSON(): DepGraphData;\n  equals(other: DepGraph, options?: { compareRoot?: boolean }): boolean;\n}\n```\n\n### `DepGraphData`\n\nA dep-graph can be serialised into the following format:\n\n```typescript\nexport interface DepGraphData {\n  schemaVersion: string;\n  pkgManager: {\n    name: string;\n    version?: string;\n    repositories?: Array<{\n      alias: string;\n    }>;\n  };\n  pkgs: Array<{\n    id: string;\n    info: {\n      name: string;\n      version?: string;\n    };\n  }>;\n  graph: {\n    rootNodeId: string;\n    nodes: Array<{\n      nodeId: string;\n      pkgId: string;\n      info?: {\n        versionProvenance?: {\n          type: string;\n          location: string;\n          property?: {\n            name: string;\n          };\n        },\n        labels?: {\n          [key: string]: string | undefined;\n        };\n      };\n      deps: Array<{\n        nodeId: string;\n      }>;\n    }>;\n  };\n}\n```\n\n### `createFromJSON`\n\n`DepGraphData` can be used to construct a `DepGraph` instance using `createFromJSON`\n\n### `DepGraphBuilder`\n`DepGraphBuilder` is used to create new `DepGraph` instances by adding packages and their connections.\n\n```typescript\n  /**\n   * Instantiates build for given package manager\n   *\n   * @param pkgManager - package manager for which dependcy graph is created\n   * @param rootPkg - root package information\n   *\n   */\n  public constructor(pkgManager: types.PkgManager, rootPkg?: types.PkgInfo)\n\n  /**\n   * Adds node to the graph. Every node represents logical instance of the package in the dependency graph.\n   *\n   * @param pkgInfo - name and version of the package\n   * @param nodeId - identifier for node in the graph, e.g. `package@version`.\n   *                 Must uniquely identify this \"instance\" of the package in the graph,\n   *                 so may need to be more than `package@version` for many ecosystems.\n   *                 If in doubt - ask a contributor!\n   * @param nodeInfo - additional node info, e.g. for version provenance\n   *\n   */\n  public addPkgNode(pkgInfo: types.PkgInfo, nodeId: string, nodeInfo?: types.NodeInfo)\n\n  /**\n   * Makes a connection between parent and its dependency.\n   *\n   * @param parentNodeId - id of the parent node\n   * @param depNodeId - id of the dependency node\n   *\n   */\n  public connectDep(parentNodeId: string, depNodeId: string)\n\n  /**\n   * Creates an instance of DepGraph\n   *\n   * @return DepGraph instance built from provided packages and their connections\n   *\n   */\n  public build(): types.DepGraph\n\n```\n### The `legacy` module\n\nA `DepTree` is a legacy structure used by the Snyk CLI to represent dependency trees. Conversion functions in the `legacy` module ease the gradual migration of code that relies on the legacy format.\n\n#### Legacy `DepTree`\n\nA `DepTree` is a recursive structure that is quite similar to the output of `npm list --json`, and (omitting some details) looks like:\n\n```typescript\ninterface DepTree {\n  name: string;\n  version: string;\n  dependencies?: {\n    [depName: string]: DepTree\n  };\n}\n```\n\nThe `legacy` conversion functions aim to maintain extra data that might be attached to the dep-tree and is dependant upon in code that wasn't yet updated to use solely dep-graphs:\n* `targetOS` which exists on tree roots for Docker scans\n* `versionProvenance` which might exist on the nodes of maven trees, storing information about the source manifest that caused the specfic version to be resolved\n",
    "licenseText": "Copyright 2018 Snyk Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@snyk/dep-graph/-/dep-graph-1.19.0.tgz#dfb2699520225e715083f6dd590bb91b55e99ba1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@snyk/dep-graph/-/dep-graph-1.19.0.tgz",
    "hash": "dfb2699520225e715083f6dd590bb91b55e99ba1",
    "integrity": "sha512-/0phOICMk4hkX2KtZgi+4KNd5G9oYDIlxQDQk+ui2xl4gonPvK6Q5MFzHP7Xet1YY/XoU33ox41i+IO48qZ+zQ==",
    "registry": "npm",
    "packageName": "@snyk/dep-graph",
    "cacheIntegrity": "sha512-/0phOICMk4hkX2KtZgi+4KNd5G9oYDIlxQDQk+ui2xl4gonPvK6Q5MFzHP7Xet1YY/XoU33ox41i+IO48qZ+zQ== sha1-37JplSAiXnFQg/bdWQu5G1Xpm6E="
  },
  "registry": "npm",
  "hash": "dfb2699520225e715083f6dd590bb91b55e99ba1"
}