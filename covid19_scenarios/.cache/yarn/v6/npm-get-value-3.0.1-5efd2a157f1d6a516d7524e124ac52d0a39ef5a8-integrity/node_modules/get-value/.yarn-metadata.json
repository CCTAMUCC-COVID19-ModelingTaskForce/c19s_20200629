{
  "manifest": {
    "name": "get-value",
    "description": "Use property paths like 'a.b.c' to get a nested value from an object. Even works when keys have dots in them (no other dot-prop library can do this!).",
    "version": "3.0.1",
    "homepage": "https://github.com/jonschlinkert/get-value",
    "author": {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/jonschlinkert/get-value.git"
    },
    "bugs": {
      "url": "https://github.com/jonschlinkert/get-value/issues"
    },
    "license": "MIT",
    "files": [
      "index.js"
    ],
    "main": "index.js",
    "engines": {
      "node": ">=6.0"
    },
    "scripts": {
      "test": "nyc --reporter=text --reporter=html mocha"
    },
    "dependencies": {
      "isobject": "^3.0.1"
    },
    "devDependencies": {
      "arr-reduce": "^1.0.1",
      "benchmarked": "^2.0.0",
      "dot-prop": "^4.2.0",
      "getobject": "^0.1.0",
      "glob": "^7.1.2",
      "gulp-format-md": "^1.0.0",
      "micromatch": "^3.1.5",
      "minimist": "^1.2.0",
      "mocha": "^3.5.3",
      "nyc": "^11.4.1",
      "object-path": "^0.11.4",
      "write": "^1.0.3"
    },
    "keywords": [
      "get",
      "key",
      "nested",
      "object",
      "path",
      "paths",
      "prop",
      "properties",
      "property",
      "props",
      "segment",
      "value",
      "values"
    ],
    "verb": {
      "run": true,
      "toc": "collapsible",
      "layout": "default",
      "tasks": [
        "readme"
      ],
      "plugins": [
        "gulp-format-md"
      ],
      "related": {
        "list": [
          "has-any",
          "has-any-deep",
          "has-value",
          "set-value",
          "unset-value"
        ]
      },
      "lint": {
        "reflinks": true
      }
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-get-value-3.0.1-5efd2a157f1d6a516d7524e124ac52d0a39ef5a8-integrity/node_modules/get-value/package.json",
    "readmeFilename": "README.md",
    "readme": "# get-value [![NPM version](https://img.shields.io/npm/v/get-value.svg?style=flat)](https://www.npmjs.com/package/get-value) [![NPM monthly downloads](https://img.shields.io/npm/dm/get-value.svg?style=flat)](https://npmjs.org/package/get-value) [![NPM total downloads](https://img.shields.io/npm/dt/get-value.svg?style=flat)](https://npmjs.org/package/get-value) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/get-value.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/get-value)\n\n> Use property paths like 'a.b.c' to get a nested value from an object. Even works when keys have dots in them (no other dot-prop library can do this!).\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Table of Contents\n\n<details>\n<summary><strong>Details</strong></summary>\n\n- [Install](#install)\n- [Usage](#usage)\n  * [Supports keys with dots](#supports-keys-with-dots)\n  * [Supports arrays](#supports-arrays)\n  * [Supports functions](#supports-functions)\n  * [Supports passing object path as an array](#supports-passing-object-path-as-an-array)\n- [Options](#options)\n  * [options.default](#optionsdefault)\n  * [options.isValid](#optionsisvalid)\n  * [options.split](#optionssplit)\n  * [options.separator](#optionsseparator)\n  * [options.join](#optionsjoin)\n  * [options.joinChar](#optionsjoinchar)\n- [Benchmarks](#benchmarks)\n  * [Running the benchmarks](#running-the-benchmarks)\n- [Release history](#release-history)\n  * [v3.0.0](#v300)\n- [About](#about)\n\n</details>\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save get-value\n```\n\n## Usage\n\nSee the [unit tests](test/test.js) for many more examples.\n\n```js\nconst get = require('foo');\nconst obj = { a: { b: { c: { d: 'foo' } } } };\n\nconsole.log(get(obj));            //=> { a: { b: { c: { d: 'foo' } } } };\nconsole.log(get(obj, 'a'));       //=> { b: { c: { d: 'foo' } } }\nconsole.log(get(obj, 'a.b'));     //=> { c: { d: 'foo' } }\nconsole.log(get(obj, 'a.b.c'));   //=> { d: 'foo' }\nconsole.log(get(obj, 'a.b.c.d')); //=> 'foo'\n```\n\n### Supports keys with dots\n\nUnlike other dot-prop libraries, get-value works when keys have dots in them:\n\n```js\nconsole.log(get({ 'a.b': { c: 'd' } }, 'a.b.c'));\n//=> 'd'\n\nconsole.log(get({ 'a.b': { c: { 'd.e': 'f' } } }, 'a.b.c.d.e'));\n//=> 'f'\n```\n\n### Supports arrays\n\n```js\nconsole.log(get({ a: { b: { c: { d: 'foo' } } }, e: [{ f: 'g' }, { f: 'h' }] }, 'e.1.f'));   \n//=> 'h'\n\nconsole.log(get({ a: { b: [{ c: 'd' }] } }, 'a.b.0.c')); \n//=> 'f'\n\nconsole.log(get({ a: { b: [{ c: 'd' }, { e: 'f' }] } }, 'a.b.1.e'));\n//=> 'f'\n```\n\n### Supports functions\n\n```js\nfunction foo() {}\nfoo.bar = { baz: 'qux' };\n\nconsole.log(get(foo));            \n//=> { [Function: foo] bar: { baz: 'qux' } }\n\nconsole.log(get(foo, 'bar'));     \n//=> { baz: 'qux' }\n\nconsole.log(get(foo, 'bar.baz')); \n//=> qux\n```\n\n### Supports passing object path as an array\n\nSlighly improve performance by passing an array of strings to use as object path segments (this is also useful when you need to dynamically build up the path segments):\n\n```js\nconsole.log(get({ a: { b: 'c' } }, ['a', 'b']));\n//=> 'c'\n```\n\n## Options\n\n### options.default\n\n**Type**: `any`\n\n**Default**: `undefined`\n\nThe default value to return when get-value cannot resolve a value from the given object.\n\n```js\nconst obj = { foo: { a: { b: { c: { d: 'e' } } } } };\nconsole.log(get(obj, 'foo.a.b.c.d', { default: true }));  //=> 'e'\nconsole.log(get(obj, 'foo.bar.baz', { default: true }));  //=> true\nconsole.log(get(obj, 'foo.bar.baz', { default: false })); //=> false\nconsole.log(get(obj, 'foo.bar.baz', { default: null }));  //=> null\n\n// you can also pass the default value as the last argument\n// (this is necessary if the default value is an object)\nconsole.log(get(obj, 'foo.a.b.c.d', true));  //=> 'e'\nconsole.log(get(obj, 'foo.bar.baz', true));  //=> true\nconsole.log(get(obj, 'foo.bar.baz', false)); //=> false\nconsole.log(get(obj, 'foo.bar.baz', null));  //=> null\n```\n\n### options.isValid\n\n**Type**: `function`\n\n**Default**: `true`\n\nIf defined, this function is called on each resolved value. Useful if you want to do `.hasOwnProperty` or `Object.prototype.propertyIsEnumerable`.\n\n```js\nconst isEnumerable = Object.prototype.propertyIsEnumerable;\nconst options = {\n  isValid: (key, obj) => isEnumerable.call(obj, key)\n};\n\nconst obj = {};\nObject.defineProperty(obj, 'foo', { value: 'bar', enumerable: false });\n\nconsole.log(get(obj, 'foo', options));           //=> undefined\nconsole.log(get({}, 'hasOwnProperty', options)); //=> undefined\nconsole.log(get({}, 'constructor', options));    //=> undefined\n\n// without \"isValid\" check\nconsole.log(get(obj, 'foo', options));           //=> bar\nconsole.log(get({}, 'hasOwnProperty', options)); //=> [Function: hasOwnProperty]\nconsole.log(get({}, 'constructor', options));    //=> [Function: Object]\n```\n\n### options.split\n\n**Type**: `function`\n\n**Default**: `String.split()`\n\nCustom function to use for splitting the string into object path segments.\n\n```js\nconst obj = { 'a.b': { c: { d: 'e' } } };\n\n// example of using a string to split the object path\nconst options = { split: path => path.split('/') };\nconsole.log(get(obj, 'a.b/c/d', options)); //=> 'e'\n\n// example of using a regex to split the object path\n// (removing escaped dots is unnecessary, this is just an example)\nconst options = { split: path => path.split(/\\\\?\\./) };\nconsole.log(get(obj, 'a\\\\.b.c.d', options)); //=> 'e'\n```\n\n### options.separator\n\n**Type**: `string|regex`\n\n**Default**: `.`\n\nThe separator to use for spliting the string (this is probably not needed when `options.split` is used).\n\n```js\nconst obj = { 'a.b': { c: { d: 'e' } } };\n\nconsole.log(get(obj, 'a.b/c/d', { separator: '/' }));       \n//=> 'e'\n\nconsole.log(get(obj, 'a\\\\.b.c.d', { separator: /\\\\?\\./ })); \n//=> 'e'\n```\n\n### options.join\n\n**Type**: `function`\n\n**Default**: `Array.join()`\n\nCustomize how the object path is created when iterating over path segments.\n\n```js\nconst obj = { 'a/b': { c: { d: 'e' } } };\nconst options = {\n  // when segs === ['a', 'b'] use a \"/\" to join, otherwise use a \".\"\n  join: segs => segs.join(segs[0] === 'a' ? '/' : '.')\n};\n\nconsole.log(get(obj, 'a.b.c.d', options));\n//=> 'e'\n```\n\n### options.joinChar\n\n**Type**: `string`\n\n**Default**: `.`\n\nThe character to use when re-joining the string to check for keys with dots in them (this is probably not needed when `options.join` is used). This can be a different value than the separator, since the separator can be a string or regex.\n\n```js\nconst target = { 'a-b': { c: { d: 'e' } } };\nconst options = { joinChar: '-' };\nconsole.log(get(target, 'a.b.c.d', options)); \n//=> 'e'\n```\n\n## Benchmarks\n\n_(benchmarks were run on a MacBook Pro 2.5 GHz Intel Core i7, 16 GB 1600 MHz DDR3)_.\n\nget-value is more reliable and has more features than dot-prop, without sacrificing performance.\n\n```\n# deep (175 bytes)\n  dot-prop x 883,166 ops/sec ±0.93% (86 runs sampled)\n  get-value x 1,448,928 ops/sec ±1.53% (87 runs sampled)\n  getobject x 213,797 ops/sec ±0.85% (90 runs sampled)\n  object-path x 184,347 ops/sec ±2.48% (85 runs sampled)\n\n  fastest is get-value (by 339% avg)\n\n# root (210 bytes)\n  dot-prop x 3,905,828 ops/sec ±1.36% (87 runs sampled)\n  get-value x 16,391,934 ops/sec ±1.43% (83 runs sampled)\n  getobject x 1,200,021 ops/sec ±1.81% (88 runs sampled)\n  object-path x 2,788,494 ops/sec ±1.81% (86 runs sampled)\n\n  fastest is get-value (by 623% avg)\n\n# shallow (84 bytes)\n  dot-prop x 2,553,558 ops/sec ±0.89% (89 runs sampled)\n  get-value x 3,070,159 ops/sec ±0.88% (90 runs sampled)\n  getobject x 726,670 ops/sec ±0.81% (86 runs sampled)\n  object-path x 922,351 ops/sec ±2.05% (86 runs sampled)\n\n  fastest is get-value (by 219% avg)\n\n```\n\n### Running the benchmarks\n\nClone this library into a local directory:\n\n```sh\n$ git clone https://github.com/jonschlinkert/get-value.git\n```\n\nThen install devDependencies and run benchmarks:\n\n```sh\n$ npm install && node benchmark\n```\n\n## Release history\n\n### v3.0.0\n\n* Improved support for escaping. It's no longer necessary to use backslashes to escape keys.\n* Adds `options.default` for defining a default value to return when no value is resolved.\n* Adds `options.isValid` to allow the user to check the object after each iteration.\n* Adds `options.separator` for customizing character to split on.\n* Adds `options.split` for customizing how the object path is split.\n* Adds `options.join` for customizing how the object path is joined when iterating over path segments.\n* Adds `options.joinChar` for customizing the join character.\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [has-any-deep](https://www.npmjs.com/package/has-any-deep): Return true if `key` exists deeply on the given object.  | [homepage](https://github.com/jonschlinkert/has-any-deep \"Return true if `key` exists deeply on the given object. \")\n* [has-any](https://www.npmjs.com/package/has-any): Returns true if an object has any of the specified keys. | [homepage](https://github.com/jonschlinkert/has-any \"Returns true if an object has any of the specified keys.\")\n* [has-value](https://www.npmjs.com/package/has-value): Returns true if a value exists, false if empty. Works with deeply nested values using… [more](https://github.com/jonschlinkert/has-value) | [homepage](https://github.com/jonschlinkert/has-value \"Returns true if a value exists, false if empty. Works with deeply nested values using object paths.\")\n* [set-value](https://www.npmjs.com/package/set-value): Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths. | [homepage](https://github.com/jonschlinkert/set-value \"Create nested values and any intermediaries using dot notation (`'a.b.c'`) paths.\")\n* [unset-value](https://www.npmjs.com/package/unset-value): Delete nested properties from an object using dot notation. | [homepage](https://github.com/jonschlinkert/unset-value \"Delete nested properties from an object using dot notation.\")\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 81 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 2 | [ianwalter](https://github.com/ianwalter) |\n| 1 | [doowb](https://github.com/doowb) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n* [GitHub Profile](https://github.com/jonschlinkert)\n* [Twitter Profile](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright © 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on March 07, 2018._",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-2018, Jon Schlinkert.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/get-value/-/get-value-3.0.1.tgz#5efd2a157f1d6a516d7524e124ac52d0a39ef5a8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/get-value/-/get-value-3.0.1.tgz",
    "hash": "5efd2a157f1d6a516d7524e124ac52d0a39ef5a8",
    "integrity": "sha512-mKZj9JLQrwMBtj5wxi6MH8Z5eSKaERpAwjg43dPtlGI1ZVEgH/qC7T8/6R2OBSUA+zzHBZgICsVJaEIV2tKTDA==",
    "registry": "npm",
    "packageName": "get-value",
    "cacheIntegrity": "sha512-mKZj9JLQrwMBtj5wxi6MH8Z5eSKaERpAwjg43dPtlGI1ZVEgH/qC7T8/6R2OBSUA+zzHBZgICsVJaEIV2tKTDA== sha1-Xv0qFX8dalFtdSThJKxS0KOe9ag="
  },
  "registry": "npm",
  "hash": "5efd2a157f1d6a516d7524e124ac52d0a39ef5a8"
}