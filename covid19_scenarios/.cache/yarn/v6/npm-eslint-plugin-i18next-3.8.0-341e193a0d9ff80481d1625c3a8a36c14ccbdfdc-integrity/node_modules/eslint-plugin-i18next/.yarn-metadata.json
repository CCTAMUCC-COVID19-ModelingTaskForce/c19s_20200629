{
  "manifest": {
    "name": "eslint-plugin-i18next",
    "version": "3.8.0",
    "description": "ESLint plugin for i18n",
    "keywords": [
      "eslint",
      "eslintplugin",
      "eslint-plugin",
      "i18n",
      "i10next",
      "internationalization",
      "localization"
    ],
    "author": {
      "name": "edvardchen"
    },
    "main": "lib/index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/edvardchen/eslint-plugin-i18next.git"
    },
    "scripts": {
      "preversion": "npm run test",
      "postpublish": "git push --follow-tags",
      "test:watch": "npm t -- --watch",
      "test": "mocha tests --recursive"
    },
    "dependencies": {
      "requireindex": "~1.1.0"
    },
    "devDependencies": {
      "@commitlint/cli": "^8.3.5",
      "@commitlint/config-conventional": "^7.5.0",
      "@typescript-eslint/parser": "^1.10.2",
      "babel-eslint": "^10.0.1",
      "eslint": "^5.16.0",
      "husky": "^1.3.1",
      "lint-staged": "^9.4.2",
      "mocha": "^6.1.4",
      "prettier": "^1.18.2",
      "typescript": "^3.5.2",
      "vue-eslint-parser": "^6.0.3"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "lint-staged": {
      "*.js": [
        "prettier --write",
        "git add"
      ]
    },
    "husky": {
      "hooks": {
        "pre-commit": "lint-staged",
        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
      }
    },
    "license": "ISC",
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-eslint-plugin-i18next-3.8.0-341e193a0d9ff80481d1625c3a8a36c14ccbdfdc-integrity/node_modules/eslint-plugin-i18next/package.json",
    "readmeFilename": "README.md",
    "readme": "# eslint-plugin-i18next\n\nESLint plugin for i18n\n\n## Installation\n\n```bash\nnpm install eslint-plugin-i18next --save-dev\n```\n\n## Usage\n\nAdd `i18next` to the plugins section of your `.eslintrc` configuration file.\n\n```json\n{\n  \"plugins\": [\"i18next\"]\n}\n```\n\nThen configure the rules you want to use under the rules section.\n\n```json\n{\n  \"rules\": {\n    \"i18next/no-literal-string\": 2\n  }\n}\n```\n\nor\n\n```json\n{\n  \"extends\": [\"plugin:i18next/recommended\"]\n}\n```\n\n## Rule `no-literal-string`\n\nThis rule aims to avoid developers to display literal string to users\nin those projects which need to support [multi-language](https://www.i18next.com/).\n\n> <span style=\"color: lightcoral\">Note:</span> Disable auto-fix because key in the call `i18next.t(key)` ussally was not the same as the literal\n\n### Rule Details\n\n**It will find out all literal strings and validate them.**\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint i18next/no-literal-string: \"error\"*/\nconst a = 'foo';\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint i18next/no-literal-string: \"error\"*/\n// safe to assign string to const variables whose name are UPPER_CASE\nvar FOO = 'foo';\n\n// UPPER_CASE properties are valid no matter if they are computed or not\nvar a = {\n  BAR: 'bar',\n  [FOO]: 'foo'\n};\n\n// also safe to use strings themselves are UPPCASE_CASE\nvar foo = 'FOO';\n```\n\n#### i18n\n\nThis rule allows to call i18next translate function.\n\n**Correct** code:\n\n```js\n/*eslint i18next/no-literal-string: \"error\"*/\nvar bar = i18next.t('bar');\nvar bar2 = i18n.t('bar');\n```\n\nMaybe you use other internationalization libraries\nnot [i18next](https://www.i18next.com/). You can use like this:\n\n```js\n/*eslint i18next/no-literal-string: [\"error\", { \"ignoreCallee\": [\"yourI18n\"] }]*/\nconst bar = yourI18n('bar');\n\n// or\n\n/*eslint i18next/no-literal-string: [\"error\", { \"ignoreCallee\": [\"yourI18n.method\"] }]*/\nconst bar = yourI18n.method('bar');\n```\n\n#### HTML Markup\n\nAll literal strings in html template are typically mistakes. For JSX example:\n\n```HTML\n<div>foo</div>\n```\n\nThey should be translated by [i18next translation api](https://www.i18next.com/):\n\n```HTML\n<div>{i18next.t('foo')}</div>\n```\n\nSame for [Vue template](https://vuejs.org/v2/guide/syntax.html):\n\n```HTML\n<!-- incorrect -->\n<template>\n  foo\n</template>\n\n<!-- correct -->\n<template>\n  {{ i18next.t('foo') }}\n</template>\n```\n\nIt would allow most reasonable usages of string that would rarely be shown to user, like following examples.\n\nClick on them to see details.\n\n<details>\n<summary>\nreact-i18next\n</summary>\n\nThis plugin are compatible with [react-i18next](https://react.i18next.com/)\n\n```tsx\n// correct\n<Trans>\n  <span>bar</span>\n</Trans>\n```\n\n</details>\n\n<details>\n<summary>\nRedux/Vuex\n</summary>\n\nThis rule also works with those state managers like\n[Redux](https://redux.js.org/) and [Vuex](https://vuex.vuejs.org/).\n\n**Correct** code:\n\n```js\nvar bar = store.dispatch('bar');\nvar bar2 = store.commit('bar');\n```\n\n</details>\n\n<details>\n<summary>\nTypescript\n</summary>\n\nThis plugin would not complain on those reasonable usages of string.\n\nThe following cases are considered as **correct**:\n\n```typescript\nvar a: Type['member'];\nvar a: Omit<T, 'key'>;\nenum E {\n  A = 1\n}\nvar a = E['A'];\nvar a: { t: 'button' } = { t: 'button' };\nvar a: 'abc' | 'name' = 'abc';\n```\n\nWe require type information to work properly, so you need to add some options in your `.eslintrc`:\n\n```js\n  \"parserOptions\": {\n    // path of your tsconfig.json\n    \"project\": \"./tsconfig.json\"\n  }\n```\n\nSee\n[here](https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin#usage)\nfor more deteils.\n\n</details>\n\n<details>\n\n<summary>\nImport/Export\n</summary>\n\nThe following cases are **allowed**:\n\n```typescript\nimport mod from 'm';\nimport('mod');\nrequire('mod');\n\nexport { named } from 'm';\nexport * from 'm';\n```\n\n</details>\n\n<details>\n<summary>\nString Comparison\n</summary>\n\nString comparison is fine.\n\n```typescript\n// correct\nname === 'Android' || name === 'iOS';\n```\n\n</details>\n\n<details>\n<summary>\nSwithCase\n</summary>\n\nSkip switchcase statement:\n\n```typescript\n// correct\nswitch (type) {\n  case 'foo':\n    break;\n  case 'bar':\n    break;\n}\n```\n\n</details>\n\n### Options\n\n### markupOnly\n\nIf `markupOnly` option turn on, only JSX text and strings used as JSX attributes will be validated.\n\nJSX text:\n\n```jsx\n// incorrect\n<div>hello world</div>\n<div>{\"hello world\"}</div>\n```\n\nStrings as JSX attribute:\n\n```jsx\n// incorrect\n<div foo=\"foo\"></div>\n<div foo={\"foo\"}></div>\n```\n\n#### ignore\n\nThe `ignore` option specifies exceptions not to check for\nliteral strings that match one of regexp paterns.\n\nExamples of correct code for the `{ \"ignore\": ['foo'] }` option:\n\n```js\n/*eslint i18next/no-literal-string: [\"error\", {\"ignore\": [\"foo\"]}]*/\nconst a = 'afoo';\n```\n\n#### ignoreCallee\n\nTHe `ignoreCallee` option speficies exceptions not check for\nfunction calls whose names match one of regexp patterns.\n\nExamples of correct code for the `{ \"ignoreCallee\": [\"foo\"] }` option:\n\n```js\n/*eslint i18next/no-literal-string: [\"error\", { \"ignoreCallee\": [\"foo\"] }]*/\nconst bar = foo('bar');\n```\n\n#### ignoreAttribute\n\nThe `ignoreAttribute` option specifies exceptions not to check for JSX attributes that match one of ignored attributes.\n\nExamples of correct code for the `{ \"ignoreAttribute\": [\"foo\"] }` option:\n\n```jsx\n/*eslint i18next/no-literal-string: [\"error\", { \"ignoreAttribute\": [\"foo\"] }]*/\nconst element = <div foo=\"bar\" />;\n```\n\n#### ignoreProperty\n\nThe `ignoreProperty` option specifies exceptions not to check for object properties that match one of ignored properties.\n\nExamples of correct code for the `{ \"ignoreProperty\": [\"foo\"] }` option:\n\n```jsx\n/*eslint i18next/no-literal-string: [\"error\", { \"ignoreProperty\": [\"foo\"] }]*/\nconst a = { foo: 'bar' };\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-plugin-i18next/-/eslint-plugin-i18next-3.8.0.tgz#341e193a0d9ff80481d1625c3a8a36c14ccbdfdc",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-plugin-i18next/-/eslint-plugin-i18next-3.8.0.tgz",
    "hash": "341e193a0d9ff80481d1625c3a8a36c14ccbdfdc",
    "integrity": "sha512-Gsy7qxOZJZ96mofJNS0pYCwMwYtv6LM5QocrDRPK3k/sMW5h8alxMvz9YZs5CsHnQOqGRkm/l03KAjaugTzcNQ==",
    "registry": "npm",
    "packageName": "eslint-plugin-i18next",
    "cacheIntegrity": "sha512-Gsy7qxOZJZ96mofJNS0pYCwMwYtv6LM5QocrDRPK3k/sMW5h8alxMvz9YZs5CsHnQOqGRkm/l03KAjaugTzcNQ== sha1-NB4ZOg2f+ASB0WJcOoo2wUzL39w="
  },
  "registry": "npm",
  "hash": "341e193a0d9ff80481d1625c3a8a36c14ccbdfdc"
}