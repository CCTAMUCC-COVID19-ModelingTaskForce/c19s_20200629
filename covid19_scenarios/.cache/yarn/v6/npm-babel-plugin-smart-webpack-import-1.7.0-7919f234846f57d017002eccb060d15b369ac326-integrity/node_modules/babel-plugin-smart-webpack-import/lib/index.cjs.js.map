{"version":3,"file":"index.cjs.js","sources":["../src/index.js"],"sourcesContent":["/* eslint-disable filenames/match-exported */\nimport crypto from \"crypto\"\nimport { basename, dirname, extname, relative, sep } from \"path\"\n\nimport appRoot from \"app-root-dir\"\nimport basex from \"base-x\"\nimport json5 from \"json5\"\n\nconst base62 = basex(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nconst root = appRoot.get()\n\nconst DEFAULT_LENGTH = 5\n\nfunction hashString(input, precision = DEFAULT_LENGTH) {\n  return base62\n    .encode(crypto.createHash(\"sha256\").update(input).digest())\n    .slice(0, precision)\n}\n\nfunction collectImportCallPaths(startPath) {\n  const imports = []\n  startPath.traverse({\n    Import: function Import(importPath) {\n      imports.push(importPath)\n    }\n  })\n\n  return imports\n}\n\nfunction getImportArgPath(path) {\n  return path.parentPath.get(\"arguments\")[0]\n}\n\nfunction getSimplifiedPrefix(request) {\n  let simplified = request.replace(/^[./]+|(\\.js$)/g, \"\")\n  if (simplified.endsWith(\"/\")) {\n    simplified = `${simplified.slice(0, -1).split(\"/\").pop()}-`\n  } else {\n    simplified = \"\"\n  }\n\n  return simplified\n}\n\nconst visited = Symbol(\"visited\")\n\nfunction processImport(path, state) {\n  if (path[visited]) {\n    return\n  }\n  path[visited] = true\n\n  const importArg = getImportArgPath(path)\n  const importArgNode = importArg.node\n  const { quasis, expressions, leadingComments } = importArgNode\n\n  const requester = dirname(state.file.opts.filename)\n\n  // Use only first part of template string as request part.\n  // In theory we could use all values in `quasis` but this often does not\n  // offer any benefit and just makes the resulting names longer.\n  const request = quasis ? quasis[0].value.cooked : importArgNode.value\n\n  // There exists the possibility of non usable value. Typically only\n  // when the user has import() statements with other complex data, but\n  // not a plain string or template string. We handle this gracefully by ignoring.\n  if (request == null) {\n    return\n  }\n\n  const jsonContent = {}\n\n  // Try to parse all previous comments\n  if (leadingComments) {\n    leadingComments.forEach((comment, index) => {\n      // Skip empty comments\n      if (!comment.value.trim()) {\n        return\n      }\n\n      // Webpack magic comments are declared as JSON5 but miss the curly braces.\n      let parsed\n\n      try {\n        parsed = json5.parse(`{${comment.value}}`)\n      } catch (err) {\n        // Most probably a non JSON5 comment\n        return\n      }\n\n      // Skip comment processing if it already contains a chunk name\n      if (parsed.webpackChunkName) {\n        jsonContent.webpackChunkName = true\n        return\n      }\n\n      // We copy over all fields and...\n      for (const key in parsed) {\n        jsonContent[key] = parsed[key]\n      }\n\n      // Cleanup the parsed comment afterwards\n      comment.value = \"\"\n    })\n  }\n\n  if (!jsonContent.webpackChunkName) {\n    const hasExpressions = expressions && expressions.length > 0\n\n    // Append [request] as placeholder for dynamic part in WebpackChunkName\n    const fullRequest = hasExpressions ? `${request}[request]` : request\n\n    // Prepend some clean identifier of the static part when using expressions.\n    // This is not required to work, but helps users to identify different chunks.\n    const requestPrefix = hasExpressions ? getSimplifiedPrefix(request) : \"\"\n\n    // Cleanup combined request to not contain any paths info\n    const plainRequest = basename(fullRequest, extname(fullRequest))\n\n    // Normalize requester between different OSs\n    const normalizedRequester = relative(root, requester).split(sep).join(\"/\")\n\n    // Disable hashes if `{ hashes: false }` option is provided\n    let webpackChunkName = `${requestPrefix}${plainRequest}`\n    if (state.opts.hashes !== false) {\n      // Hash request origin and request\n      const importHash = hashString(`${normalizedRequester}::${request}`)\n      // Append hash\n      webpackChunkName = `${webpackChunkName}-${importHash}`\n    }\n\n    // Add our chunk name to the previously parsed values\n    jsonContent.webpackChunkName = webpackChunkName\n\n    // Convert to string and remove outer JSON object symbols {}\n    const magicComment = json5.stringify(jsonContent).slice(1, -1)\n\n    // Add as a new leading comment\n    importArg.addComment(\"leading\", magicComment)\n  }\n}\n\nexport default function smartWebpackImport({ types, template }) {\n  return {\n    name: \"smart-webpack-import\",\n    visitor: {\n      CallExpression(path, state) {\n        const imports = collectImportCallPaths(path)\n        imports.forEach((importCall) => processImport(importCall, state))\n      }\n    }\n  }\n}\n\nexport function shouldPrintComment(comment) {\n  // Keep pure function markers which are generated by some plugins\n  // See sideEffects option: https://github.com/mishoo/UglifyJS2\n  if ((/[#@]__PURE__/).exec(comment)) {\n    return true\n  }\n\n  // Keep JSON5 magic comments used for Webpack hints\n  if ((/^\\s?webpack[A-Z][A-Za-z]+:/).exec(comment)) {\n    return true\n  }\n\n  return false\n}\n"],"names":["base62","basex","root","appRoot","get","DEFAULT_LENGTH","hashString","input","precision","encode","crypto","createHash","update","digest","slice","collectImportCallPaths","startPath","imports","traverse","Import","importPath","push","getImportArgPath","path","parentPath","getSimplifiedPrefix","request","simplified","replace","endsWith","split","pop","visited","Symbol","processImport","state","importArg","importArgNode","node","quasis","expressions","leadingComments","requester","dirname","file","opts","filename","value","cooked","jsonContent","forEach","comment","index","trim","parsed","json5","parse","err","webpackChunkName","key","hasExpressions","length","fullRequest","requestPrefix","plainRequest","basename","extname","normalizedRequester","relative","sep","join","hashes","importHash","magicComment","stringify","addComment","smartWebpackImport","types","template","name","visitor","CallExpression","importCall","shouldPrintComment","exec"],"mappings":"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"}