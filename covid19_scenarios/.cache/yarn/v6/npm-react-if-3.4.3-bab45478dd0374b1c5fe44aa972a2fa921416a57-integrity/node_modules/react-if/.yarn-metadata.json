{
  "manifest": {
    "name": "react-if",
    "version": "3.4.3",
    "peerDependencies": {
      "prop-types": ">=15.5.10",
      "react": ">=15.5.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.0.0",
      "@babel/core": "^7.0.0",
      "@babel/plugin-transform-modules-umd": "^7.0.0",
      "@babel/preset-env": "^7.0.0",
      "@babel/preset-react": "^7.0.0",
      "@babel/register": "^7.0.0",
      "chai": "^4.1.2",
      "enzyme": "^3.3.0",
      "enzyme-adapter-react-16": "^1.1.1",
      "jsdom": "^11.10.0",
      "mocha": "^5.1.1",
      "prop-types": ">=15.5.10",
      "react": ">=15.5.0",
      "react-dom": ">=15.5.0",
      "react-test-renderer": "^16.3.2"
    },
    "main": "lib/ReactIf.js",
    "files": [
      "lib/ReactIf.js",
      "types.d.ts",
      "CONTRIBUTORS.md"
    ],
    "scripts": {
      "build": "babel src --out-dir lib",
      "watch": "babel -w src --out-dir lib",
      "test": "mocha --require @babel/register"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/romac/react-if.git"
    },
    "keywords": [
      "react",
      "react-component",
      "if",
      "conditional"
    ],
    "author": {
      "name": "Romain Ruetschi",
      "email": "romain.ruetschi@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/romac/react-if/issues"
    },
    "homepage": "https://github.com/romac/react-if",
    "description": "ðŸŒ— Render React components conditionally",
    "types": "types.d.ts",
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-react-if-3.4.3-bab45478dd0374b1c5fe44aa972a2fa921416a57-integrity/node_modules/react-if/package.json",
    "readmeFilename": "README.md",
    "readme": "\n# React If\n\n[![npm badge](http://img.shields.io/npm/v/react-if.svg)](https://www.npmjs.com/package/react-if)\n[![Build Status](https://travis-ci.org/romac/react-if.svg?branch=master&style=flat)](https://travis-ci.org/romac/react-if)\n[![Issues](http://img.shields.io/github/issues/romac/react-if.svg?style=flat)](https://github.com/romac/react-if/issues)\n![Status](https://img.shields.io/badge/status-inactive-lightgray.svg?style=flat)\n![License](https://img.shields.io/badge/license-mit-brightgreen.svg?style=flat)\n[![Contact](https://img.shields.io/badge/contact-@__romac-blue.svg?style=flat)](https://twitter.com/_romac)\n\nRender React components conditionally.\n\n## What does this component do\n\nTake a look at the following presentational component, which contains a commonly used pattern for conditional rendering:\n\n```javascript\nconst Bar = ({ name, age, drinkingAge }) => (\n    <div>\n        <Header />\n        {\n            age >= drinkingAge\n                ? <span className=\"ok\">Have a beer, {name}!</span>\n                : <span className=\"not-ok\">Sorry, {name}, you are not old enough.</span>\n        }\n        <Footer />\n    </div>\n)\n```\n\nWith `React-If` you can rewrite this into a more readable, expressive format:\n\n```javascript\nconst Bar = ({ name, age, drinkingAge }) => (\n    <div>\n        <Header />\n        <If condition={ age >= drinkingAge }>\n            <Then><span className=\"ok\">Have a beer, {name}!</span></Then>\n            <Else><span className=\"not-ok\">Sorry, {name}, you are not old enough.</span></Else>\n        </If>\n        <Footer />\n    </div>\n)\n```\n\n## Delaying evaluation of children / condition\n\nIt is important to note that, because JavaScript is an eagearly evaluated language, children of both the `Then` and `Else` component and condition will be evaluated regardless of the value of the condition. Should that be an issue for performance reasons, one can wrap said children / condition in a [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), to delay evaluation of the children / condition, as in the following example:\n\n\n```javascript\nconst renderData = (data) => {\n  val computed = /* expensive computation */\n  return <span>Here is the result: {computed}</span>;\n};\n\nconst Foo = ({ data }) => (\n    <div>\n        <If condition={false}>\n            <Then>{() =>\n              renderData(data)\n            }</Then>\n            <Else>\n              Nothing to see here\n            </Else>\n        </If>\n        <If condition={!this.props.bears}>\n          <Then>\n            No bears\n          </Then>\n\n          <Else>\n            <If condition={() => this.props.bears.length}>\n              Empty bears array\n            </If>\n            <Else>\n              // Display bears\n            </Else>\n          </Else>\n        </If>\n    </div>\n)\n```\n\nBy doing so, `renderData` will not be called in the 1st example.\n\nAnd `this.props.bears.length` will not be called in the 2nd example.\n\n## Installing and usage\n\n### NPM:\n\n`npm install react-if`\n\n### Bower:\n\n`bower install react-if`\n\n```javascript\n// ES2015\nimport { If, Then, Else, When, Unless, Switch, Case, Default } from 'react-if'\n\n// CommonJS:\nconst { If, Then, Else, When, Unless, Switch, Case, Default } = require('react-if')\n\n// Global\nvar If   = ReactIf.If\nvar Then = If.Then\nvar Else = If.Else\nvar When = If.When\nvar Unless = If.Unless\nvar Switch = If.Switch\nvar Case = If.Case\nvar Default = If.Default\n```\n\n## Examples\n\n## Swich/Case/Default\n\n```javascript\nimport React from 'react'\nimport { Switch, Case, Default } from 'react-if'\n\nconst myNumber = 3\n\nconst Example = () => (\n    <div>\n        <Switch>\n          <Case condition={ myNumber === 9 }>\n            This will be displayed if condition is matched\n          </Case>\n          <Case condition={ myNumber > 1 }>\n            This will be displayed if condition is matched\n          </Case>\n          <Default>\n            This will be displayed if no Case have matching condition\n          </Default>\n        </Switch>\n    </div>\n)\n```\n\n## Shorthands: When and Unless\n\n```javascript\nimport React from 'react'\nimport { When, Unless } from 'react-if'\n\nconst someCondition = false\n\nconst Example = () => (\n    <div>\n        <When condition={ someCondition }>\n            This will only be displayed, if the condition is TRUE\n        </When>\n    </div>\n)\n\nconst AnotherExample = () => (\n    <div>\n        <Unless condition={ someCondition }>\n            This will only be displayed, if the condition is FALSE\n        </Unless>\n    </div>\n)\n```\n\n## API\n\n### &lt;If /&gt;\n\n| Property      | Type    |\n| ------------- | ------- |\n| `condition`   | Boolean |\n\nIf `condition` evaluates to `true`, renders the `<Then />` block will be rendered, otherwise renders the `<Else />` block. Either block may be omitted.\n\nThis component can contain any number of `<Then />` or `<Else />` blocks, but only the first block of the right type (either `Then` or `Else`, depending on the condition) will be rendered.\n\n### &lt;Then /&gt;\n\nCan contain any number of elements inside, which it renders as-is. It can also contain a function. Should not be used outside of an `<If />` block. It will only be displayed, if parent `If` block's condition is true.\n\n### &lt;Else /&gt;\n\nCan contain any number of elements inside, which it renders as-is. It can also contain a function. Should not be used outside of an `<If />` block. It will only be displayed, if parent `If` block's condition is false.\n\n### &lt;Switch /&gt;\n\nA container for `<Case condition={...}/>` and `<Default />` blocks. It will render **the first matching** `Case`, or **the first encountered** `Default` (, or null).\n\n### &lt;Case /&gt;\n\n| Property      | Type    |\n| ------------- | ------- |\n| `condition`   | Boolean |\n\nIf the `Case` is the first one to have its `condition` evaluates to `true` inside the parent `<Switch />` it will be the only rendered.\n\n### &lt;Default /&gt;\n\nIf no `Case` have its `condition` evaluates to `true` inside the parent `<Switch />`, the first `Default` will be the only one rendered.\n\n### &lt;When /&gt;\n\nA shorthand for `<If condition={...}><Then>...</Then></If>`. The same rules apply to the child elements as with using the `Then` block.\n\n### &lt;Unless /&gt;\n\nA shorthand for `<If condition={...}><Else>...</Else></If>`. The same rules apply to the child elements as with using the `Else` block.\n\n## License\n\n**React If** is released under the [MIT license](http://romac.mit-license.org).\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-if/-/react-if-3.4.3.tgz#bab45478dd0374b1c5fe44aa972a2fa921416a57",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-if/-/react-if-3.4.3.tgz",
    "hash": "bab45478dd0374b1c5fe44aa972a2fa921416a57",
    "integrity": "sha512-DddMrbjAA4lkVhhYJgoeKC9+dj950I9hx4KClhJXySTL3GsQ7hxl9eWkcqS2i/qWvfPiQheJOwTYQ+Wv2BNdMA==",
    "registry": "npm",
    "packageName": "react-if",
    "cacheIntegrity": "sha512-DddMrbjAA4lkVhhYJgoeKC9+dj950I9hx4KClhJXySTL3GsQ7hxl9eWkcqS2i/qWvfPiQheJOwTYQ+Wv2BNdMA== sha1-urRUeN0DdLHF/kSqlyovqSFBalc="
  },
  "registry": "npm",
  "hash": "bab45478dd0374b1c5fe44aa972a2fa921416a57"
}