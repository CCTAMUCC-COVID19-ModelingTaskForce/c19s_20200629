{
  "manifest": {
    "name": "i18next-browser-languagedetector",
    "version": "4.2.0",
    "description": "language detector used in browser environment for i18next",
    "main": "./dist/cjs/i18nextBrowserLanguageDetector.js",
    "module": "./dist/esm/i18nextBrowserLanguageDetector.js",
    "types": "./index.d.ts",
    "keywords": [
      "i18next",
      "i18next-languageDetector"
    ],
    "homepage": "https://github.com/i18next/i18next-browser-languageDetector",
    "bugs": {
      "url": "https://github.com/i18next/i18next-browser-languageDetector/issues"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/i18next/i18next-browser-languageDetector.git"
    },
    "dependencies": {
      "@babel/runtime": "^7.5.5"
    },
    "devDependencies": {
      "@babel/core": "^7.5.5",
      "@babel/plugin-transform-runtime": "^7.5.5",
      "@babel/preset-env": "^7.5.5",
      "babel-eslint": "^10.0.2",
      "babel-polyfill": "^6.26.0",
      "babelify": "^10.0.0",
      "browserify": "16.3.0",
      "browserify-istanbul": "3.0.1",
      "chai": "4.2.0",
      "coveralls": "3.0.5",
      "cpy-cli": "^2.0.0",
      "dtslint": "^0.9.1",
      "eslint": "6.1.0",
      "eslint-config-airbnb": "17.1.1",
      "expect.js": "0.3.1",
      "i18next": "^19.0.0",
      "mkdirp": "0.5.1",
      "mocha": "7.1.2",
      "rimraf": "2.6.3",
      "rollup": "^1.18.0",
      "rollup-plugin-babel": "^4.3.3",
      "rollup-plugin-node-resolve": "^5.2.0",
      "rollup-plugin-terser": "^5.1.1",
      "tslint": "^5.18.0",
      "typescript": "^3.5.3",
      "yargs": "13.3.0"
    },
    "scripts": {
      "pretest": "npm run test:typescript && npm run test:typescript:noninterop",
      "test": "npm run build && mocha test -R spec --exit",
      "test:typescript": "tslint --project tsconfig.json",
      "test:typescript:noninterop": "tslint --project tsconfig.nonEsModuleInterop.json",
      "build": "rimraf dist && rollup -c && cpy \"./dist/umd/*.js\" ./",
      "preversion": "npm run build && git push",
      "postversion": "git push && git push --tags"
    },
    "author": {
      "name": "Jan MÃ¼hlemann",
      "email": "jan.muehlemann@gmail.com",
      "url": "https://github.com/jamuhl"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-i18next-browser-languagedetector-4.2.0-82e35d31f88a1d7c2b6d5913bf8c8481cd40aafb-integrity/node_modules/i18next-browser-languagedetector/package.json",
    "readmeFilename": "README.md",
    "readme": "# Introduction\n\n[![npm version](https://img.shields.io/npm/v/i18next-browser-languagedetector.svg?style=flat-square)](https://www.npmjs.com/package/i18next-browser-languagedetector)\n[![Bower](https://img.shields.io/bower/v/i18next-browser-languagedetector.svg)]()\n[![David](https://img.shields.io/david/i18next/i18next-browser-languagedetector.svg?style=flat-square)](https://david-dm.org/i18next/i18next-browser-languagedetector)\n\nThis is a i18next language detection plugin use to detect user language in the browser with support for:\n\n- cookie (set cookie i18next=LANGUAGE)\n- localStorage (set key i18nextLng=LANGUAGE)\n- navigator (set browser language)\n- querystring (append `?lng=LANGUAGE` to URL)\n- htmlTag (add html language tag <html lang=\"LANGUAGE\" ...)\n- path (http://my.site.com/LANGUAGE/...)\n- subdomain (http://LANGUAGE.site.com/...)\n\n# Getting started\n\nSource can be loaded via [npm](https://www.npmjs.com/package/i18next-browser-languagedetector), bower or [downloaded](https://github.com/i18next/i18next-browser-languagedetector/blob/master/i18nextBrowserLanguageDetector.min.js) from this repo.\n\n```\n# npm package\n$ npm install i18next-browser-languagedetector\n\n# bower\n$ bower install i18next-browser-languagedetector\n```\n\n- If you don't use a module loader it will be added to `window.i18nextBrowserLanguageDetector`\n\nWiring up:\n\n```js\nimport i18next from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18next\n  .use(LanguageDetector)\n  .init(i18nextOptions);\n```\n\nAs with all modules you can either pass the constructor function (class) to the i18next.use or a concrete instance.\n\n## Detector Options\n\n```js\n{\n  // order and from where user language should be detected\n  order: ['querystring', 'cookie', 'localStorage', 'navigator', 'htmlTag', 'path', 'subdomain'],\n\n  // keys or params to lookup language from\n  lookupQuerystring: 'lng',\n  lookupCookie: 'i18next',\n  lookupLocalStorage: 'i18nextLng',\n  lookupFromPathIndex: 0,\n  lookupFromSubdomainIndex: 0,\n\n  // cache user language on\n  caches: ['localStorage', 'cookie'],\n  excludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\n\n  // optional expire and domain for set cookie\n  cookieMinutes: 10,\n  cookieDomain: 'myDomain',\n\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement,\n\n  // only detect languages that are in the whitelist\n  checkWhitelist: true,\n\n  // fallback to a similar whitelist language\n  // Example 1: Browser language is 'es'\n  // if 'es' is not found in whitelist, first fallback to any whitelist language that starts with 'es-', then fallback to fallbackLng ('es' -> 'es-*' -> fallbackLng)\n  // Example 2: Browser language is 'es-MX'\n  // if 'es-MX' is not found in whitelist, first fallback to 'es', then fallback to 'es-*', then fallback to fallbackLng ('es-MX' -> 'es' -> 'es-*' -> fallbackLng)\n  checkForSimilarInWhitelist: false,\n\n  // optional set cookie options, reference:[MDN Set-Cookie docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie)\n  cookieOptions: {path:'/'}\n}\n```\n\nOptions can be passed in:\n\n**preferred** - by setting options.detection in i18next.init:\n\n```js\nimport i18next from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18next\n  .use(LanguageDetector)\n  .init({\n    detection: options\n  });\n```\n\non construction:\n\n```js\n  import LanguageDetector from 'i18next-browser-languagedetector';\n  const languageDetector = new LanguageDetector(null, options);\n```\n\nvia calling init:\n\n```js\n  import LanguageDetector from 'i18next-browser-languagedetector';\n  const languageDetector = new LanguageDetector();\n  lngDetector.init(options);\n```\n\n## Adding own detection functionality\n\n### interface\n\n```js\nexport default {\n  name: 'myDetectorsName',\n\n  lookup(options) {\n    // options -> are passed in options\n    return 'en';\n  },\n\n  cacheUserLanguage(lng, options) {\n    // options -> are passed in options\n    // lng -> current language, will be called after init and on changeLanguage\n\n    // store it\n  }\n};\n```\n\n\n### adding it\n\n```js\n  import LanguageDetector from 'i18next-browser-languagedetector';\n  const languageDetector = new LanguageDetector();\n  languageDetector.addDetector(myDetector);\n\n  i18next\n    .use(languageDetector)\n    .init({\n      detection: options\n    });\n```\n\nDon't forget: You have to add the name of your detector (`myDetectorsName` in this case) to the `order` array in your `options` object. Without that, your detector won't be used. See the [Detector Options section for more](#detector-options).\n\n--------------\n\n<h3 align=\"center\">Gold Sponsors</h3>\n\n<p align=\"center\">\n  <a href=\"https://locize.com/\" target=\"_blank\">\n    <img src=\"https://raw.githubusercontent.com/i18next/i18next/master/assets/locize_sponsor_240.gif\" width=\"240px\">\n  </a>\n</p>\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 i18next\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/i18next-browser-languagedetector/-/i18next-browser-languagedetector-4.2.0.tgz#82e35d31f88a1d7c2b6d5913bf8c8481cd40aafb",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/i18next-browser-languagedetector/-/i18next-browser-languagedetector-4.2.0.tgz",
    "hash": "82e35d31f88a1d7c2b6d5913bf8c8481cd40aafb",
    "integrity": "sha512-qRSCBWgDUSqVQb3sTxkDC+ImYLhF+wB387Y1RpOcJvyex+V3abi+W83n4Awy+dx719AOBbKTy97FjrUGrAhbyw==",
    "registry": "npm",
    "packageName": "i18next-browser-languagedetector",
    "cacheIntegrity": "sha512-qRSCBWgDUSqVQb3sTxkDC+ImYLhF+wB387Y1RpOcJvyex+V3abi+W83n4Awy+dx719AOBbKTy97FjrUGrAhbyw== sha1-guNdMfiKHXwrbVkTv4yEgc1Aqvs="
  },
  "registry": "npm",
  "hash": "82e35d31f88a1d7c2b6d5913bf8c8481cd40aafb"
}