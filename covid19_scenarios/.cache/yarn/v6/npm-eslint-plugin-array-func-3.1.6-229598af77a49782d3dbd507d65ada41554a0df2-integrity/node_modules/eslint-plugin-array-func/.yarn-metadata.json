{
  "manifest": {
    "name": "eslint-plugin-array-func",
    "version": "3.1.6",
    "description": "Rules dealing with Array functions and methods.",
    "main": "index.js",
    "scripts": {
      "lint:js": "eslint index.js package.json rules/ test/ --ext js,json",
      "lint:ec": "eclint check $(git ls-files)",
      "lint": "npm run lint:js && npm run lint:ec",
      "test": "npm run lint && nyc ava",
      "coverage": "nyc report && codecov",
      "snyk-protect": "snyk protect",
      "prepare": "npm run snyk-protect"
    },
    "author": {
      "name": "Martin Giger",
      "url": "https://humanoids.be"
    },
    "license": "MIT",
    "devDependencies": {
      "@ava/babel": "^1.0.1",
      "@freaktechnik/eslint-config-node": "^7.2.0",
      "@freaktechnik/eslint-config-test": "^7.2.0",
      "@typescript-eslint/parser": "^2.34.0",
      "ava": "^3.8.2",
      "codecov": "^3.7.0",
      "eclint": "^2.8.1",
      "eslint": "^6.8.0",
      "eslint-ava-rule-tester": "^4.0.0",
      "eslint-plugin-eslint-plugin": "^2.2.1",
      "nyc": "^15.0.1",
      "snyk": "^1.323.0",
      "typescript": "^3.9.2"
    },
    "peerDependencies": {
      "eslint": ">=3.0.0"
    },
    "keywords": [
      "eslint",
      "eslintplugin"
    ],
    "nyc": {
      "reporter": [
        "lcov",
        "text"
      ]
    },
    "engines": {
      "node": ">= 6.8.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/freaktechnik/eslint-plugin-array-func.git"
    },
    "bugs": {
      "url": "https://github.com/freaktechnik/eslint-plugin-array-func/issues"
    },
    "dependencies": {},
    "ava": {
      "babel": true,
      "files": [
        "test/**/*",
        "!test/helpers"
      ]
    },
    "snyk": true,
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-eslint-plugin-array-func-3.1.6-229598af77a49782d3dbd507d65ada41554a0df2-integrity/node_modules/eslint-plugin-array-func/package.json",
    "readmeFilename": "README.md",
    "readme": "# eslint-plugin-array-func\n\n[![Build Status](https://travis-ci.com/freaktechnik/eslint-plugin-array-func.svg?branch=master)](https://travis-ci.com/freaktechnik/eslint-plugin-array-func) [![codecov](https://codecov.io/gh/freaktechnik/eslint-plugin-array-func/branch/master/graph/badge.svg)](https://codecov.io/gh/freaktechnik/eslint-plugin-array-func)\n\nRules for Array functions and methods.\n\n## Contents\n- [Installation](#installation)\n- [Rules](#rules)\n  - [`from-map`](#from-map)\n    - [Examples](#examples)\n  - [`no-unnecessary-this-arg`](#no-unnecessary-this-arg)\n    - [Checked Functions](#checked-functions)\n    - [Checked Methods](#checked-methods)\n    - [Examples](#examples-1)\n  - [`prefer-array-from`](#prefer-array-from)\n    - [Examples](#examples-2)\n  - [`avoid-reverse`](#avoid-reverse)\n    - [Examples](#examples-3)\n  - [`prefer-flat-map`](#prefer-flat-map)\n    - [Examples](#examples-4)\n  - [`prefer-flat`](#prefer-flat)\n    - [Examples](#examples-5)\n- [Configurations](#configurations)\n  - [`array-func/recommended` Configuration](#array-funcrecommended-configuration)\n    - [Using the Configuration](#using-the-configuration)\n  - [`array-func/all` Configuration](#array-funcall-configuration)\n- [License](#license)\n\n## Installation\n\nInstall [ESLint](https://www.github.com/eslint/eslint) either locally or globally.\n\n```sh\n$ npm install -D eslint\n```\n\nIf you installed `ESLint` globally, you have to install the `array-func` plugin globally too. Otherwise, install it locally.\n\n```sh\n$ npm install -D eslint-plugin-array-func\n```\n\n## Rules\n\n### `from-map`\nPrefer using the `mapFn` callback of `Array.from` over an immediate `.map()` call on the `Array.from` result.\n\n`Array.from` has a `mapFn` callback that lets you map the items of the iterable to an array like you would with `.map()` except that values have not yet been truncated to fit types allowed in an array. Some iterables can't be directly converted to an array and thus have to be iterated either way. In that case using the mapping callback of `Array.from` avoids an iteration. See also [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Description) for an explanation of the potential benefits of using the mapping callback of `Array.from` directly.\n\nThis rule is auto fixable. It will produce nested function calls if you use the `Array.from` map callback and have a `.map()` call following it.\n\n#### Examples\nCode that triggers this rule:\n```js\nArray.from(iterable).map((t) => t.id);\n\nArray.from(iterable, (t) => t.id).map((id) => id[0]);\n```\n\nCode that doesn't trigger this rule:\n```js\nArray.from(iterable, (t) => t.id);\n\nArray.from(iterable, function(t) { this.format(t); }, this);\n\nconst arr = Array.from(iterable);\nconst mappedArray = arr.map((t) => t.id);\n```\n\n### `no-unnecessary-this-arg`\nAvoid the `this` parameter when providing arrow function as callback in array functions.\n\nThe `this` parameter is useless when providing arrow functions, since the `this` of arrow functions can not be rebound, thus the parameter has no effect.\n\nThe fix is usually to omit the parameter. The Array methods can't be auto-fixed, since the detection of array methods is not confident enough to know that the method is being called on an array.\n\n#### Checked Functions\n- `from` (fixable)\n\n#### Checked Methods\n- `every`\n- `filter`\n- `find`\n- `findIndex`\n- `forEach`\n- `map`\n- `some`\n\n#### Examples\nCode that triggers this rule:\n```js\nconst array = Array.from(\"example\", (char) => char.charCodeAt(0), this);\n\nconst e = array.find((char) => char === 101, this);\n\nconst exampleAsArray = array.map((char) => String.fromCharCode(char), this);\n\nconst eIndex = array.findIndex((char) => char === 101, this);\n\nconst containsE = array.some((char) => char === 101, this);\n\nconst isOnlyE = array.every((char) => char === 101, this);\n\nconst onlyEs = array.filter((char) => char === 101, this);\n\narray.forEach((char) => console.log(char), this);\n```\n\nCode that doesn't trigger this rule:\n```js\nconst array = Array.from(\"example\", (char) => char.charCodeAt(0));\nconst alternateArray = Array.from(\"example\", function(char) {\n    return char.charCodeAt(this)\n}, 0);\n\nconst e = array.find((char) => char === 101);\n\nconst exampleAsArray = array.map((char) => String.fromCharCode(char));\n\nconst eIndex = array.findIndex((char) => char === 101);\n\nconst containsE = array.some((char) => char === 101);\n\nconst isOnlyE = array.every((char) => char === 101);\n\nconst onlyEs = array.filter(function(char) {\n    return char === this\n}, 101);\n\narray.forEach(function(char) {\n    this.log(char);\n}, console);\n\narray.filter(this.isGood, this);\n```\n\n### `prefer-array-from`\nUse `Array.from` instead of `[...iterable]` for performance benefits.\n\nThis rule is auto fixable.\n\n#### Examples\nCode that triggers this rule:\n```js\nconst iterable = [...\"string\"];\n\nconst arrayCopy = [...iterable];\n```\n\nCode that doesn't trigger this rule:\n```js\nconst array = [1, 2, 3];\n\nconst extendedArray =  [0, ...array];\n\nconst arrayCopy = Array.from(array);\n\nconst characterArray = Array.from(\"string\");\n```\n\n### `avoid-reverse`\nAvoid reversing the array and running a method on it if there is an equivalent\nof the method operating on the array from the other end.\n\nThere are two operations with such equivalents: `reduce` with `reduceRight`.\n\nThis rule is auto fixable.\n\n#### Examples\nCode that triggers this rule:\n```js\nconst sum = array.reverse().reduce((p, c) => p + c, 0);\n\nconst reverseSum = array.reverse().reduceRight((p, c) => p + c, 0);\n```\n\nCode that doesn't trigger this rule:\n```js\nconst sum = array.reduce((p, c) => p + c, 0);\n\nconst reverseSum = array.reduceRight((p, c) => p + c, 0);\n\nconst reverseArray = array.reverse();\n\nconst reverseMap = array.reverse().map((r) => r + 1);\n```\n\n### `prefer-flat-map`\nUse `.flatMap()` to flatten an array and map the values instead of using\n`.flat().map()`.\n\nThis rule is auto fixable.\n\n#### Examples\nCode that triggers this rule:\n```js\nconst flattenedAndMapped = array.map((p) => p).flat();\n\nconst flatWithDefaultDepth = array.map((r) => r).flat(1);\n```\n\nCode that doesn't trigger this rule:\n```js\nconst oneAction = array.flatMap((m) => m);\n\nconst flattened = array.flat();\n\nconst mapped = array.map((r) => r + 1);\n\nconst mappedThenFlattened = array.flat().map((r) => r + 1);\n\nconst flatMappedWithExtra = array.map((r) => r + 1).reverse().flat();\n\nconst flatWithDepth = array.map((p) => p).flat(99);\n```\n\n### `prefer-flat`\nUse `.flat()` to flatten an array of arrays. This rule currently recognizes two\npatterns and can replace them with a `.flat()` call:\n\n- `[].concat(...array)`\n- `array.reduce((p, n) => p.concat(n), [])`\n\nThis rule is auto fixable.\n\n#### Examples\nCode that triggers this rule:\n```js\nconst concatFlat = [].concat(...array);\n\nconst reduceFlat = array.reduce((p, n) => p.concat(n), []);\n```\n\nCode that doesn't trigger this rule:\n```js\nconst flattened = array.flat();\n\nconst reverseFlat = array.reduce((p, n) => n.concat(p), []);\n\nconst otherReduce = array.reduce((p, n) => n + p, 0);\n```\n\n## Configurations\n\n### `array-func/recommended` Configuration\nThe recommended configuration will set your parser ECMA Version to 2015, since that's when the Array functions and methods were added.\n\nRule | Error level | Fixable\n---- | ----------- | -------\n`array-func/from-map` | Error | Yes\n`array-func/no-unnecessary-this-arg` | Error | Sometimes\n`array-func/prefer-array-from` | Error | Yes\n`array-func/avoid-reverse` | Error | Yes\n\n#### Using the Configuration\nTo enable this configuration use the `extends` property in your `.eslintrc.json` config file (may look different for other config file styles):\n```json\n{\n  \"extends\": [\n    \"plugin:array-func/recommended\"\n  ]\n}\n```\n\n### `array-func/all` Configuration\nThe recommended configuration does not include all rules, since some Array methods\nwere added after ES2015. The all configuration enables all rules the plugin\ncontains and sets the ECMA version appropriately.\n\nRule | Error level | Fixable\n---- | ----------- | -------\n`array-func/from-map` | Error | Yes\n`array-func/no-unnecessary-this-arg` | Error | Sometimes\n`array-func/prefer-array-from` | Error | Yes\n`array-func/avoid-reverse` | Error | Yes\n`array-func/prefer-flat-map` | Error | Yes\n`array-func/prefer-flat` | Error | Yes\n\n## License\nThe `array-func` plugin is licensed under the [MIT License](LICENSE).\n",
    "licenseText": "Copyright (c) 2017 Martin Giger\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-plugin-array-func/-/eslint-plugin-array-func-3.1.6.tgz#229598af77a49782d3dbd507d65ada41554a0df2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-plugin-array-func/-/eslint-plugin-array-func-3.1.6.tgz",
    "hash": "229598af77a49782d3dbd507d65ada41554a0df2",
    "integrity": "sha512-heMql4APbpZx4QFZTwVHGepR0JaxSlflaJa2kCVy+zUrVFhYmGVuDcAqEROcxMHYKleqwKkQ57515c7Uadc5nQ==",
    "registry": "npm",
    "packageName": "eslint-plugin-array-func",
    "cacheIntegrity": "sha512-heMql4APbpZx4QFZTwVHGepR0JaxSlflaJa2kCVy+zUrVFhYmGVuDcAqEROcxMHYKleqwKkQ57515c7Uadc5nQ== sha1-IpWYr3ekl4LT29UH1lraQVVKDfI="
  },
  "registry": "npm",
  "hash": "229598af77a49782d3dbd507d65ada41554a0df2"
}