{
  "manifest": {
    "name": "snyk-config",
    "description": "Config setup for snyk shared across projects",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "scripts": {
      "build": "tsc",
      "watch": "tsc -w",
      "prepare": "npm run build",
      "lint": "eslint 'lib/**/*.?s'",
      "test": "node test/*.test.js --afoo --azoo='true' | tap-spec",
      "format": "prettier --write '{lib,test}/**/*.?s'"
    },
    "keywords": [
      "config"
    ],
    "author": {
      "name": "Remy Sharp"
    },
    "license": "Apache-2.0",
    "devDependencies": {
      "@types/lodash": "^4.14.147",
      "@types/nconf": "^0.10.0",
      "@types/node": "^6.14.9",
      "@typescript-eslint/eslint-plugin": "^2.7.0",
      "@typescript-eslint/parser": "^2.7.0",
      "eslint": "^6.6.0",
      "eslint-config-prettier": "^6.5.0",
      "prettier": "^1.19.1",
      "tap-spec": "^5.0.0",
      "tape": "^4.11.0",
      "typescript": "^3.7.2"
    },
    "dependencies": {
      "@snyk/lodash": "4.17.15-patch",
      "debug": "^4.1.1",
      "nconf": "^0.10.0"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/snyk/config.git"
    },
    "version": "3.1.0",
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-snyk-config-3.1.0-61dec9296bff8d7459c46bd3f1e6c0ffcf7eea5f-integrity/node_modules/snyk-config/package.json",
    "readmeFilename": "README.md",
    "readme": "# snyk-config\n\nLoads the configuration for your module.\n\n\n## Usage\n\nAlthough you can require this module directly, it's recommended you create your\nown `config.ts` file that can be cached by the require system and called *without* a path:\n\n```typescript\n// config.ts\nimport { loadConfig } from 'snyk-config';\nexport const config = loadConfig('<directory with config files>');\n\n// in app.ts\nimport { config } from './config';\n\n// in foo.ts\nimport { config } from './config'; // matches config in app.ts\n```\n\n\n## Method\n\nThe config loader will look for the following values in order of priority,\nspecifically, if a property appears in multiple layers of config (below) the\nfirst found is used:\n\n- process environment values prefixed with `SNYK_`\n- process arguments\n- a `config.secret.json` file in the path specified by:\n   * the `secretConfig` option, or\n   * the environment variable `CONFIG_SECRET_FILE`, or\n   * in the specified config directory\n- a `config.${SERVICE_ENV}.json` file in the specified config directory,\n   * where `SERVICE_ENV` defaults to `local`, if not set\n- a `config.default.json` file in the specified config directory\n\n\n## Example\n\n### config.local.json\n\n```json\n{\n  \"from\": \"file\"\n}\n```\n\n\n### app.js\n\n```typescript\nimport { loadConfig } from 'snyk-config';\n// as we're in the same directory as the config.local.json, there's no arg\nconst config = loadConfig();\nconsole.log(config);\n```\n\n\n### cli\n\n```shell\n$ SNYK_from=cli node app.js\n=> { from: \"cli\" }\n```\n\n\n## Notes\n\n* Values read from the environment or from the process arguments will *always* be `strings`\n  or `boolean`s. This is important to differentiate from values parsed in the config files\n  as these can be `numbers`.\n* Environment property names strip *off* the preceding `SNYK_` string, so `SNYK_foo = 10`\n  becomes `foo = \"10\"`\n* To create a nested object structure from the environment values, use two underscores:\n  `SNYK_foo__bar = 10` becomes `foo = { bar: \"10\" }`\n",
    "licenseText": "Copyright 2017 Snyk Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/snyk-config/-/snyk-config-3.1.0.tgz#61dec9296bff8d7459c46bd3f1e6c0ffcf7eea5f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/snyk-config/-/snyk-config-3.1.0.tgz",
    "hash": "61dec9296bff8d7459c46bd3f1e6c0ffcf7eea5f",
    "integrity": "sha512-3UlyogA67/9WOssJ7s4d7gqWQRWyO/LbgdBBNMhhmFDKa7eTUSW+A782CVHgyDSJZ2kNANcMWwMiOL+h3p6zQg==",
    "registry": "npm",
    "packageName": "snyk-config",
    "cacheIntegrity": "sha512-3UlyogA67/9WOssJ7s4d7gqWQRWyO/LbgdBBNMhhmFDKa7eTUSW+A782CVHgyDSJZ2kNANcMWwMiOL+h3p6zQg== sha1-Yd7JKWv/jXRZxGvT8ebA/89+6l8="
  },
  "registry": "npm",
  "hash": "61dec9296bff8d7459c46bd3f1e6c0ffcf7eea5f"
}