{
  "manifest": {
    "name": "jest-axe",
    "version": "3.4.0",
    "description": "Custom Jest matcher for aXe for testing accessibility",
    "repository": {
      "type": "git",
      "url": "https://github.com/nickcolley/jest-axe.git"
    },
    "main": "index.js",
    "files": [
      "index.js",
      "extend-expect.js"
    ],
    "scripts": {
      "test": "jest"
    },
    "keywords": [
      "jest",
      "matcher",
      "axe",
      "accessibility",
      "a11y"
    ],
    "author": {
      "name": "Nick Colley"
    },
    "license": "MIT",
    "engines": {
      "node": ">= 8.0.0"
    },
    "dependencies": {
      "axe-core": "^3.5.1",
      "chalk": "^3.0.0",
      "jest-matcher-utils": "^25.1.0",
      "lodash.merge": "^4.6.2"
    },
    "devDependencies": {
      "@testing-library/react": "^9.5.0",
      "@testing-library/vue": "^4.2.0",
      "@vue/server-test-utils": "^1.0.0-beta.31",
      "@vue/test-utils": "^1.0.0-beta.31",
      "enzyme": "^3.11.0",
      "enzyme-adapter-react-16": "^1.15.2",
      "jest": "^25.1.0",
      "react": "^16.13.0",
      "react-dom": "^16.13.0",
      "vue": "^2.6.11",
      "vue-server-renderer": "^2.6.11",
      "vue-template-compiler": "^2.6.11"
    },
    "_registry": "npm",
    "_loc": "/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/.cache/yarn/v6/npm-jest-axe-3.4.0-2bea80d37087e7723481ecc1b054f87ec563cabd-integrity/node_modules/jest-axe/package.json",
    "readmeFilename": "README.md",
    "readme": "# jest-axe\n\n[![npm version](https://img.shields.io/npm/v/jest-axe.svg)](http://npm.im/jest-axe)\n![node](https://img.shields.io/node/v/jest-axe)\n[![Build Status](https://travis-ci.org/nickcolley/jest-axe.svg?branch=master)](https://travis-ci.org/nickcolley/jest-axe)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\nCustom [Jest](https://jest-bot.github.io/jest/) matcher for [aXe](https://github.com/dequelabs/axe-core) for testing accessibility\n\n## ⚠️✋ This project does not guarantee what you build is accessible.\nThe GDS Accessibility team found that only [~30% of issues are found by automated testing](https://accessibility.blog.gov.uk/2017/02/24/what-we-found-when-we-tested-tools-on-the-worlds-least-accessible-webpage).\n\nTools like aXe are similar to [code linters](https://en.wikipedia.org/wiki/Lint_%28software%29) such as [eslint](https://eslint.org/) or [sass-lint](https://github.com/sasstools/sass-lint): they can find common issues but cannot guarantee what you build works for users.\n\nYou'll also need to:\n- test your interface with the [assistive technologies that real users use](https://www.gov.uk/service-manual/technology/testing-with-assistive-technologies#when-to-test) (see also [WebAIM's survey results](https://webaim.org/projects/screenreadersurvey7/#primary)).\n- include people with disabilities in user research.\n\n## Installation:\n```bash\nnpm install --save-dev jest-axe\n```\n\n[TypeScript](https://www.typescriptlang.org/) users can install the community maintained types package:\n\n```bash\nnpm install --save-dev @types/jest-axe\n```\n\n## Usage:\n\n```javascript\nconst { axe, toHaveNoViolations } = require('jest-axe')\n\nexpect.extend(toHaveNoViolations)\n\nit('should demonstrate this matcher`s usage', async () => {\n  const render = () => '<img src=\"#\"/>'\n\n  // pass anything that outputs html to axe\n  const html = render()\n\n  expect(await axe(html)).toHaveNoViolations()\n})\n```\n\n![Screenshot of the resulting output from the usage example](example-cli.png)\n\n> Note, you can also require `'jest-axe/extend-expect'` which will call `expect.extend` for you.\n> This is especially helpful when using the jest `setupFilesAfterEnv` configuration.\n\n### Testing React\n\n```javascript\nconst React = require('react')\nconst { render } =  require('react-dom')\nconst App = require('./app')\n\nconst { axe, toHaveNoViolations } = require('jest-axe')\nexpect.extend(toHaveNoViolations)\n\nit('should demonstrate this matcher`s usage with react', async () => {\n  render(<App/>, document.body)\n  const results = await axe(document.body)\n  expect(results).toHaveNoViolations()\n})\n```\n\n### Testing React with [Enzyme](https://airbnb.io/enzyme/)\n\n```javascript\nconst React = require('react')\nconst App = require('./app')\n\nconst { mount } = require('enzyme')\nconst { axe, toHaveNoViolations } = require('jest-axe')\nexpect.extend(toHaveNoViolations)\n\nit('should demonstrate this matcher`s usage with enzyme', async () => {\n  const wrapper = mount(<App/>)\n  const results = await axe(wrapper.getDOMNode())\n  \n  expect(results).toHaveNoViolations()\n})\n```\n\n### Testing React with [React Testing Library](https://testing-library.com/docs/react-testing-library/intro)\n\n```javascript\nconst React = require('react')\nconst App = require('./app')\n\nconst { render, cleanup } = require('@testing-library/react')\nconst { axe, toHaveNoViolations } = require('jest-axe')\nexpect.extend(toHaveNoViolations)\n\nit('should demonstrate this matcher`s usage with react testing library', async () => {\n  const { container } = render(<App/>)\n  const results = await axe(container)\n  \n  expect(results).toHaveNoViolations()\n  \n  cleanup()\n})\n```\n\n> Note: If you're using `react testing library` you should be using the\n> [`cleanup`](https://testing-library.com/docs/react-testing-library/api#cleanup) method. This method removes the rendered application from the DOM and ensures a clean HTML Document for further testing.\n\n### Testing Vue with [Vue Test Utils](https://vue-test-utils.vuejs.org/)\n\n```javascript\nconst App = require('./App.vue')\n\nconst { mount } = require('@vue/test-utils')\nconst { axe, toHaveNoViolations } = require('jest-axe')\nexpect.extend(toHaveNoViolations)\n\nit('should demonstrate this matcher`s usage with vue test utils', async () => {\n  const wrapper = mount(Image)\n  const results = await axe(wrapper.element)\n\n  expect(results).toHaveNoViolations()\n})\n```\n\n### Testing Vue with [Vue Testing Library](https://testing-library.com/docs/vue-testing-library/intro)\n\n```javascript\nconst React = require('react')\nconst App = require('./app')\n\nconst { render, cleanup } = require('@testing-library/vue')\nconst { axe, toHaveNoViolations } = require('jest-axe')\nexpect.extend(toHaveNoViolations)\n\nit('should demonstrate this matcher`s usage with react testing library', async () => {\n  const { container } = render(<App/>)\n  const results = await axe(container)\n  \n  expect(results).toHaveNoViolations()\n  \n  cleanup()\n})\n```\n> Note: If you're using `vue testing library` you should be using the\n> [`cleanup`](https://testing-library.com/docs/vue-testing-library/api#cleanup) method. This method removes the rendered application from the DOM and ensures a clean HTML Document for further testing.\n\n### Axe configuration\n\nThe `axe` function allows options to be set with the [same options as documented in axe-core](https://github.com/dequelabs/axe-core/blob/develop-2x/doc/API.md#options-parameter):\n\n```javascript\nconst { axe, toHaveNoViolations } = require('jest-axe')\n\nexpect.extend(toHaveNoViolations)\n\nit('should demonstrate this matcher`s usage with a custom config', async () => {\n  const render = () => `\n    <div>\n      <img src=\"#\"/>\n    </div>\n  `\n\n  // pass anything that outputs html to axe\n  const html = render()\n\n  const results = await axe(html, {\n    rules: {\n      // for demonstration only, don't disable rules that need fixing.\n      'image-alt': { enabled: false }\n    }\n  })\n\n  expect(results).toHaveNoViolations()\n})\n```\n\n## Setting global configuration\n\nIf you find yourself repeating the same options multiple times, you can export a version of the `axe` function with defaults set.\n\nNote: You can still pass additional options to this new instance; they will be merged with the defaults.\n\nThis could be done in [Jest's setup step](https://facebook.github.io/jest/docs/en/setup-teardown.html)\n\n```javascript\n// Global helper file (axe-helper.js)\nconst { configureAxe } = require('jest-axe')\n\nconst axe = configureAxe({\n  rules: {\n    // for demonstration only, don't disable rules that need fixing.\n    'image-alt': { enabled: false }\n  }\n})\n\nmodule.exports = axe\n```\n\n```javascript\n// Individual test file (test.js)\nconst { toHaveNoViolations } = require('jest-axe')\nconst axe = require('./axe-helper.js')\n\nexpect.extend(toHaveNoViolations)\n\nit('should demonstrate this matcher`s usage with a default config', async () => {\n  const render = () => `\n    <div>\n      <img src=\"#\"/>\n    </div>\n  `\n\n  // pass anything that outputs html to axe\n  const html = render()\n\n  expect(await axe(html)).toHaveNoViolations()\n})\n```\n\n## Thanks\n- [Jest](https://facebook.github.io/jest/) for the great test runner that allows extending matchers.\n- [aXe](https://www.deque.com/axe/) for the wonderful axe-core that makes it so easy to do this.\n- Government Digital Service for making coding in the open the default.\n  - GOV.UK Publishing Frontend team who published the [basis of the aXe reporter](https://github.com/alphagov/govuk_publishing_components/blob/581c22c9d35d85d5d985571d007f6397a4399f4c/spec/javascripts/govuk_publishing_components/AccessibilityTestSpec.js)\n- [jest-image-snapshot](https://github.com/americanexpress/jest-image-snapshot) for inspiration on README and repo setup\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (C) 2017 Crown Copyright (Government Digital Service)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jest-axe/-/jest-axe-3.4.0.tgz#2bea80d37087e7723481ecc1b054f87ec563cabd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jest-axe/-/jest-axe-3.4.0.tgz",
    "hash": "2bea80d37087e7723481ecc1b054f87ec563cabd",
    "integrity": "sha512-iKAq/cBxvyizSkpSY+CTndsXy2v5IWAkYXqanPF6bGaGXJ3fEtzEWQRVeZ0SHCEbsjnvDaOly5nwiiDOz0suDw==",
    "registry": "npm",
    "packageName": "jest-axe",
    "cacheIntegrity": "sha512-iKAq/cBxvyizSkpSY+CTndsXy2v5IWAkYXqanPF6bGaGXJ3fEtzEWQRVeZ0SHCEbsjnvDaOly5nwiiDOz0suDw== sha1-K+qA03CH53I0gezBsFT4fsVjyr0="
  },
  "registry": "npm",
  "hash": "2bea80d37087e7723481ecc1b054f87ec563cabd"
}