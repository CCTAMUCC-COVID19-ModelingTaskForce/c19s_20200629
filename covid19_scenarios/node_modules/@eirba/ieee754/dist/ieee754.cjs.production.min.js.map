{"version":3,"file":"ieee754.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["export function float64ToBigInt64(n: number): bigint {\n  const buffer = new ArrayBuffer(Float64Array.BYTES_PER_ELEMENT);\n  const view = new DataView(buffer);\n  view.setFloat64(0, n, true);\n  return view.getBigInt64(0, true);\n}\n\nfunction signAndMagnitudeToBiased(sam: bigint): bigint {\n  if (sam < 0) {\n    return ~sam + BigInt(1);\n  }\n  return sam;\n}\n\nexport function ulpDistance(a: number, b: number): bigint {\n  /* If the numbers are the same, the diff is zero. */\n  if (a === b) {\n    return BigInt(0);\n  }\n\n  const biased1 = signAndMagnitudeToBiased(float64ToBigInt64(a));\n  const biased2 = signAndMagnitudeToBiased(float64ToBigInt64(b));\n\n  return biased1 >= biased2 ? biased1 - biased2 : biased2 - biased1;\n}\n\nexport function ulpAlmostEqual(a: number, b: number, maxULP: number): boolean {\n  if (Number.isNaN(a) || Number.isNaN(b)) {\n    return false;\n  }\n\n  return ulpDistance(a, b) <= BigInt(maxULP);\n}\n\nexport function ulpEqual(a: number, b: number): boolean {\n  if (Number.isNaN(a) || Number.isNaN(b)) {\n    return false;\n  }\n\n  return ulpDistance(a, b) === BigInt(0);\n}\n"],"names":["float64ToBigInt64","n","buffer","ArrayBuffer","Float64Array","BYTES_PER_ELEMENT","view","DataView","setFloat64","getBigInt64","signAndMagnitudeToBiased","sam","BigInt","ulpDistance","a","b","biased1","biased2","maxULP","Number","isNaN"],"mappings":"sBAAgBA,EAAkBC,OAC1BC,EAAS,IAAIC,YAAYC,aAAaC,mBACtCC,EAAO,IAAIC,SAASL,UAC1BI,EAAKE,WAAW,EAAGP,GAAG,GACfK,EAAKG,YAAY,GAAG,GAG7B,SAASC,EAAyBC,UAC5BA,EAAM,GACAA,EAAMC,OAAO,GAEhBD,WAGOE,EAAYC,EAAWC,MAEjCD,IAAMC,SACDH,OAAO,OAGVI,EAAUN,EAAyBV,EAAkBc,IACrDG,EAAUP,EAAyBV,EAAkBe,WAEpDC,GAAWC,EAAUD,EAAUC,EAAUA,EAAUD,qHAG7BF,EAAWC,EAAWG,UAC/CC,OAAOC,MAAMN,KAAMK,OAAOC,MAAML,IAI7BF,EAAYC,EAAGC,IAAMH,OAAOM,oDAGZJ,EAAWC,UAC9BI,OAAOC,MAAMN,KAAMK,OAAOC,MAAML,IAI7BF,EAAYC,EAAGC,KAAOH,OAAO"}