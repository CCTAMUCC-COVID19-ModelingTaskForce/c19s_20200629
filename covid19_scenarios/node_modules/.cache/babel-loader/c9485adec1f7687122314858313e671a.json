{"ast":null,"code":"import { call, cancelled, put } from 'redux-saga/effects';\n\n/**\n * Produces a saga that wraps an original worker saga, into a common usage\n * pattern typical for asynchronous operations, with FSA-compliant actions.\n *\n * @description Accepts a saga (\"worker\") and a `typescript-fsa`\n * \"asynchronous action creators\" object (containing action creators 'started',\n * 'done' and 'failed', each adhering to FSA standard)\n * and produces another saga which organizes actions around the worker\n * call. Before running the worker, our wrapper will first dispatch the\n * 'started' action. If worker yields a successful result, then 'done'\n * action is dispatched. Otherwise (if worker fails or cancelled), 'failed'\n * action is dispatched.\n *\n * TODO: make it more type-safe: replace `any` with strict types,\n *  add explicit return types\n *\n * @see https://github.com/redux-utilities/flux-standard-action\n *\n * @param asyncActionCreators\n * @param worker\n */\nexport default function fsaSaga( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nasyncActionCreators, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nworker) {\n  return Object.defineProperty(function* wrappedSaga(action) {\n    const params = action.payload; // Dispatch \"started\" action\n\n    yield Object.defineProperty(put(asyncActionCreators.started(params)), \"@@redux-saga/LOCATION\", {\n      value: {\n        fileName: \"src/state/util/fsaSaga.ts\",\n        lineNumber: 36,\n        code: \"put(asyncActionCreators.started(params))\"\n      }\n    });\n\n    try {\n      // Call worker\n      const result = yield Object.defineProperty(call(worker, params), \"@@redux-saga/LOCATION\", {\n        value: {\n          fileName: \"src/state/util/fsaSaga.ts\",\n          lineNumber: 40,\n          code: \"call(worker, params)\"\n        }\n      }); // Worker suceeded. dispatch \"done\" action with results\n\n      yield Object.defineProperty(put(asyncActionCreators.done({\n        params,\n        result\n      })), \"@@redux-saga/LOCATION\", {\n        value: {\n          fileName: \"src/state/util/fsaSaga.ts\",\n          lineNumber: 43,\n          code: \"put(asyncActionCreators.done({ params, result }))\"\n        }\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        // Worker has failed. Dispatch \"failed\" action with the error.\n        yield Object.defineProperty(put(asyncActionCreators.failed({\n          params,\n          error: {\n            error\n          }\n        })), \"@@redux-saga/LOCATION\", {\n          value: {\n            fileName: \"src/state/util/fsaSaga.ts\",\n            lineNumber: 47,\n            code: \"put(asyncActionCreators.failed({ params, error: { error } }))\"\n          }\n        });\n      } else {\n        throw error;\n      }\n    } finally {\n      // Worker was cancelled (e.g. manually or as a result of take*).\n      // Dispatch \"failed\" action with the special error value.\n      if (yield Object.defineProperty(cancelled(), \"@@redux-saga/LOCATION\", {\n        value: {\n          fileName: \"src/state/util/fsaSaga.ts\",\n          lineNumber: 54,\n          code: \"cancelled()\"\n        }\n      })) {\n        yield Object.defineProperty(put(asyncActionCreators.failed({\n          params,\n          error: {\n            error: 'cancelled'\n          }\n        })), \"@@redux-saga/LOCATION\", {\n          value: {\n            fileName: \"src/state/util/fsaSaga.ts\",\n            lineNumber: 55,\n            code: \"put(asyncActionCreators.failed({ params, error: { error: 'cancelled' } }))\"\n          }\n        });\n      }\n    }\n  }, \"@@redux-saga/LOCATION\", {\n    value: {\n      fileName: \"src/state/util/fsaSaga.ts\",\n      lineNumber: 32,\n      code: \"function* wrappedSaga(action: Action<Params>): SagaIterator {\\n    const params = action.payload\\n\\n    // Dispatch \\\"started\\\" action\\n    yield put(asyncActionCreators.started(params))\\n\\n    try {\\n      // Call worker\\n      const result = ((yield call(worker, params)) as unknown) as Result\\n\\n      // Worker suceeded. dispatch \\\"done\\\" action with results\\n      yield put(asyncActionCreators.done({ params, result }))\\n    } catch (error) {\\n      if (error instanceof Error) {\\n        // Worker has failed. Dispatch \\\"failed\\\" action with the error.\\n        yield put(asyncActionCreators.failed({ params, error: { error } }))\\n      } else {\\n        throw error\\n      }\\n    } finally {\\n      // Worker was cancelled (e.g. manually or as a result of take*).\\n      // Dispatch \\\"failed\\\" action with the special error value.\\n      if (yield cancelled()) {\\n        yield put(asyncActionCreators.failed({ params, error: { error: 'cancelled' } }))\\n      }\\n    }\\n  }\"\n    }\n  });\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/state/util/fsaSaga.ts"],"names":["call","cancelled","put","fsaSaga","asyncActionCreators","worker","wrappedSaga","action","params","payload","started","result","done","error","Error","failed"],"mappings":"AACA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,QAAqC,oBAArC;;AAGA;;;;;;;;;;;;;;;;;;;;;AAqBA,eAAe,SAASC,OAAT,EACb;AACAC,mBAFa,EAGb;AACAC,MAJa,EAKb;AACA,+BAAO,UAAUC,WAAV,CAAsBC,MAAtB,EAA4D;AACjE,UAAMC,MAAM,GAAGD,MAAM,CAACE,OAAtB,CADiE,CAGjE;;AACA,gCAAMP,GAAG,CAACE,mBAAmB,CAACM,OAApB,CAA4BF,MAA5B,CAAD,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAI;AACF;AACA,YAAMG,MAAM,GAAK,4BAAMX,IAAI,CAACK,MAAD,EAASG,MAAT,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAjB,CAFE,CAIF;;AACA,kCAAMN,GAAG,CAACE,mBAAmB,CAACQ,IAApB,CAAyB;AAAEJ,QAAAA,MAAF;AAAUG,QAAAA;AAAV,OAAzB,CAAD,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,KAND,CAME,OAAOE,KAAP,EAAc;AACd,UAAIA,KAAK,YAAYC,KAArB,EAA4B;AAC1B;AACA,oCAAMZ,GAAG,CAACE,mBAAmB,CAACW,MAApB,CAA2B;AAAEP,UAAAA,MAAF;AAAUK,UAAAA,KAAK,EAAE;AAAEA,YAAAA;AAAF;AAAjB,SAA3B,CAAD,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,OAHD,MAGO;AACL,cAAMA,KAAN;AACD;AACF,KAbD,SAaU;AACR;AACA;AACA,UAAI,4BAAMZ,SAAS,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAJ,EAAuB;AACrB,oCAAMC,GAAG,CAACE,mBAAmB,CAACW,MAApB,CAA2B;AAAEP,UAAAA,MAAF;AAAUK,UAAAA,KAAK,EAAE;AAAEA,YAAAA,KAAK,EAAE;AAAT;AAAjB,SAA3B,CAAD,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;AACF;AACF,GA1BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BD","sourcesContent":["import { SagaIterator } from 'redux-saga'\nimport { call, cancelled, put } from 'redux-saga/effects'\nimport { Action, AsyncActionCreators } from 'typescript-fsa'\n\n/**\n * Produces a saga that wraps an original worker saga, into a common usage\n * pattern typical for asynchronous operations, with FSA-compliant actions.\n *\n * @description Accepts a saga (\"worker\") and a `typescript-fsa`\n * \"asynchronous action creators\" object (containing action creators 'started',\n * 'done' and 'failed', each adhering to FSA standard)\n * and produces another saga which organizes actions around the worker\n * call. Before running the worker, our wrapper will first dispatch the\n * 'started' action. If worker yields a successful result, then 'done'\n * action is dispatched. Otherwise (if worker fails or cancelled), 'failed'\n * action is dispatched.\n *\n * TODO: make it more type-safe: replace `any` with strict types,\n *  add explicit return types\n *\n * @see https://github.com/redux-utilities/flux-standard-action\n *\n * @param asyncActionCreators\n * @param worker\n */\nexport default function fsaSaga<Params, Result>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  asyncActionCreators: AsyncActionCreators<Params, Result, any>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  worker: (params: Params) => any,\n) {\n  return function* wrappedSaga(action: Action<Params>): SagaIterator {\n    const params = action.payload\n\n    // Dispatch \"started\" action\n    yield put(asyncActionCreators.started(params))\n\n    try {\n      // Call worker\n      const result = ((yield call(worker, params)) as unknown) as Result\n\n      // Worker suceeded. dispatch \"done\" action with results\n      yield put(asyncActionCreators.done({ params, result }))\n    } catch (error) {\n      if (error instanceof Error) {\n        // Worker has failed. Dispatch \"failed\" action with the error.\n        yield put(asyncActionCreators.failed({ params, error: { error } }))\n      } else {\n        throw error\n      }\n    } finally {\n      // Worker was cancelled (e.g. manually or as a result of take*).\n      // Dispatch \"failed\" action with the special error value.\n      if (yield cancelled()) {\n        yield put(asyncActionCreators.failed({ params, error: { error: 'cancelled' } }))\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}