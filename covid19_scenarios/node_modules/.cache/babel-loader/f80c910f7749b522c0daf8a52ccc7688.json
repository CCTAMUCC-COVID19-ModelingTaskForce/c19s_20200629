{"ast":null,"code":"import { verifyPositive, verifyTuple } from '../components/Main/Results/Utils'; // import { linesToPlot, areasToPlot, DATA_POINTS } from '../components/Main/Results/ChartCommon'\n\nexport function preparePlotData(trajectory) {\n  const {\n    lower,\n    middle,\n    upper\n  } = trajectory;\n  return middle.map((x, day) => {\n    return {\n      time: x.time,\n      lines: {\n        susceptible: verifyPositive(x.current.susceptible.total),\n        infectious: verifyPositive(x.current.infectious.total),\n        severe: verifyPositive(x.current.severe.total),\n        critical: verifyPositive(x.current.critical.total),\n        overflow: verifyPositive(x.current.overflow.total),\n        recovered: verifyPositive(x.cumulative.recovered.total),\n        fatality: verifyPositive(x.cumulative.fatality.total),\n        weeklyFatality: verifyPositive(x.current.weeklyFatality.total)\n      },\n      // Error bars\n      areas: {\n        susceptible: verifyTuple([verifyPositive(lower[day].current.susceptible.total), verifyPositive(upper[day].current.susceptible.total)], x.current.susceptible.total),\n        infectious: verifyTuple([verifyPositive(lower[day].current.infectious.total), verifyPositive(upper[day].current.infectious.total)], x.current.infectious.total),\n        severe: verifyTuple([verifyPositive(lower[day].current.severe.total), verifyPositive(upper[day].current.severe.total)], x.current.severe.total),\n        critical: verifyTuple([verifyPositive(lower[day].current.critical.total), verifyPositive(upper[day].current.critical.total)], x.current.critical.total),\n        overflow: verifyTuple([verifyPositive(lower[day].current.overflow.total), verifyPositive(upper[day].current.overflow.total)], x.current.overflow.total),\n        recovered: verifyTuple([verifyPositive(lower[day].cumulative.recovered.total), verifyPositive(upper[day].cumulative.recovered.total)], x.cumulative.recovered.total),\n        fatality: verifyTuple([verifyPositive(lower[day].cumulative.fatality.total), verifyPositive(upper[day].cumulative.fatality.total)], x.cumulative.fatality.total),\n        weeklyFatality: verifyTuple([verifyPositive(lower[day].current.weeklyFatality.total), verifyPositive(upper[day].current.weeklyFatality.total)], x.current.weeklyFatality.total)\n      }\n    };\n  });\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/algorithms/preparePlotData.ts"],"names":["verifyPositive","verifyTuple","preparePlotData","trajectory","lower","middle","upper","map","x","day","time","lines","susceptible","current","total","infectious","severe","critical","overflow","recovered","cumulative","fatality","weeklyFatality","areas"],"mappings":"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","sourcesContent":["import type { Trajectory, PlotDatum } from './types/Result.types'\nimport { verifyPositive, verifyTuple } from '../components/Main/Results/Utils'\n// import { linesToPlot, areasToPlot, DATA_POINTS } from '../components/Main/Results/ChartCommon'\n\nexport function preparePlotData(trajectory: Trajectory): PlotDatum[] {\n  const { lower, middle, upper } = trajectory\n  return middle.map((x, day) => {\n    return {\n      time: x.time,\n      lines: {\n        susceptible: verifyPositive(x.current.susceptible.total),\n        infectious: verifyPositive(x.current.infectious.total),\n        severe: verifyPositive(x.current.severe.total),\n        critical: verifyPositive(x.current.critical.total),\n        overflow: verifyPositive(x.current.overflow.total),\n        recovered: verifyPositive(x.cumulative.recovered.total),\n        fatality: verifyPositive(x.cumulative.fatality.total),\n        weeklyFatality: verifyPositive(x.current.weeklyFatality.total),\n      },\n      // Error bars\n      areas: {\n        susceptible: verifyTuple(\n          [verifyPositive(lower[day].current.susceptible.total), verifyPositive(upper[day].current.susceptible.total)],\n          x.current.susceptible.total,\n        ),\n        infectious: verifyTuple(\n          [verifyPositive(lower[day].current.infectious.total), verifyPositive(upper[day].current.infectious.total)],\n          x.current.infectious.total,\n        ),\n        severe: verifyTuple(\n          [verifyPositive(lower[day].current.severe.total), verifyPositive(upper[day].current.severe.total)],\n          x.current.severe.total,\n        ),\n        critical: verifyTuple(\n          [verifyPositive(lower[day].current.critical.total), verifyPositive(upper[day].current.critical.total)],\n          x.current.critical.total,\n        ),\n        overflow: verifyTuple(\n          [verifyPositive(lower[day].current.overflow.total), verifyPositive(upper[day].current.overflow.total)],\n          x.current.overflow.total,\n        ),\n        recovered: verifyTuple(\n          [\n            verifyPositive(lower[day].cumulative.recovered.total),\n            verifyPositive(upper[day].cumulative.recovered.total),\n          ],\n          x.cumulative.recovered.total,\n        ),\n        fatality: verifyTuple(\n          [verifyPositive(lower[day].cumulative.fatality.total), verifyPositive(upper[day].cumulative.fatality.total)],\n          x.cumulative.fatality.total,\n        ),\n        weeklyFatality: verifyTuple(\n          [\n            verifyPositive(lower[day].current.weeklyFatality.total),\n            verifyPositive(upper[day].current.weeklyFatality.total),\n          ],\n          x.current.weeklyFatality.total,\n        ),\n      },\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}