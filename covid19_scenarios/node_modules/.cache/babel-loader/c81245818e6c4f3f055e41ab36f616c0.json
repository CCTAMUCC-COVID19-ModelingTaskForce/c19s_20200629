{"ast":null,"code":"export class FileReaderError extends Error {\n  constructor(file) {\n    super(`Error: file \"${file.name}\" cannot be read.`);\n    this.file = file;\n  }\n\n}\nexport function readFile(file) {\n  const reader = new FileReader();\n  return new Promise((resolve, reject) => {\n    reader.addEventListener('error', () => {\n      reader.abort();\n      reject(new FileReaderError(file));\n    });\n    reader.addEventListener('load', () => {\n      var _reader$result, _reader$result$toStri;\n\n      const content = (_reader$result = reader.result) === null || _reader$result === void 0 ? void 0 : (_reader$result$toStri = _reader$result.toString) === null || _reader$result$toStri === void 0 ? void 0 : _reader$result$toStri.call(_reader$result);\n\n      if (content) {\n        resolve(content);\n      } else {\n        reject(new FileReaderError(file));\n      }\n    });\n    reader.readAsText(file);\n  });\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/helpers/readFile.ts"],"names":["FileReaderError","Error","constructor","file","name","readFile","reader","FileReader","Promise","resolve","reject","addEventListener","abort","content","result","toString","readAsText"],"mappings":"AAAA,OAAO,MAAMA,eAAN,SAA8BC,KAA9B,CAAoC;AAEzCC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACtB,UAAO,gBAAeA,IAAI,CAACC,IAAK,mBAAhC;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACD;;AALwC;AAQ3C,OAAO,SAASE,QAAT,CAAkBF,IAAlB,EAA+C;AACpD,QAAMG,MAAM,GAAG,IAAIC,UAAJ,EAAf;AAEA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCJ,IAAAA,MAAM,CAACK,gBAAP,CAAwB,OAAxB,EAAiC,MAAM;AACrCL,MAAAA,MAAM,CAACM,KAAP;AACAF,MAAAA,MAAM,CAAC,IAAIV,eAAJ,CAAoBG,IAApB,CAAD,CAAN;AACD,KAHD;AAKAG,IAAAA,MAAM,CAACK,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AAAA;;AACpC,YAAME,OAAO,qBAAGP,MAAM,CAACQ,MAAV,4EAAG,eAAeC,QAAlB,0DAAG,0CAAhB;;AACA,UAAIF,OAAJ,EAAa;AACXJ,QAAAA,OAAO,CAACI,OAAD,CAAP;AACD,OAFD,MAEO;AACLH,QAAAA,MAAM,CAAC,IAAIV,eAAJ,CAAoBG,IAApB,CAAD,CAAN;AACD;AACF,KAPD;AASAG,IAAAA,MAAM,CAACU,UAAP,CAAkBb,IAAlB;AACD,GAhBM,CAAP;AAiBD","sourcesContent":["export class FileReaderError extends Error {\n  public readonly file: File\n  constructor(file: File) {\n    super(`Error: file \"${file.name}\" cannot be read.`)\n    this.file = file\n  }\n}\n\nexport function readFile(file: File): Promise<string> {\n  const reader = new FileReader()\n\n  return new Promise((resolve, reject) => {\n    reader.addEventListener('error', () => {\n      reader.abort()\n      reject(new FileReaderError(file))\n    })\n\n    reader.addEventListener('load', () => {\n      const content = reader.result?.toString?.()\n      if (content) {\n        resolve(content)\n      } else {\n        reject(new FileReaderError(file))\n      }\n    })\n\n    reader.readAsText(file)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}