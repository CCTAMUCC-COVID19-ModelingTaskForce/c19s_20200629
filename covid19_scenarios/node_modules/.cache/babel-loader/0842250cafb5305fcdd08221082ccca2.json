{"ast":null,"code":"import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport immerCase from '../util/fsaImmerReducer';\nimport { algorithmRunAsync } from './algorithm.actions';\nimport { defaultAlgorithmState } from './algorithm.state';\nexport const algorithmReducer = reducerWithInitialState(defaultAlgorithmState) // prettier-ignore\n.withHandling(immerCase(algorithmRunAsync.started, draft => {\n  draft.isRunning = true;\n})).withHandling(immerCase(algorithmRunAsync.done, (draft, {\n  result\n}) => {\n  draft.isRunning = false;\n  draft.result = result.result;\n})).withHandling(immerCase(algorithmRunAsync.failed, draft => {\n  draft.isRunning = false;\n}));","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/state/algorithm/algorithm.reducer.ts"],"names":["reducerWithInitialState","immerCase","algorithmRunAsync","defaultAlgorithmState","algorithmReducer","withHandling","started","draft","isRunning","done","result","failed"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,yBAAxC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AAEA,OAAO,MAAMC,gBAAgB,GAAGJ,uBAAuB,CAACG,qBAAD,CAAvB,CAA+C;AAA/C,CAC7BE,YAD6B,CAE5BJ,SAAS,CAACC,iBAAiB,CAACI,OAAnB,EAA6BC,KAAD,IAAW;AAC9CA,EAAAA,KAAK,CAACC,SAAN,GAAkB,IAAlB;AACD,CAFQ,CAFmB,EAO7BH,YAP6B,CAQ5BJ,SAAS,CAACC,iBAAiB,CAACO,IAAnB,EAAyB,CAACF,KAAD,EAAQ;AAAEG,EAAAA;AAAF,CAAR,KAAuB;AACvDH,EAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACAD,EAAAA,KAAK,CAACG,MAAN,GAAeA,MAAM,CAACA,MAAtB;AACD,CAHQ,CARmB,EAc7BL,YAd6B,CAe5BJ,SAAS,CAACC,iBAAiB,CAACS,MAAnB,EAA4BJ,KAAD,IAAW;AAC7CA,EAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACD,CAFQ,CAfmB,CAAzB","sourcesContent":["import { reducerWithInitialState } from 'typescript-fsa-reducers'\n\nimport immerCase from '../util/fsaImmerReducer'\nimport { algorithmRunAsync } from './algorithm.actions'\nimport { defaultAlgorithmState } from './algorithm.state'\n\nexport const algorithmReducer = reducerWithInitialState(defaultAlgorithmState) // prettier-ignore\n  .withHandling(\n    immerCase(algorithmRunAsync.started, (draft) => {\n      draft.isRunning = true\n    }),\n  )\n\n  .withHandling(\n    immerCase(algorithmRunAsync.done, (draft, { result }) => {\n      draft.isRunning = false\n      draft.result = result.result\n    }),\n  )\n\n  .withHandling(\n    immerCase(algorithmRunAsync.failed, (draft) => {\n      draft.isRunning = false\n    }),\n  )\n"]},"metadata":{},"sourceType":"module"}