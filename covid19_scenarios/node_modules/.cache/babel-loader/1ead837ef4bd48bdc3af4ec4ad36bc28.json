{"ast":null,"code":"import _head from \"lodash/head\";\nimport queryString from 'query-string';\nimport { ErrorURLDecoderVersionInvalid } from './errors';\nimport { URL_ENCODER_VERSIONS, URL_ENCODERS } from './versioning';\nexport function first(a) {\n  return Array.isArray(a) ? _head(a) : a;\n}\nexport function decode(url) {\n  const params = queryString.parse(url);\n  const v = first(params === null || params === void 0 ? void 0 : params.v);\n  const q = first(params === null || params === void 0 ? void 0 : params.q);\n\n  if (!q) {\n    return null;\n  }\n\n  if (v) {\n    var _URL_ENCODERS$get;\n\n    const decodeVersioned = (_URL_ENCODERS$get = URL_ENCODERS.get(v)) === null || _URL_ENCODERS$get === void 0 ? void 0 : _URL_ENCODERS$get.decode;\n\n    if (!decodeVersioned) {\n      throw new ErrorURLDecoderVersionInvalid(v, URL_ENCODER_VERSIONS);\n    }\n\n    return decodeVersioned(q);\n  }\n\n  throw new ErrorURLDecoderVersionInvalid('Not provided', URL_ENCODER_VERSIONS);\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/io/encoding/decode.ts"],"names":["queryString","ErrorURLDecoderVersionInvalid","URL_ENCODER_VERSIONS","URL_ENCODERS","first","a","Array","isArray","decode","url","params","parse","v","q","decodeVersioned","get"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,cAAxB;AAIA,SAASC,6BAAT,QAA8C,UAA9C;AACA,SAASC,oBAAT,EAA+BC,YAA/B,QAAmD,cAAnD;AAEA,OAAO,SAASC,KAAT,CAAkBC,CAAlB,EAA8B;AACnC,SAAOC,KAAK,CAACC,OAAN,CAAcF,CAAd,IAAmB,MAAKA,CAAL,CAAnB,GAA6BA,CAApC;AACD;AAED,OAAO,SAASG,MAAT,CAAgBC,GAAhB,EAA6B;AAClC,QAAMC,MAAM,GAAGV,WAAW,CAACW,KAAZ,CAAkBF,GAAlB,CAAf;AACA,QAAMG,CAAC,GAAGR,KAAK,CAACM,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEE,CAAT,CAAf;AACA,QAAMC,CAAC,GAAGT,KAAK,CAACM,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEG,CAAT,CAAf;;AAEA,MAAI,CAACA,CAAL,EAAQ;AACN,WAAO,IAAP;AACD;;AAED,MAAID,CAAJ,EAAO;AAAA;;AACL,UAAME,eAAe,wBAAGX,YAAY,CAACY,GAAb,CAAiBH,CAAjB,CAAH,sDAAG,kBAAqBJ,MAA7C;;AACA,QAAI,CAACM,eAAL,EAAsB;AACpB,YAAM,IAAIb,6BAAJ,CAAkCW,CAAlC,EAAqCV,oBAArC,CAAN;AACD;;AACD,WAAOY,eAAe,CAACD,CAAD,CAAtB;AACD;;AAED,QAAM,IAAIZ,6BAAJ,CAAkC,cAAlC,EAAkDC,oBAAlD,CAAN;AACD","sourcesContent":["import queryString from 'query-string'\n\nimport { head } from 'lodash'\n\nimport { ErrorURLDecoderVersionInvalid } from './errors'\nimport { URL_ENCODER_VERSIONS, URL_ENCODERS } from './versioning'\n\nexport function first<T>(a: T | T[]) {\n  return Array.isArray(a) ? head(a) : a\n}\n\nexport function decode(url: string) {\n  const params = queryString.parse(url)\n  const v = first(params?.v)\n  const q = first(params?.q)\n\n  if (!q) {\n    return null\n  }\n\n  if (v) {\n    const decodeVersioned = URL_ENCODERS.get(v)?.decode\n    if (!decodeVersioned) {\n      throw new ErrorURLDecoderVersionInvalid(v, URL_ENCODER_VERSIONS)\n    }\n    return decodeVersioned(q)\n  }\n\n  throw new ErrorURLDecoderVersionInvalid('Not provided', URL_ENCODER_VERSIONS)\n}\n"]},"metadata":{},"sourceType":"module"}