{"ast":null,"code":"import { appendDash } from '../../helpers/appendDash';\nimport { ErrorArray } from '../../helpers/ErrorArray';\nexport class DeserializationError extends ErrorArray {}\nexport class DeserializationErrorJsonSyntaxInvalid extends DeserializationError {\n  constructor(syntaxErrorMessage) {\n    const error = `invalid JSON syntax: '${syntaxErrorMessage}'`;\n    super(`when deserializing: ${error}`);\n    this.errors = [error];\n  }\n\n}\nexport class DeserializationErrorSchemaVersionMissing extends DeserializationError {\n  constructor() {\n    const error = `\\`schemaVer\\` is missing`;\n    super(`when deserializing: ${error}`);\n    this.errors = [error];\n  }\n\n}\nexport class DeserializationErrorSchemaVersionInvalid extends DeserializationError {\n  constructor(schemaVer, schemaVersions) {\n    const error = `expected \\`schemaVer\\` to be one of \\`[${schemaVersions === null || schemaVersions === void 0 ? void 0 : schemaVersions.join(', ')}]\\`, but received: ${schemaVer}`;\n    super(`when deserializing: ${error}`);\n    this.schemaVer = schemaVer;\n    this.errors = [error];\n  }\n\n}\nexport class DeserializationErrorValidationFailed extends DeserializationError {\n  constructor(errors) {\n    super(`when deserializing: validation failed:\\n${errors.map(appendDash).join('\\n')}`);\n    this.errors = errors;\n  }\n\n}\nexport class DeserializationErrorConversionFailed extends DeserializationError {\n  constructor(conversionError) {\n    let error = `conversion failed`;\n\n    if (conversionError) {\n      error = `${error}: ${conversionError}`;\n    }\n\n    super(`when deserializing: ${error}`);\n    this.errors = [error];\n  }\n\n}\nexport class SerializationError extends ErrorArray {}\nexport class SerializationErrorSchemaVersionNotLatest extends SerializationError {\n  constructor(schemaVer, schemaVersions) {\n    const error = `when serializing: expected \\`schemaVer\\` to be the latest among \\`[${schemaVersions.join(', ')}]\\`, but received: ${schemaVer}`; // prettier-ignore\n\n    super(`when serializing: ${error}`);\n    this.schemaVer = schemaVer;\n    this.errors = [error];\n  }\n\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/io/serialization/errors.ts"],"names":["appendDash","ErrorArray","DeserializationError","DeserializationErrorJsonSyntaxInvalid","constructor","syntaxErrorMessage","error","errors","DeserializationErrorSchemaVersionMissing","DeserializationErrorSchemaVersionInvalid","schemaVer","schemaVersions","join","DeserializationErrorValidationFailed","map","DeserializationErrorConversionFailed","conversionError","SerializationError","SerializationErrorSchemaVersionNotLatest"],"mappings":"AAAA,SAASA,UAAT,QAA2B,0BAA3B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,OAAO,MAAMC,oBAAN,SAAmCD,UAAnC,CAA8C;AAIrD,OAAO,MAAME,qCAAN,SAAoDD,oBAApD,CAAyE;AAGvEE,EAAAA,WAAP,CAAmBC,kBAAnB,EAA+C;AAC7C,UAAMC,KAAK,GAAI,yBAAwBD,kBAAmB,GAA1D;AACA,UAAO,uBAAsBC,KAAM,EAAnC;AACA,SAAKC,MAAL,GAAc,CAACD,KAAD,CAAd;AACD;;AAP6E;AAUhF,OAAO,MAAME,wCAAN,SAAuDN,oBAAvD,CAA4E;AAG1EE,EAAAA,WAAP,GAAqB;AACnB,UAAME,KAAK,GAAI,0BAAf;AACA,UAAO,uBAAsBA,KAAM,EAAnC;AACA,SAAKC,MAAL,GAAc,CAACD,KAAD,CAAd;AACD;;AAPgF;AAUnF,OAAO,MAAMG,wCAAN,SAAuDP,oBAAvD,CAA4E;AAI1EE,EAAAA,WAAP,CAAmBM,SAAnB,EAAsCC,cAAtC,EAAgE;AAC9D,UAAML,KAAK,GAAI,0CAAyCK,cAA1C,aAA0CA,cAA1C,uBAA0CA,cAAc,CAAEC,IAAhB,CAAqB,IAArB,CAA2B,sBAAqBF,SAAU,EAAlH;AACA,UAAO,uBAAsBJ,KAAM,EAAnC;AACA,SAAKI,SAAL,GAAiBA,SAAjB;AACA,SAAKH,MAAL,GAAc,CAACD,KAAD,CAAd;AACD;;AATgF;AAYnF,OAAO,MAAMO,oCAAN,SAAmDX,oBAAnD,CAAwE;AAGtEE,EAAAA,WAAP,CAAmBG,MAAnB,EAAqC;AACnC,UAAO,2CAA0CA,MAAM,CAACO,GAAP,CAAWd,UAAX,EAAuBY,IAAvB,CAA4B,IAA5B,CAAkC,EAAnF;AACA,SAAKL,MAAL,GAAcA,MAAd;AACD;;AAN4E;AAS/E,OAAO,MAAMQ,oCAAN,SAAmDb,oBAAnD,CAAwE;AAGtEE,EAAAA,WAAP,CAAmBY,eAAnB,EAA6C;AAC3C,QAAIV,KAAK,GAAI,mBAAb;;AACA,QAAIU,eAAJ,EAAqB;AACnBV,MAAAA,KAAK,GAAI,GAAEA,KAAM,KAAIU,eAAgB,EAArC;AACD;;AACD,UAAO,uBAAsBV,KAAM,EAAnC;AACA,SAAKC,MAAL,GAAc,CAACD,KAAD,CAAd;AACD;;AAV4E;AAa/E,OAAO,MAAMW,kBAAN,SAAiChB,UAAjC,CAA4C;AAEnD,OAAO,MAAMiB,wCAAN,SAAuDD,kBAAvD,CAA0E;AAIxEb,EAAAA,WAAP,CAAmBM,SAAnB,EAAsCC,cAAtC,EAAgE;AAC9D,UAAML,KAAK,GAAI,sEAAqEK,cAAc,CAACC,IAAf,CAAoB,IAApB,CAA0B,sBAAqBF,SAAU,EAA7I,CAD8D,CACiF;;AAC/I,UAAO,qBAAoBJ,KAAM,EAAjC;AACA,SAAKI,SAAL,GAAiBA,SAAjB;AACA,SAAKH,MAAL,GAAc,CAACD,KAAD,CAAd;AACD;;AAT8E","sourcesContent":["import { appendDash } from '../../helpers/appendDash'\nimport { ErrorArray } from '../../helpers/ErrorArray'\n\nexport class DeserializationError extends ErrorArray {\n  public readonly errors?: string[]\n}\n\nexport class DeserializationErrorJsonSyntaxInvalid extends DeserializationError {\n  public readonly errors?: string[]\n\n  public constructor(syntaxErrorMessage: string) {\n    const error = `invalid JSON syntax: '${syntaxErrorMessage}'`\n    super(`when deserializing: ${error}`)\n    this.errors = [error]\n  }\n}\n\nexport class DeserializationErrorSchemaVersionMissing extends DeserializationError {\n  public readonly errors?: string[]\n\n  public constructor() {\n    const error = `\\`schemaVer\\` is missing`\n    super(`when deserializing: ${error}`)\n    this.errors = [error]\n  }\n}\n\nexport class DeserializationErrorSchemaVersionInvalid extends DeserializationError {\n  public readonly schemaVer: string\n  public readonly errors: string[]\n\n  public constructor(schemaVer: string, schemaVersions: string[]) {\n    const error = `expected \\`schemaVer\\` to be one of \\`[${schemaVersions?.join(', ')}]\\`, but received: ${schemaVer}`\n    super(`when deserializing: ${error}`)\n    this.schemaVer = schemaVer\n    this.errors = [error]\n  }\n}\n\nexport class DeserializationErrorValidationFailed extends DeserializationError {\n  public errors: string[]\n\n  public constructor(errors: string[]) {\n    super(`when deserializing: validation failed:\\n${errors.map(appendDash).join('\\n')}`)\n    this.errors = errors\n  }\n}\n\nexport class DeserializationErrorConversionFailed extends DeserializationError {\n  public errors?: string[]\n\n  public constructor(conversionError?: string) {\n    let error = `conversion failed`\n    if (conversionError) {\n      error = `${error}: ${conversionError}`\n    }\n    super(`when deserializing: ${error}`)\n    this.errors = [error]\n  }\n}\n\nexport class SerializationError extends ErrorArray {}\n\nexport class SerializationErrorSchemaVersionNotLatest extends SerializationError {\n  public schemaVer: string\n  public errors: string[]\n\n  public constructor(schemaVer: string, schemaVersions: string[]) {\n    const error = `when serializing: expected \\`schemaVer\\` to be the latest among \\`[${schemaVersions.join(', ')}]\\`, but received: ${schemaVer}` // prettier-ignore\n    super(`when serializing: ${error}`)\n    this.schemaVer = schemaVer\n    this.errors = [error]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}