{"ast":null,"code":"export function verifyPositive(x) {\n  const xRounded = Math.round(x);\n  return xRounded > 0 ? xRounded : undefined;\n}\nexport function verifyTuple(x, center) {\n  const centerVal = center ? verifyPositive(center) : undefined;\n\n  if (x[0] !== undefined && x[1] !== undefined && centerVal !== undefined) {\n    return [x[0] < centerVal ? x[0] : centerVal, x[1] > centerVal ? x[1] : centerVal];\n  }\n\n  if (x[0] !== undefined && x[1] !== undefined) {\n    return [x[0], x[1]];\n  }\n\n  if (x[0] === undefined && x[1] !== undefined && centerVal !== undefined) {\n    return [0.0001, x[1] > centerVal ? x[1] : centerVal];\n  }\n\n  if (x[0] === undefined && x[1] !== undefined) {\n    return [0.0001, x[1]];\n  }\n\n  return undefined;\n}\nexport function computeNewEmpiricalCases(timeWindow, field, cumulativeCounts) {\n  const newEmpiricalCases = [];\n  const deltaDay = Math.floor(timeWindow);\n  const deltaInt = timeWindow - deltaDay;\n\n  if (!cumulativeCounts) {\n    return [newEmpiricalCases, deltaDay];\n  }\n\n  cumulativeCounts.forEach((_0, day) => {\n    if (day < deltaDay) {\n      newEmpiricalCases[day] = undefined;\n      return;\n    }\n\n    const startDay = day - deltaDay;\n    const startDayPlus = day - deltaDay - 1;\n    const nowCases = cumulativeCounts[day][field];\n    const oldCases = cumulativeCounts[startDay][field];\n    const olderCases = cumulativeCounts[startDayPlus] ? cumulativeCounts[startDayPlus][field] : undefined;\n\n    if (oldCases && nowCases) {\n      const newCases = verifyPositive(olderCases ? (1 - deltaInt) * (nowCases - oldCases) + deltaInt * (nowCases - olderCases) : nowCases - oldCases);\n      newEmpiricalCases[day] = newCases;\n      return;\n    }\n\n    newEmpiricalCases[day] = undefined;\n  });\n  return [newEmpiricalCases, deltaDay];\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Results/Utils.ts"],"names":["verifyPositive","x","xRounded","Math","round","undefined","verifyTuple","center","centerVal","computeNewEmpiricalCases","timeWindow","field","cumulativeCounts","newEmpiricalCases","deltaDay","floor","deltaInt","forEach","_0","day","startDay","startDayPlus","nowCases","oldCases","olderCases","newCases"],"mappings":"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","sourcesContent":["import type { CaseCountsDatum } from '../../../algorithms/types/Param.types'\n\nexport type maybeNumber = number | undefined\n\nexport function verifyPositive(x: number): maybeNumber {\n  const xRounded = Math.round(x)\n  return xRounded > 0 ? xRounded : undefined\n}\n\nexport function verifyTuple(x: [maybeNumber, maybeNumber], center: maybeNumber): [number, number] | undefined {\n  const centerVal = center ? verifyPositive(center) : undefined\n  if (x[0] !== undefined && x[1] !== undefined && centerVal !== undefined) {\n    return [x[0] < centerVal ? x[0] : centerVal, x[1] > centerVal ? x[1] : centerVal]\n  }\n  if (x[0] !== undefined && x[1] !== undefined) {\n    return [x[0], x[1]]\n  }\n  if (x[0] === undefined && x[1] !== undefined && centerVal !== undefined) {\n    return [0.0001, x[1] > centerVal ? x[1] : centerVal]\n  }\n  if (x[0] === undefined && x[1] !== undefined) {\n    return [0.0001, x[1]]\n  }\n\n  return undefined\n}\n\nexport function computeNewEmpiricalCases(\n  timeWindow: number,\n  field: string,\n  cumulativeCounts?: CaseCountsDatum[],\n): [maybeNumber[], number] {\n  const newEmpiricalCases: maybeNumber[] = []\n  const deltaDay = Math.floor(timeWindow)\n  const deltaInt = timeWindow - deltaDay\n\n  if (!cumulativeCounts) {\n    return [newEmpiricalCases, deltaDay]\n  }\n\n  cumulativeCounts.forEach((_0, day) => {\n    if (day < deltaDay) {\n      newEmpiricalCases[day] = undefined\n      return\n    }\n\n    const startDay = day - deltaDay\n    const startDayPlus = day - deltaDay - 1\n\n    const nowCases = cumulativeCounts[day][field]\n    const oldCases = cumulativeCounts[startDay][field]\n    const olderCases = cumulativeCounts[startDayPlus] ? cumulativeCounts[startDayPlus][field] : undefined\n    if (oldCases && nowCases) {\n      const newCases = verifyPositive(\n        olderCases ? (1 - deltaInt) * (nowCases - oldCases) + deltaInt * (nowCases - olderCases) : nowCases - oldCases,\n      )\n      newEmpiricalCases[day] = newCases\n      return\n    }\n    newEmpiricalCases[day] = undefined\n  })\n  return [newEmpiricalCases, deltaDay]\n}\n"]},"metadata":{},"sourceType":"module"}