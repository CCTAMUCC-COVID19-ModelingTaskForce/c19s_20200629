{"ast":null,"code":"import _pt from \"prop-types\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Controls/SettingsControls.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Col, Row } from 'reactstrap';\nimport { selectIsLogScale, selectShouldFormatNumbers, selectIsAutorunEnabled } from '../../../state/settings/settings.selectors';\nimport { setAutorun, setFormatNumbers, setLogScale } from '../../../state/settings/settings.actions';\nimport FormSwitch from '../../Form/FormSwitch';\n\nconst mapStateToProps = state => ({\n  isAutorunEnabled: selectIsAutorunEnabled(state),\n  isLogScale: selectIsLogScale(state),\n  shouldFormatNumbers: selectShouldFormatNumbers(state)\n});\n\nconst mapDispatchToProps = {\n  setAutorun,\n  setFormatNumbers,\n  setLogScale\n};\nexport function SettingsControlsDisconnected({\n  isAutorunEnabled,\n  isLogScale,\n  setAutorun,\n  setFormatNumbers,\n  setLogScale,\n  shouldFormatNumbers\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"mt-1 ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"d-flex flex-wrap my-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"mr-4 flex-1\",\n    \"data-testid\": \"AutorunSwitch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormSwitch, {\n    identifier: \"autorun\",\n    label: t('Run automatically'),\n    help: t('Run simulation automatically when any of the parameters change'),\n    checked: isAutorunEnabled,\n    onValueChanged: setAutorun,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"mr-4 flex-1\",\n    \"data-testid\": \"LogScaleSwitch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormSwitch, {\n    identifier: \"logScale\",\n    label: t('Log scale'),\n    help: t('Toggle between logarithmic and linear scale on vertical axis of the plot'),\n    checked: isLogScale,\n    onValueChanged: setLogScale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"flex-1\",\n    \"data-testid\": \"HumanizedValuesSwitch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormSwitch, {\n    identifier: \"showHumanized\",\n    label: t('Format numbers'),\n    help: t('Show numerical results in a human-friendly format'),\n    checked: shouldFormatNumbers,\n    onValueChanged: setFormatNumbers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_s(SettingsControlsDisconnected, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = SettingsControlsDisconnected;\nSettingsControlsDisconnected.propTypes = {\n  isAutorunEnabled: _pt.bool.isRequired,\n  isLogScale: _pt.bool.isRequired,\n  shouldFormatNumbers: _pt.bool.isRequired\n};\nconst SettingsControls = connect(mapStateToProps, mapDispatchToProps)(SettingsControlsDisconnected);\nexport { SettingsControls };\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsControlsDisconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Controls/SettingsControls.tsx"],"names":["React","useTranslation","connect","Col","Row","selectIsLogScale","selectShouldFormatNumbers","selectIsAutorunEnabled","setAutorun","setFormatNumbers","setLogScale","FormSwitch","mapStateToProps","state","isAutorunEnabled","isLogScale","shouldFormatNumbers","mapDispatchToProps","SettingsControlsDisconnected","t","SettingsControls"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { useTranslation } from 'react-i18next'\nimport { connect } from 'react-redux'\nimport { Col, Row } from 'reactstrap'\nimport { ActionCreator } from 'typescript-fsa'\n\nimport type { State } from '../../../state/reducer'\n\nimport {\n  selectIsLogScale,\n  selectShouldFormatNumbers,\n  selectIsAutorunEnabled,\n} from '../../../state/settings/settings.selectors'\n\nimport { setAutorun, setFormatNumbers, setLogScale } from '../../../state/settings/settings.actions'\n\nimport FormSwitch from '../../Form/FormSwitch'\n\nexport interface SettingsControlsProps {\n  isAutorunEnabled: boolean\n  isLogScale: boolean\n  setAutorun: ActionCreator<boolean>\n  setFormatNumbers: ActionCreator<boolean>\n  setLogScale: ActionCreator<boolean>\n  shouldFormatNumbers: boolean\n}\n\nconst mapStateToProps = (state: State) => ({\n  isAutorunEnabled: selectIsAutorunEnabled(state),\n  isLogScale: selectIsLogScale(state),\n  shouldFormatNumbers: selectShouldFormatNumbers(state),\n})\n\nconst mapDispatchToProps = {\n  setAutorun,\n  setFormatNumbers,\n  setLogScale,\n}\n\nexport function SettingsControlsDisconnected({\n  isAutorunEnabled,\n  isLogScale,\n  setAutorun,\n  setFormatNumbers,\n  setLogScale,\n  shouldFormatNumbers,\n}: SettingsControlsProps) {\n  const { t } = useTranslation()\n\n  return (\n    <Row noGutters className=\"mt-1 ml-2\">\n      <Col className=\"d-flex flex-wrap my-auto\">\n        <span className=\"mr-4 flex-1\" data-testid=\"AutorunSwitch\">\n          <FormSwitch\n            identifier=\"autorun\"\n            label={t('Run automatically')}\n            help={t('Run simulation automatically when any of the parameters change')}\n            checked={isAutorunEnabled}\n            onValueChanged={setAutorun}\n          />\n        </span>\n        <span className=\"mr-4 flex-1\" data-testid=\"LogScaleSwitch\">\n          <FormSwitch\n            identifier=\"logScale\"\n            label={t('Log scale')}\n            help={t('Toggle between logarithmic and linear scale on vertical axis of the plot')}\n            checked={isLogScale}\n            onValueChanged={setLogScale}\n          />\n        </span>\n        <span className=\"flex-1\" data-testid=\"HumanizedValuesSwitch\">\n          <FormSwitch\n            identifier=\"showHumanized\"\n            label={t('Format numbers')}\n            help={t('Show numerical results in a human-friendly format')}\n            checked={shouldFormatNumbers}\n            onValueChanged={setFormatNumbers}\n          />\n        </span>\n      </Col>\n    </Row>\n  )\n}\n\nconst SettingsControls = connect(mapStateToProps, mapDispatchToProps)(SettingsControlsDisconnected)\n\nexport { SettingsControls }\n"]},"metadata":{},"sourceType":"module"}