{"ast":null,"code":"import { msPerDay } from './initialize';\nconst eulerStep = 0.5;\nexport const eulerStepsPerDay = Math.round(1 / eulerStep);\nexport function evolve(pop, P, tMax, sample) {\n  const dT = tMax - pop.time;\n  const nSteps = Math.max(1, Math.round(dT / eulerStep));\n  const dt = dT / nSteps;\n  let currState = pop;\n\n  for (let i = 0; i < nSteps; i++) {\n    currState = stepODE(currState, P, dt);\n  }\n\n  return currState;\n}\n\n// NOTE: Assumes all subfields corresponding to populations have the same set of keys\nfunction stepODE(pop, P, dt) {\n  const t0 = pop.time;\n  const t1 = pop.time + dt / 2 * msPerDay;\n  const t2 = pop.time + dt * msPerDay;\n  const k1 = derivative(fluxes(t0, pop, P));\n  const k2 = derivative(fluxes(t1, advanceState(pop, k1, dt / 2, P.icuBeds), P));\n  const k3 = derivative(fluxes(t1, advanceState(pop, k2, dt / 2, P.icuBeds), P));\n  const k4 = derivative(fluxes(t2, advanceState(pop, k3, dt, P.icuBeds), P));\n  const tdot = sumDerivatives([k1, k2, k3, k4], [1 / 6, 1 / 3, 1 / 3, 1 / 6]);\n  const state = advanceState(pop, tdot, dt, P.icuBeds);\n  state.time = t2.valueOf();\n  return state;\n}\n\nexport function sum(arr) {\n  return arr.reduce((a, b) => a + b, 0);\n}\nexport function gz(x) {\n  return x > 0 ? x : 0;\n}\n\nfunction advanceState(pop, tdot, dt, nICUBeds) {\n  const newPop = {\n    time: 0,\n    current: {\n      susceptible: [],\n      exposed: [],\n      infectious: [],\n      severe: [],\n      critical: [],\n      overflow: []\n    },\n    cumulative: {\n      recovered: [],\n      hospitalized: [],\n      critical: [],\n      fatality: []\n    }\n  }; // TODO(nnoll): Sort out types\n  // @ts-ignore\n\n  const update = (age, kind, compartment) => {\n    // @ts-ignore\n    newPop[kind][compartment][age] = gz(pop[kind][compartment][age] + dt * tdot[kind][compartment][age]);\n  }; // @ts-ignore\n\n\n  const updateAt = (age, kind, compartment, i) => {\n    // @ts-ignore\n    newPop[kind][compartment][age][i] = gz(pop[kind][compartment][age][i] + dt * tdot[kind][compartment][age][i]);\n  };\n\n  for (let age = 0; age < pop.current.infectious.length; age++) {\n    newPop.current.exposed[age] = Array(tdot.current.exposed[age].length);\n    update(age, 'current', 'susceptible');\n\n    for (let i = 0; i < pop.current.exposed[age].length; i++) {\n      updateAt(age, 'current', 'exposed', i);\n    }\n\n    update(age, 'current', 'critical');\n    update(age, 'current', 'infectious');\n    update(age, 'current', 'overflow');\n    update(age, 'current', 'severe');\n    update(age, 'current', 'susceptible');\n    update(age, 'cumulative', 'critical');\n    update(age, 'cumulative', 'fatality');\n    update(age, 'cumulative', 'hospitalized');\n    update(age, 'cumulative', 'recovered');\n  } // Move hospitalized patients according to constrained resources\n  // TODO(nnoll): The gradients aren't computed subject to this non-linear constraint\n\n\n  let freeICUBeds = nICUBeds - sum(newPop.current.critical);\n\n  for (let age = pop.current.critical.length - 1; freeICUBeds < 0 && age >= 0; age--) {\n    if (newPop.current.critical[age] > -freeICUBeds) {\n      newPop.current.critical[age] += freeICUBeds;\n      newPop.current.overflow[age] -= freeICUBeds;\n      freeICUBeds = 0;\n    } else {\n      newPop.current.overflow[age] += newPop.current.critical[age];\n      freeICUBeds += newPop.current.critical[age];\n      newPop.current.critical[age] = 0;\n    }\n  }\n\n  for (let age = 0; freeICUBeds > 0 && age < pop.current.critical.length; age++) {\n    if (newPop.current.overflow[age] > freeICUBeds) {\n      newPop.current.critical[age] += freeICUBeds;\n      newPop.current.overflow[age] -= freeICUBeds;\n      freeICUBeds = 0;\n    } else {\n      newPop.current.critical[age] += newPop.current.overflow[age];\n      freeICUBeds -= newPop.current.overflow[age];\n      newPop.current.overflow[age] = 0;\n    }\n  }\n\n  return newPop;\n}\n\nfunction sumDerivatives(grads, scale) {\n  const sum = {\n    current: {\n      susceptible: [],\n      exposed: [],\n      infectious: [],\n      severe: [],\n      critical: [],\n      overflow: []\n    },\n    cumulative: {\n      hospitalized: [],\n      critical: [],\n      recovered: [],\n      fatality: []\n    }\n  };\n\n  for (let age = 0; age < grads[0].current.susceptible.length; age++) {\n    sum.current.susceptible[age] = 0;\n    sum.current.exposed[age] = grads[0].current.exposed[age].map(() => {\n      return 0;\n    });\n    sum.current.infectious[age] = 0;\n    sum.current.critical[age] = 0;\n    sum.current.overflow[age] = 0;\n    sum.current.severe[age] = 0;\n    sum.cumulative.critical[age] = 0;\n    sum.cumulative.fatality[age] = 0;\n    sum.cumulative.recovered[age] = 0;\n    sum.cumulative.hospitalized[age] = 0;\n  }\n\n  grads.forEach((grad, i) => {\n    for (let age = 0; age < grads[0].current.susceptible.length; age++) {\n      sum.current.susceptible[age] += scale[i] * grad.current.susceptible[age];\n      sum.current.infectious[age] += scale[i] * grad.current.infectious[age];\n      grad.current.exposed[age].forEach((e, j) => {\n        sum.current.exposed[age][j] += scale[i] * e;\n      });\n      sum.current.severe[age] += scale[i] * grad.current.severe[age];\n      sum.current.critical[age] += scale[i] * grad.current.critical[age];\n      sum.current.overflow[age] += scale[i] * grad.current.overflow[age];\n      sum.cumulative.recovered[age] += scale[i] * grad.cumulative.recovered[age];\n      sum.cumulative.fatality[age] += scale[i] * grad.cumulative.fatality[age];\n      sum.cumulative.critical[age] += scale[i] * grad.cumulative.critical[age];\n      sum.cumulative.hospitalized[age] += scale[i] * grad.cumulative.hospitalized[age];\n    }\n  });\n  return sum;\n}\n\nfunction derivative(flux) {\n  const grad = {\n    current: {\n      susceptible: [],\n      exposed: [],\n      infectious: [],\n      severe: [],\n      critical: [],\n      overflow: []\n    },\n    cumulative: {\n      recovered: [],\n      hospitalized: [],\n      critical: [],\n      fatality: []\n    }\n  };\n\n  for (let age = 0; age < flux.susceptible.length; age++) {\n    grad.current.exposed[age] = Array(flux.exposed[age].length);\n    grad.current.susceptible[age] = -flux.susceptible[age];\n    let fluxIn = flux.susceptible[age];\n    flux.exposed[age].forEach((fluxOut, i) => {\n      grad.current.exposed[age][i] = fluxIn - fluxOut;\n      fluxIn = fluxOut;\n    });\n    grad.current.infectious[age] = fluxIn - flux.infectious.severe[age] - flux.infectious.recovered[age];\n    grad.current.severe[age] = flux.infectious.severe[age] + flux.critical.severe[age] + flux.overflow.severe[age] - flux.severe.critical[age] - flux.severe.recovered[age];\n    grad.current.critical[age] = flux.severe.critical[age] - flux.critical.severe[age] - flux.critical.fatality[age];\n    grad.current.overflow[age] = -(flux.overflow.severe[age] + flux.overflow.fatality[age]); // Cumulative categories\n\n    grad.cumulative.recovered[age] = flux.infectious.recovered[age] + flux.severe.recovered[age];\n    grad.cumulative.hospitalized[age] = flux.infectious.severe[age];\n    grad.cumulative.critical[age] = flux.severe.critical[age];\n    grad.cumulative.fatality[age] = flux.critical.fatality[age] + flux.overflow.fatality[age];\n  }\n\n  return grad;\n}\n\nfunction fluxes(time, pop, P) {\n  // Convention: flux is labelled by the state\n  const flux = {\n    susceptible: [],\n    exposed: [],\n    infectious: {\n      severe: [],\n      recovered: []\n    },\n    severe: {\n      critical: [],\n      recovered: []\n    },\n    critical: {\n      severe: [],\n      fatality: []\n    },\n    overflow: {\n      severe: [],\n      fatality: []\n    }\n  }; // Compute all fluxes (apart from overflow states) barring no hospital bed constraints\n\n  const fracInfected = sum(pop.current.infectious) / P.populationServed;\n\n  for (let age = 0; age < pop.current.infectious.length; age++) {\n    // Initialize all multi-faceted states with internal arrays\n    flux.exposed[age] = Array(pop.current.exposed[age].length); // Susceptible -> Exposed\n\n    flux.susceptible[age] = P.importsPerDay[age] + (1 - P.frac.isolated[age]) * P.rate.infection(time) * pop.current.susceptible[age] * fracInfected; // Exposed -> Internal -> Infectious\n\n    pop.current.exposed[age].forEach((exposed, i, exposedArray) => {\n      flux.exposed[age][i] = P.rate.latency * exposed * exposedArray.length;\n    }); // Infectious -> Recovered/Critical\n\n    flux.infectious.recovered[age] = pop.current.infectious[age] * P.rate.recovery[age];\n    flux.infectious.severe[age] = pop.current.infectious[age] * P.rate.severe[age]; // Severe -> Recovered/Critical\n\n    flux.severe.recovered[age] = pop.current.severe[age] * P.rate.discharge[age];\n    flux.severe.critical[age] = pop.current.severe[age] * P.rate.critical[age]; // Critical -> Severe/Fatality\n\n    flux.critical.severe[age] = pop.current.critical[age] * P.rate.stabilize[age];\n    flux.critical.fatality[age] = pop.current.critical[age] * P.rate.fatality[age]; // Overflow -> Severe/Fatality\n\n    flux.overflow.severe[age] = pop.current.overflow[age] * P.rate.stabilize[age];\n    flux.overflow.fatality[age] = pop.current.overflow[age] * P.rate.overflowFatality[age];\n  }\n\n  return flux;\n}\n\nconst keys = o => {\n  return Object.keys(o);\n};\n\nexport function collectTotals(trajectory, ages) {\n  const res = [];\n  trajectory.forEach((d, day) => {\n    const prevDay = day > 7 ? day - 7 : 0;\n    const tp = {\n      time: d.time,\n      current: {\n        susceptible: {},\n        severe: {},\n        exposed: {},\n        overflow: {},\n        critical: {},\n        infectious: {},\n        weeklyFatality: {}\n      },\n      cumulative: {\n        recovered: {},\n        hospitalized: {},\n        critical: {},\n        fatality: {}\n      }\n    }; // TODO(nnoll): Typescript linting isn't happy here\n\n    Object.keys(tp.current).forEach(k => {\n      if (k === 'exposed') {\n        tp.current.exposed.total = 0;\n        Object.values(d.current.exposed).forEach(x => {\n          x.forEach(y => {\n            tp.current[k].total += y;\n          });\n        });\n        ages.forEach((age, i) => {\n          tp.current[k][age] = d.current.exposed[i].reduce((a, b) => a + b, 0);\n        });\n      } else if (k === 'weeklyFatality') {\n        ages.forEach((age, i) => {\n          tp.current.weeklyFatality[age] = d.cumulative.fatality[i] - trajectory[prevDay].cumulative.fatality[i];\n        });\n        tp.current.weeklyFatality.total = d.cumulative.fatality.reduce((a, b) => a + b) - trajectory[prevDay].cumulative.fatality.reduce((a, b) => a + b);\n      } else {\n        ages.forEach((age, i) => {\n          // @ts-ignore\n          tp.current[k][age] = d.current[k][i];\n        }); // @ts-ignore\n\n        tp.current[k].total = d.current[k].reduce((a, b) => a + b);\n      }\n    });\n    Object.keys(tp.cumulative).forEach((k, day) => {\n      ages.forEach((age, i) => {\n        // @ts-ignore\n        tp.cumulative[k][age] = d.cumulative[k][i];\n      }); // @ts-ignore\n\n      tp.cumulative[k].total = d.cumulative[k].reduce((a, b) => a + b, 0);\n    });\n    res.push(tp);\n  });\n  return res;\n}\n\nfunction title(name) {\n  return name === 'critical' ? 'ICU' : name;\n}\n\nexport function serializeTrajectory({\n  trajectory,\n  detailed\n}) {\n  // Store parameter values\n  // Down sample trajectory to once a day.\n  // TODO: Make the down sampling interval a parameter\n  let ageGroups = ['total'];\n\n  if (detailed) {\n    // FIXME: these keys seem to be numbers. This works, but is not what we want to show in the headers\n    const ageGroupsDetailed = Object.keys(trajectory.middle[0].current.severe); // FIXME: does detailed include summary or not?\n\n    ageGroups = [...ageGroups, ...ageGroupsDetailed];\n  }\n\n  const categories = {\n    current: keys(trajectory.middle[0].current),\n    cumulative: keys(trajectory.middle[0].cumulative)\n  };\n  const header = ['time'];\n  categories.current.forEach(category => {\n    ageGroups.forEach(age => {\n      header.push(`${title(category)} (${age}) median`, `${title(category)} (${age}) lower bound`, `${title(category)} (${age}) upper bound`);\n    });\n  });\n  categories.cumulative.forEach(category => {\n    ageGroups.forEach(age => {\n      header.push(`cumulative ${title(category)} (${age}) median`, `cumulative ${title(category)} (${age}) lower bound`, `cumulative ${title(category)} (${age}) upper bound`);\n    });\n  });\n  const tsv = [header.join('\\t')];\n  const seen = {};\n  const {\n    upper,\n    lower\n  } = trajectory;\n  trajectory.middle.forEach((mid, i) => {\n    const t = new Date(mid.time).toISOString().slice(0, 10);\n\n    if (t in seen) {\n      return;\n    }\n\n    seen[t] = true;\n    let buf = t;\n    categories.current.forEach(k => {\n      ageGroups.forEach(age => {\n        buf += `\\t${Math.round(mid.current[k][age])}\\t${Math.round(lower[i].current[k][age])}\\t${Math.round(upper[i].current[k][age])}`;\n      });\n    });\n    categories.cumulative.forEach(k => {\n      ageGroups.forEach(age => {\n        buf += `\\t${Math.round(mid.cumulative[k][age])}\\t${Math.round(lower[i].cumulative[k][age])}\\t${Math.round(upper[i].cumulative[k][age])}`;\n      });\n    });\n    tsv.push(buf);\n  });\n  return tsv.join('\\n');\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/algorithms/model.ts"],"names":["msPerDay","eulerStep","eulerStepsPerDay","Math","round","evolve","pop","P","tMax","sample","dT","time","nSteps","max","dt","currState","i","stepODE","t0","t1","t2","k1","derivative","fluxes","k2","advanceState","icuBeds","k3","k4","tdot","sumDerivatives","state","valueOf","sum","arr","reduce","a","b","gz","x","nICUBeds","newPop","current","susceptible","exposed","infectious","severe","critical","overflow","cumulative","recovered","hospitalized","fatality","update","age","kind","compartment","updateAt","length","Array","freeICUBeds","grads","scale","map","forEach","grad","e","j","flux","fluxIn","fluxOut","fracInfected","populationServed","importsPerDay","frac","isolated","rate","infection","exposedArray","latency","recovery","discharge","stabilize","overflowFatality","keys","o","Object","collectTotals","trajectory","ages","res","d","day","prevDay","tp","weeklyFatality","k","total","values","y","push","title","name","serializeTrajectory","detailed","ageGroups","ageGroupsDetailed","middle","categories","header","category","tsv","join","seen","upper","lower","mid","t","Date","toISOString","slice","buf"],"mappings":"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","sourcesContent":["import {\n  ModelParams,\n  SimulationTimePoint,\n  InternalCurrentData,\n  InternalCumulativeData,\n  Trajectory,\n  ExportedTimePoint,\n} from './types/Result.types'\n\nimport { msPerDay } from './initialize'\n\nconst eulerStep = 0.5\nexport const eulerStepsPerDay = Math.round(1 / eulerStep)\n\ninterface StateFlux {\n  susceptible: number[]\n  exposed: number[][]\n  infectious: {\n    severe: number[]\n    recovered: number[]\n  }\n  severe: {\n    critical: number[]\n    recovered: number[]\n  }\n  critical: {\n    severe: number[]\n    fatality: number[]\n  }\n  overflow: {\n    severe: number[]\n    fatality: number[]\n  }\n}\n\nexport function evolve(\n  pop: SimulationTimePoint,\n  P: ModelParams,\n  tMax: number,\n  sample: (x: number) => number,\n): SimulationTimePoint {\n  const dT: number = tMax - pop.time\n  const nSteps: number = Math.max(1, Math.round(dT / eulerStep))\n  const dt = dT / nSteps\n  let currState = pop\n  for (let i = 0; i < nSteps; i++) {\n    currState = stepODE(currState, P, dt)\n  }\n  return currState\n}\n\ninterface TimeDerivative {\n  current: InternalCurrentData\n  cumulative: InternalCumulativeData\n}\n\n// NOTE: Assumes all subfields corresponding to populations have the same set of keys\nfunction stepODE(pop: SimulationTimePoint, P: ModelParams, dt: number): SimulationTimePoint {\n  const t0 = pop.time\n  const t1 = pop.time + (dt / 2) * msPerDay\n  const t2 = pop.time + dt * msPerDay\n\n  const k1 = derivative(fluxes(t0, pop, P))\n  const k2 = derivative(fluxes(t1, advanceState(pop, k1, dt / 2, P.icuBeds), P))\n  const k3 = derivative(fluxes(t1, advanceState(pop, k2, dt / 2, P.icuBeds), P))\n  const k4 = derivative(fluxes(t2, advanceState(pop, k3, dt, P.icuBeds), P))\n\n  const tdot = sumDerivatives([k1, k2, k3, k4], [1 / 6, 1 / 3, 1 / 3, 1 / 6])\n\n  const state = advanceState(pop, tdot, dt, P.icuBeds)\n  state.time = t2.valueOf()\n\n  return state\n}\n\nexport function sum(arr: number[]): number {\n  return arr.reduce((a, b) => a + b, 0)\n}\n\nexport function gz(x: number): number {\n  return x > 0 ? x : 0\n}\n\nfunction advanceState(\n  pop: SimulationTimePoint,\n  tdot: TimeDerivative,\n  dt: number,\n  nICUBeds: number,\n): SimulationTimePoint {\n  const newPop: SimulationTimePoint = {\n    time: 0,\n    current: {\n      susceptible: [],\n      exposed: [],\n      infectious: [],\n      severe: [],\n      critical: [],\n      overflow: [],\n    },\n    cumulative: {\n      recovered: [],\n      hospitalized: [],\n      critical: [],\n      fatality: [],\n    },\n  }\n\n  // TODO(nnoll): Sort out types\n  // @ts-ignore\n  const update = (age, kind, compartment) => {\n    // @ts-ignore\n    newPop[kind][compartment][age] = gz(pop[kind][compartment][age] + dt * tdot[kind][compartment][age])\n  }\n\n  // @ts-ignore\n  const updateAt = (age, kind, compartment, i) => {\n    // @ts-ignore\n    newPop[kind][compartment][age][i] = gz(pop[kind][compartment][age][i] + dt * tdot[kind][compartment][age][i])\n  }\n\n  for (let age = 0; age < pop.current.infectious.length; age++) {\n    newPop.current.exposed[age] = Array(tdot.current.exposed[age].length)\n\n    update(age, 'current', 'susceptible')\n    for (let i = 0; i < pop.current.exposed[age].length; i++) {\n      updateAt(age, 'current', 'exposed', i)\n    }\n\n    update(age, 'current', 'critical')\n    update(age, 'current', 'infectious')\n    update(age, 'current', 'overflow')\n    update(age, 'current', 'severe')\n    update(age, 'current', 'susceptible')\n\n    update(age, 'cumulative', 'critical')\n    update(age, 'cumulative', 'fatality')\n    update(age, 'cumulative', 'hospitalized')\n    update(age, 'cumulative', 'recovered')\n  }\n\n  // Move hospitalized patients according to constrained resources\n  // TODO(nnoll): The gradients aren't computed subject to this non-linear constraint\n  let freeICUBeds = nICUBeds - sum(newPop.current.critical)\n\n  for (let age = pop.current.critical.length - 1; freeICUBeds < 0 && age >= 0; age--) {\n    if (newPop.current.critical[age] > -freeICUBeds) {\n      newPop.current.critical[age] += freeICUBeds\n      newPop.current.overflow[age] -= freeICUBeds\n      freeICUBeds = 0\n    } else {\n      newPop.current.overflow[age] += newPop.current.critical[age]\n      freeICUBeds += newPop.current.critical[age]\n      newPop.current.critical[age] = 0\n    }\n  }\n\n  for (let age = 0; freeICUBeds > 0 && age < pop.current.critical.length; age++) {\n    if (newPop.current.overflow[age] > freeICUBeds) {\n      newPop.current.critical[age] += freeICUBeds\n      newPop.current.overflow[age] -= freeICUBeds\n      freeICUBeds = 0\n    } else {\n      newPop.current.critical[age] += newPop.current.overflow[age]\n      freeICUBeds -= newPop.current.overflow[age]\n      newPop.current.overflow[age] = 0\n    }\n  }\n\n  return newPop\n}\n\nfunction sumDerivatives(grads: TimeDerivative[], scale: number[]): TimeDerivative {\n  const sum: TimeDerivative = {\n    current: {\n      susceptible: [],\n      exposed: [],\n      infectious: [],\n      severe: [],\n      critical: [],\n      overflow: [],\n    },\n    cumulative: {\n      hospitalized: [],\n      critical: [],\n      recovered: [],\n      fatality: [],\n    },\n  }\n  for (let age = 0; age < grads[0].current.susceptible.length; age++) {\n    sum.current.susceptible[age] = 0\n    sum.current.exposed[age] = grads[0].current.exposed[age].map(() => {\n      return 0\n    })\n    sum.current.infectious[age] = 0\n    sum.current.critical[age] = 0\n    sum.current.overflow[age] = 0\n    sum.current.severe[age] = 0\n\n    sum.cumulative.critical[age] = 0\n    sum.cumulative.fatality[age] = 0\n    sum.cumulative.recovered[age] = 0\n    sum.cumulative.hospitalized[age] = 0\n  }\n\n  grads.forEach((grad, i) => {\n    for (let age = 0; age < grads[0].current.susceptible.length; age++) {\n      sum.current.susceptible[age] += scale[i] * grad.current.susceptible[age]\n      sum.current.infectious[age] += scale[i] * grad.current.infectious[age]\n      grad.current.exposed[age].forEach((e, j) => {\n        sum.current.exposed[age][j] += scale[i] * e\n      })\n      sum.current.severe[age] += scale[i] * grad.current.severe[age]\n      sum.current.critical[age] += scale[i] * grad.current.critical[age]\n      sum.current.overflow[age] += scale[i] * grad.current.overflow[age]\n\n      sum.cumulative.recovered[age] += scale[i] * grad.cumulative.recovered[age]\n      sum.cumulative.fatality[age] += scale[i] * grad.cumulative.fatality[age]\n      sum.cumulative.critical[age] += scale[i] * grad.cumulative.critical[age]\n      sum.cumulative.hospitalized[age] += scale[i] * grad.cumulative.hospitalized[age]\n    }\n  })\n\n  return sum\n}\n\nfunction derivative(flux: StateFlux): TimeDerivative {\n  const grad: TimeDerivative = {\n    current: {\n      susceptible: [],\n      exposed: [],\n      infectious: [],\n      severe: [],\n      critical: [],\n      overflow: [],\n    },\n    cumulative: {\n      recovered: [],\n      hospitalized: [],\n      critical: [],\n      fatality: [],\n    },\n  }\n\n  for (let age = 0; age < flux.susceptible.length; age++) {\n    grad.current.exposed[age] = Array(flux.exposed[age].length)\n\n    grad.current.susceptible[age] = -flux.susceptible[age]\n    let fluxIn = flux.susceptible[age]\n    flux.exposed[age].forEach((fluxOut, i) => {\n      grad.current.exposed[age][i] = fluxIn - fluxOut\n      fluxIn = fluxOut\n    })\n    grad.current.infectious[age] = fluxIn - flux.infectious.severe[age] - flux.infectious.recovered[age]\n    grad.current.severe[age] =\n      flux.infectious.severe[age] +\n      flux.critical.severe[age] +\n      flux.overflow.severe[age] -\n      flux.severe.critical[age] -\n      flux.severe.recovered[age]\n    grad.current.critical[age] = flux.severe.critical[age] - flux.critical.severe[age] - flux.critical.fatality[age]\n    grad.current.overflow[age] = -(flux.overflow.severe[age] + flux.overflow.fatality[age])\n\n    // Cumulative categories\n    grad.cumulative.recovered[age] = flux.infectious.recovered[age] + flux.severe.recovered[age]\n    grad.cumulative.hospitalized[age] = flux.infectious.severe[age]\n    grad.cumulative.critical[age] = flux.severe.critical[age]\n    grad.cumulative.fatality[age] = flux.critical.fatality[age] + flux.overflow.fatality[age]\n  }\n\n  return grad\n}\n\nfunction fluxes(time: number, pop: SimulationTimePoint, P: ModelParams): StateFlux {\n  // Convention: flux is labelled by the state\n  const flux: StateFlux = {\n    susceptible: [],\n    exposed: [],\n    infectious: {\n      severe: [],\n      recovered: [],\n    },\n    severe: {\n      critical: [],\n      recovered: [],\n    },\n    critical: {\n      severe: [],\n      fatality: [],\n    },\n    overflow: {\n      severe: [],\n      fatality: [],\n    },\n  }\n\n  // Compute all fluxes (apart from overflow states) barring no hospital bed constraints\n  const fracInfected = sum(pop.current.infectious) / P.populationServed\n\n  for (let age = 0; age < pop.current.infectious.length; age++) {\n    // Initialize all multi-faceted states with internal arrays\n    flux.exposed[age] = Array(pop.current.exposed[age].length)\n\n    // Susceptible -> Exposed\n    flux.susceptible[age] =\n      P.importsPerDay[age] +\n      (1 - P.frac.isolated[age]) * P.rate.infection(time) * pop.current.susceptible[age] * fracInfected\n\n    // Exposed -> Internal -> Infectious\n    pop.current.exposed[age].forEach((exposed, i, exposedArray) => {\n      flux.exposed[age][i] = P.rate.latency * exposed * exposedArray.length\n    })\n\n    // Infectious -> Recovered/Critical\n    flux.infectious.recovered[age] = pop.current.infectious[age] * P.rate.recovery[age]\n    flux.infectious.severe[age] = pop.current.infectious[age] * P.rate.severe[age]\n\n    // Severe -> Recovered/Critical\n    flux.severe.recovered[age] = pop.current.severe[age] * P.rate.discharge[age]\n    flux.severe.critical[age] = pop.current.severe[age] * P.rate.critical[age]\n\n    // Critical -> Severe/Fatality\n    flux.critical.severe[age] = pop.current.critical[age] * P.rate.stabilize[age]\n    flux.critical.fatality[age] = pop.current.critical[age] * P.rate.fatality[age]\n\n    // Overflow -> Severe/Fatality\n    flux.overflow.severe[age] = pop.current.overflow[age] * P.rate.stabilize[age]\n    flux.overflow.fatality[age] = pop.current.overflow[age] * P.rate.overflowFatality[age]\n  }\n\n  return flux\n}\n\nconst keys = <T>(o: T): Array<keyof T & string> => {\n  return Object.keys(o) as Array<keyof T & string>\n}\n\nexport function collectTotals(trajectory: SimulationTimePoint[], ages: string[]): ExportedTimePoint[] {\n  const res: ExportedTimePoint[] = []\n\n  trajectory.forEach((d, day) => {\n    const prevDay = day > 7 ? day - 7 : 0\n    const tp: ExportedTimePoint = {\n      time: d.time,\n      current: {\n        susceptible: {},\n        severe: {},\n        exposed: {},\n        overflow: {},\n        critical: {},\n        infectious: {},\n        weeklyFatality: {},\n      },\n      cumulative: {\n        recovered: {},\n        hospitalized: {},\n        critical: {},\n        fatality: {},\n      },\n    }\n\n    // TODO(nnoll): Typescript linting isn't happy here\n    Object.keys(tp.current).forEach((k) => {\n      if (k === 'exposed') {\n        tp.current.exposed.total = 0\n        Object.values(d.current.exposed).forEach((x) => {\n          x.forEach((y) => {\n            tp.current[k].total += y\n          })\n        })\n        ages.forEach((age, i) => {\n          tp.current[k][age] = d.current.exposed[i].reduce((a, b) => a + b, 0)\n        })\n      } else if (k === 'weeklyFatality') {\n        ages.forEach((age, i) => {\n          tp.current.weeklyFatality[age] = d.cumulative.fatality[i] - trajectory[prevDay].cumulative.fatality[i]\n        })\n        tp.current.weeklyFatality.total =\n          d.cumulative.fatality.reduce((a, b) => a + b) -\n          trajectory[prevDay].cumulative.fatality.reduce((a, b) => a + b)\n      } else {\n        ages.forEach((age, i) => {\n          // @ts-ignore\n          tp.current[k][age] = d.current[k][i]\n        })\n        // @ts-ignore\n        tp.current[k].total = d.current[k].reduce((a, b) => a + b)\n      }\n    })\n\n    Object.keys(tp.cumulative).forEach((k, day) => {\n      ages.forEach((age, i) => {\n        // @ts-ignore\n        tp.cumulative[k][age] = d.cumulative[k][i]\n      })\n      // @ts-ignore\n      tp.cumulative[k].total = d.cumulative[k].reduce((a, b) => a + b, 0)\n    })\n\n    res.push(tp)\n  })\n\n  return res\n}\n\nfunction title(name: string): string {\n  return name === 'critical' ? 'ICU' : name\n}\n\nexport interface SerializeTrajectoryParams {\n  trajectory: Trajectory\n  detailed: boolean\n}\n\nexport function serializeTrajectory({ trajectory, detailed }: SerializeTrajectoryParams) {\n  // Store parameter values\n\n  // Down sample trajectory to once a day.\n  // TODO: Make the down sampling interval a parameter\n\n  let ageGroups = ['total']\n  if (detailed) {\n    // FIXME: these keys seem to be numbers. This works, but is not what we want to show in the headers\n    const ageGroupsDetailed = Object.keys(trajectory.middle[0].current.severe)\n\n    // FIXME: does detailed include summary or not?\n    ageGroups = [...ageGroups, ...ageGroupsDetailed]\n  }\n\n  const categories = {\n    current: keys(trajectory.middle[0].current),\n    cumulative: keys(trajectory.middle[0].cumulative),\n  }\n  const header: string[] = ['time']\n\n  categories.current.forEach((category) => {\n    ageGroups.forEach((age) => {\n      header.push(\n        `${title(category)} (${age}) median`,\n        `${title(category)} (${age}) lower bound`,\n        `${title(category)} (${age}) upper bound`,\n      )\n    })\n  })\n\n  categories.cumulative.forEach((category) => {\n    ageGroups.forEach((age) => {\n      header.push(\n        `cumulative ${title(category)} (${age}) median`,\n        `cumulative ${title(category)} (${age}) lower bound`,\n        `cumulative ${title(category)} (${age}) upper bound`,\n      )\n    })\n  })\n\n  const tsv = [header.join('\\t')]\n\n  const seen: Record<string, boolean> = {}\n  const { upper, lower } = trajectory\n\n  trajectory.middle.forEach((mid, i) => {\n    const t = new Date(mid.time).toISOString().slice(0, 10)\n    if (t in seen) {\n      return\n    }\n    seen[t] = true\n\n    let buf = t\n    categories.current.forEach((k) => {\n      ageGroups.forEach((age) => {\n        buf += `\\t${Math.round(mid.current[k][age])}\\t${Math.round(lower[i].current[k][age])}\\t${Math.round(\n          upper[i].current[k][age],\n        )}`\n      })\n    })\n    categories.cumulative.forEach((k) => {\n      ageGroups.forEach((age) => {\n        buf += `\\t${Math.round(mid.cumulative[k][age])}\\t${Math.round(lower[i].cumulative[k][age])}\\t${Math.round(\n          upper[i].cumulative[k][age],\n        )}`\n      })\n    })\n\n    tsv.push(buf)\n  })\n\n  return tsv.join('\\n')\n}\n"]},"metadata":{},"sourceType":"module"}