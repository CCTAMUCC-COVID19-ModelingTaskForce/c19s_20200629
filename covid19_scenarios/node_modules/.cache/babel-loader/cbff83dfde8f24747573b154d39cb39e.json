{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nimport _trim from \"lodash/trim\";\nimport Ajv from 'ajv';\nimport ajvLocalizers from 'ajv-i18n';\nimport validateShareable, { errors } from '../../../.generated/latest/validateShareable';\nimport { Convert } from '../../../algorithms/types/Param.types';\nimport { toExternal, toInternal } from '../../../algorithms/types/convert';\nimport { DeserializationErrorConversionFailed, DeserializationErrorValidationFailed } from '../errors';\nconst schemaVer = '2.0.0';\n\nfunction serialize(scenarioParameters) {\n  const shareable = { ...scenarioParameters,\n    schemaVer,\n    scenarioData: { ...scenarioParameters.scenarioData,\n      data: toExternal(scenarioParameters.scenarioData.data)\n    }\n  };\n  const serialized = Convert.shareableToJson(shareable);\n\n  if (process.env.NODE_ENV !== 'production' && !validateShareable(JSON.parse(serialized))) {\n    throw errors;\n  }\n\n  return serialized;\n}\n\nfunction validateSchema(shareableDangerous) {\n  if (!validateShareable(shareableDangerous)) {\n    var _ajvLocalizers$locale;\n\n    const locale = 'en'; // TODO: use current locale\n\n    const localize = (_ajvLocalizers$locale = ajvLocalizers[locale]) !== null && _ajvLocalizers$locale !== void 0 ? _ajvLocalizers$locale : ajvLocalizers.en;\n    localize(errors);\n    const ajv = Ajv({\n      allErrors: true\n    });\n    const separator = '<<<NEWLINE>>>';\n    const errorString = ajv.errorsText(errors, {\n      dataVar: '',\n      separator\n    });\n\n    if (typeof errorString === 'string') {\n      const errorStrings = errorString.split(separator).map(_trim);\n\n      if (errorStrings.length > 0) {\n        throw new DeserializationErrorValidationFailed(errorStrings);\n      }\n    }\n\n    throw new DeserializationErrorValidationFailed(['Unknown validation error']);\n  }\n}\n\nfunction convert(shareableDangerous) {\n  try {\n    return Convert.toShareable(JSON.stringify(shareableDangerous));\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new DeserializationErrorConversionFailed(error.message);\n    }\n\n    throw new DeserializationErrorConversionFailed('Unknown conversion error');\n  }\n}\n\nfunction validateMore(shareable) {\n  const {\n    scenarioData,\n    ageDistributionData,\n    severityDistributionData\n  } = shareable;\n\n  if (scenarioData.data.population.ageDistributionName !== ageDistributionData.name) {\n    throw new DeserializationErrorValidationFailed(['/scenarioData/data/population/ageDistributionName should be equal to /ageDistributionData/name']);\n  }\n\n  const ageDistributionCategories = ageDistributionData.data.map(({\n    ageGroup\n  }) => ageGroup);\n  const severityCategories = severityDistributionData.data.map(({\n    ageGroup\n  }) => ageGroup);\n\n  if (!_isEqual(ageDistributionCategories, severityCategories)) {\n    throw new DeserializationErrorValidationFailed(['arrays /ageDistributionData/data[] and /severityDistributionData/data[] should contain the same number of the same values for ageGroup']);\n  }\n}\n\nfunction deserialize(input) {\n  const shareableDangerous = JSON.parse(input);\n  validateSchema(shareableDangerous);\n  const shareable = convert(shareableDangerous);\n  validateMore(shareable);\n  const {\n    scenarioData,\n    ageDistributionData,\n    severityDistributionData\n  } = shareable;\n  return {\n    scenarioData: { ...scenarioData,\n      data: toInternal(scenarioData.data)\n    },\n    ageDistributionData,\n    severityDistributionData\n  };\n}\n\nexport default {\n  [schemaVer]: {\n    serialize,\n    deserialize\n  }\n};","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/io/serialization/v2.0.0/serialize.ts"],"names":["Ajv","ajvLocalizers","validateShareable","errors","Convert","toExternal","toInternal","DeserializationErrorConversionFailed","DeserializationErrorValidationFailed","schemaVer","serialize","scenarioParameters","shareable","scenarioData","data","serialized","shareableToJson","process","env","NODE_ENV","JSON","parse","validateSchema","shareableDangerous","locale","localize","en","ajv","allErrors","separator","errorString","errorsText","dataVar","errorStrings","split","map","length","convert","toShareable","stringify","error","Error","message","validateMore","ageDistributionData","severityDistributionData","population","ageDistributionName","name","ageDistributionCategories","ageGroup","severityCategories","deserialize","input"],"mappings":"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","sourcesContent":["import { trim, isEqual } from 'lodash'\n\nimport Ajv from 'ajv'\nimport ajvLocalizers from 'ajv-i18n'\n\nimport validateShareable, { errors } from '../../../.generated/latest/validateShareable'\n\nimport type { ScenarioParameters, Shareable } from '../../../algorithms/types/Param.types'\nimport { Convert } from '../../../algorithms/types/Param.types'\nimport { toExternal, toInternal } from '../../../algorithms/types/convert'\n\nimport { DeserializationErrorConversionFailed, DeserializationErrorValidationFailed } from '../errors'\n\nconst schemaVer = '2.0.0'\n\nfunction serialize(scenarioParameters: ScenarioParameters): string {\n  const shareable: Shareable = {\n    ...scenarioParameters,\n    schemaVer,\n    scenarioData: {\n      ...scenarioParameters.scenarioData,\n      data: toExternal(scenarioParameters.scenarioData.data),\n    },\n  }\n\n  const serialized = Convert.shareableToJson(shareable)\n\n  if (process.env.NODE_ENV !== 'production' && !validateShareable(JSON.parse(serialized))) {\n    throw errors\n  }\n\n  return serialized\n}\n\nfunction validateSchema(shareableDangerous: Record<string, unknown>) {\n  if (!validateShareable(shareableDangerous)) {\n    const locale = 'en' // TODO: use current locale\n    const localize = ajvLocalizers[locale] ?? ajvLocalizers.en\n    localize(errors)\n\n    const ajv = Ajv({ allErrors: true })\n    const separator = '<<<NEWLINE>>>'\n    const errorString = ajv.errorsText(errors, { dataVar: '', separator })\n    if (typeof errorString === 'string') {\n      const errorStrings = errorString.split(separator).map(trim)\n      if (errorStrings.length > 0) {\n        throw new DeserializationErrorValidationFailed(errorStrings)\n      }\n    }\n\n    throw new DeserializationErrorValidationFailed(['Unknown validation error'])\n  }\n}\n\nfunction convert(shareableDangerous: Record<string, unknown>): Shareable {\n  try {\n    return Convert.toShareable(JSON.stringify(shareableDangerous))\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new DeserializationErrorConversionFailed(error.message)\n    }\n\n    throw new DeserializationErrorConversionFailed('Unknown conversion error')\n  }\n}\n\nfunction validateMore(shareable: Shareable) {\n  const { scenarioData, ageDistributionData, severityDistributionData } = shareable\n\n  if (scenarioData.data.population.ageDistributionName !== ageDistributionData.name) {\n    throw new DeserializationErrorValidationFailed([\n      '/scenarioData/data/population/ageDistributionName should be equal to /ageDistributionData/name',\n    ])\n  }\n\n  const ageDistributionCategories = ageDistributionData.data.map(({ ageGroup }) => ageGroup)\n  const severityCategories = severityDistributionData.data.map(({ ageGroup }) => ageGroup)\n  if (!isEqual(ageDistributionCategories, severityCategories)) {\n    throw new DeserializationErrorValidationFailed([\n      'arrays /ageDistributionData/data[] and /severityDistributionData/data[] should contain the same number of the same values for ageGroup',\n    ])\n  }\n}\n\nfunction deserialize(input: string): ScenarioParameters {\n  const shareableDangerous = JSON.parse(input) as Record<string, unknown>\n\n  validateSchema(shareableDangerous)\n\n  const shareable = convert(shareableDangerous)\n\n  validateMore(shareable)\n\n  const { scenarioData, ageDistributionData, severityDistributionData } = shareable\n\n  return {\n    scenarioData: {\n      ...scenarioData,\n      data: toInternal(scenarioData.data),\n    },\n    ageDistributionData,\n    severityDistributionData,\n  }\n}\n\nexport default { [schemaVer]: { serialize, deserialize } }\n"]},"metadata":{},"sourceType":"module"}