{"ast":null,"code":"import semver from 'semver';\nimport { DeserializationErrorSchemaVersionInvalid, SerializationErrorSchemaVersionNotLatest } from './errors';\nimport { deserialize } from './deserialize';\nimport { SERIALIZER_LATEST, SERIALIZER_VERSION_LATEST, SERIALIZER_VERSIONS } from './versioning';\nexport function serialize(data) {\n  const serializerLatest = SERIALIZER_LATEST.serialize;\n  const serialized = serializerLatest(data); // This will verify the quility of serialization in dev mode\n\n  if (process.env.NODE_ENV !== 'production') {\n    const shareableDangerous = JSON.parse(serialized);\n    const schemaVer = semver.valid(shareableDangerous === null || shareableDangerous === void 0 ? void 0 : shareableDangerous.schemaVer);\n\n    if (schemaVer) {\n      if (schemaVer !== SERIALIZER_VERSION_LATEST) {\n        throw new SerializationErrorSchemaVersionNotLatest(schemaVer, SERIALIZER_VERSIONS);\n      }\n\n      deserialize(serialized);\n    } else {\n      throw new DeserializationErrorSchemaVersionInvalid('Not provided', SERIALIZER_VERSIONS);\n    }\n  }\n\n  return serialized;\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/io/serialization/serialize.ts"],"names":["semver","DeserializationErrorSchemaVersionInvalid","SerializationErrorSchemaVersionNotLatest","deserialize","SERIALIZER_LATEST","SERIALIZER_VERSION_LATEST","SERIALIZER_VERSIONS","serialize","data","serializerLatest","serialized","process","env","NODE_ENV","shareableDangerous","JSON","parse","schemaVer","valid"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAIA,SAASC,wCAAT,EAAmDC,wCAAnD,QAAmG,UAAnG;AAEA,SAASC,WAAT,QAA4B,eAA5B;AAEA,SAASC,iBAAT,EAA4BC,yBAA5B,EAAuDC,mBAAvD,QAAkF,cAAlF;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAqD;AAC1D,QAAMC,gBAAgB,GAAGL,iBAAiB,CAACG,SAA3C;AACA,QAAMG,UAAU,GAAGD,gBAAgB,CAACD,IAAD,CAAnC,CAF0D,CAI1D;;AACA,MAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAMC,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWN,UAAX,CAA3B;AACA,UAAMO,SAAS,GAAGjB,MAAM,CAACkB,KAAP,CAAaJ,kBAAb,aAAaA,kBAAb,uBAAaA,kBAAkB,CAAEG,SAAjC,CAAlB;;AAEA,QAAIA,SAAJ,EAAe;AACb,UAAIA,SAAS,KAAKZ,yBAAlB,EAA6C;AAC3C,cAAM,IAAIH,wCAAJ,CAA6Ce,SAA7C,EAAwDX,mBAAxD,CAAN;AACD;;AAEDH,MAAAA,WAAW,CAACO,UAAD,CAAX;AACD,KAND,MAMO;AACL,YAAM,IAAIT,wCAAJ,CAA6C,cAA7C,EAA6DK,mBAA7D,CAAN;AACD;AACF;;AAED,SAAOI,UAAP;AACD","sourcesContent":["import semver from 'semver'\n\nimport type { ScenarioParameters } from '../../algorithms/types/Param.types'\n\nimport { DeserializationErrorSchemaVersionInvalid, SerializationErrorSchemaVersionNotLatest } from './errors'\n\nimport { deserialize } from './deserialize'\n\nimport { SERIALIZER_LATEST, SERIALIZER_VERSION_LATEST, SERIALIZER_VERSIONS } from './versioning'\n\nexport function serialize(data: ScenarioParameters): string {\n  const serializerLatest = SERIALIZER_LATEST.serialize\n  const serialized = serializerLatest(data)\n\n  // This will verify the quility of serialization in dev mode\n  if (process.env.NODE_ENV !== 'production') {\n    const shareableDangerous = JSON.parse(serialized) as { schemaVer?: string }\n    const schemaVer = semver.valid(shareableDangerous?.schemaVer)\n\n    if (schemaVer) {\n      if (schemaVer !== SERIALIZER_VERSION_LATEST) {\n        throw new SerializationErrorSchemaVersionNotLatest(schemaVer, SERIALIZER_VERSIONS)\n      }\n\n      deserialize(serialized)\n    } else {\n      throw new DeserializationErrorSchemaVersionInvalid('Not provided', SERIALIZER_VERSIONS)\n    }\n  }\n\n  return serialized\n}\n"]},"metadata":{},"sourceType":"module"}