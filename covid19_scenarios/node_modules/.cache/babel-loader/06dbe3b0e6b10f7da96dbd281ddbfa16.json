{"ast":null,"code":"import _pt from \"prop-types\";\nimport _partition from \"lodash/partition\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/ScenarioLoader/ScenarioLoaderList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { MdClear } from 'react-icons/md';\nimport { connect } from 'react-redux';\nimport { Button, Input, InputGroup, InputGroupAddon } from 'reactstrap';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { setScenario } from '../../../state/scenario/scenario.actions';\nimport { selectScenarioNames } from '../../../state/scenario/scenario.selectors';\nimport { stringsToOptions } from '../../Form/FormDropdownOption';\nimport { ScenarioLoaderListItem } from './ScenarioLoaderListItem';\nimport './ScenarioLoader.scss';\nconst DEBOUNCE_DELAY = 500;\nexport function includesLowerCase(candidate, searchTerm) {\n  return candidate.toLowerCase().includes(searchTerm.toLowerCase());\n}\nexport function startsWithLowerCase(candidate, searchTerm) {\n  return candidate.toLowerCase().startsWith(searchTerm.toLowerCase());\n}\nexport function searchOptions(items, term) {\n  const [itemsStartWith, itemsNotStartWith] = _partition(items, ({\n    label\n  }) => startsWithLowerCase(label, term));\n\n  const [itemsInclude] = _partition(itemsNotStartWith, ({\n    label\n  }) => includesLowerCase(label, term));\n\n  return [...itemsStartWith, ...itemsInclude];\n}\n\nconst mapStateToProps = state => ({\n  scenarioNames: selectScenarioNames(state)\n});\n\nconst mapDispatchToProps = {\n  setScenario\n};\nexport const ScenarioLoaderList = connect(mapStateToProps, mapDispatchToProps)(ScenarioLoaderListDisconnected);\nexport function ScenarioLoaderListDisconnected({\n  scenarioNames,\n  setScenario,\n  close\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [searchTerm, setSearchTerm] = useState('');\n  const scenarioOptions = useMemo(() => stringsToOptions(scenarioNames), [scenarioNames]);\n  const [filteredRows, setFilteredRows] = useState(scenarioOptions);\n  const onScenarioSelect = useCallback(scenarioName => {\n    setScenario({\n      name: scenarioName\n    });\n    close();\n  }, [close, setScenario]);\n\n  const executeFilter = term => {\n    const hasSearchTerm = term.length > 0;\n    const filtered = hasSearchTerm ? searchOptions(scenarioOptions, term) : scenarioOptions;\n    setFilteredRows(filtered);\n  };\n\n  const [executeFilterDebounced] = useDebouncedCallback(executeFilter, DEBOUNCE_DELAY);\n\n  const onChange = event => {\n    const {\n      value\n    } = event.target;\n    setSearchTerm(value);\n    executeFilterDebounced(value);\n  };\n\n  const onKeyDown = event => {\n    const isEnterKey = event.keyCode === 13;\n\n    if (isEnterKey) {\n      executeFilter(searchTerm);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scenario-loader-list-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"scenario-loader-list-input-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    className: \"scenario-loader-list-search-input\",\n    name: \"search-scenario\",\n    \"data-testid\": \"PresetLoaderDialogInput\",\n    placeholder: t('Search'),\n    onChange: onChange,\n    value: searchTerm,\n    autoComplete: \"off\",\n    onKeyDown: onKeyDown,\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"append\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    className: \"btn-search-scenario\",\n    \"data-testid\": \"PresetLoaderDialogClearButton\",\n    disabled: searchTerm === '',\n    onClick: () => {\n      setSearchTerm('');\n      executeFilter('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MdClear, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2 scenario-loader-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, filteredRows.map(item => /*#__PURE__*/React.createElement(ScenarioLoaderListItem, {\n    key: item.value,\n    option: item,\n    onItemClick: onScenarioSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_s(ScenarioLoaderListDisconnected, \"sQyXIecNY/4fcvN3/y0VvqVA4Nw=\", false, function () {\n  return [useTranslation, useDebouncedCallback];\n});\n\n_c = ScenarioLoaderListDisconnected;\nScenarioLoaderListDisconnected.propTypes = {\n  scenarioNames: _pt.arrayOf(_pt.string).isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ScenarioLoaderListDisconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/ScenarioLoader/ScenarioLoaderList.tsx"],"names":["React","useCallback","useMemo","useState","useTranslation","MdClear","connect","Button","Input","InputGroup","InputGroupAddon","useDebouncedCallback","setScenario","selectScenarioNames","stringsToOptions","ScenarioLoaderListItem","DEBOUNCE_DELAY","includesLowerCase","candidate","searchTerm","toLowerCase","includes","startsWithLowerCase","startsWith","searchOptions","items","term","itemsStartWith","itemsNotStartWith","label","itemsInclude","mapStateToProps","state","scenarioNames","mapDispatchToProps","ScenarioLoaderList","ScenarioLoaderListDisconnected","close","t","setSearchTerm","scenarioOptions","filteredRows","setFilteredRows","onScenarioSelect","scenarioName","name","executeFilter","hasSearchTerm","length","filtered","executeFilterDebounced","onChange","event","value","target","onKeyDown","isEnterKey","keyCode","map","item"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAA0CC,WAA1C,EAAuDC,OAAvD,EAAgEC,QAAhE,QAAgF,OAAhF;AAIA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,UAAxB,EAAoCC,eAApC,QAA2D,YAA3D;AAEA,SAASC,oBAAT,QAAqC,cAArC;AAGA,SAA4BC,WAA5B,QAA+C,0CAA/C;AACA,SAASC,mBAAT,QAAoC,4CAApC;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AAGA,OAAO,uBAAP;AAEA,MAAMC,cAAc,GAAG,GAAvB;AAEA,OAAO,SAASC,iBAAT,CAA2BC,SAA3B,EAA8CC,UAA9C,EAA2E;AAChF,SAAOD,SAAS,CAACE,WAAV,GAAwBC,QAAxB,CAAiCF,UAAU,CAACC,WAAX,EAAjC,CAAP;AACD;AAED,OAAO,SAASE,mBAAT,CAA6BJ,SAA7B,EAAgDC,UAAhD,EAA6E;AAClF,SAAOD,SAAS,CAACE,WAAV,GAAwBG,UAAxB,CAAmCJ,UAAU,CAACC,WAAX,EAAnC,CAAP;AACD;AAED,OAAO,SAASI,aAAT,CAAuBC,KAAvB,EAAgDC,IAAhD,EAAgF;AACrF,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC,WAAUH,KAAV,EAAiB,CAAC;AAAEI,IAAAA;AAAF,GAAD,KAAeP,mBAAmB,CAACO,KAAD,EAAQH,IAAR,CAAnD,CAA5C;;AACA,QAAM,CAACI,YAAD,IAAiB,WAAUF,iBAAV,EAA6B,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAeZ,iBAAiB,CAACY,KAAD,EAAQH,IAAR,CAA7D,CAAvB;;AACA,SAAO,CAAC,GAAGC,cAAJ,EAAoB,GAAGG,YAAvB,CAAP;AACD;;AAQD,MAAMC,eAAe,GAAIC,KAAD,KAAmB;AACzCC,EAAAA,aAAa,EAAEpB,mBAAmB,CAACmB,KAAD;AADO,CAAnB,CAAxB;;AAIA,MAAME,kBAAkB,GAAG;AACzBtB,EAAAA;AADyB,CAA3B;AAIA,OAAO,MAAMuB,kBAAkB,GAAG7B,OAAO,CAACyB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CE,8BAA7C,CAA3B;AAEP,OAAO,SAASA,8BAAT,CAAwC;AAAEH,EAAAA,aAAF;AAAiBrB,EAAAA,WAAjB;AAA8ByB,EAAAA;AAA9B,CAAxC,EAAwG;AAAA;;AAC7G,QAAM;AAAEC,IAAAA;AAAF,MAAQlC,cAAc,EAA5B;AACA,QAAM,CAACe,UAAD,EAAaoB,aAAb,IAA8BpC,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMqC,eAAe,GAAGtC,OAAO,CAAC,MAAMY,gBAAgB,CAACmB,aAAD,CAAvB,EAAwC,CAACA,aAAD,CAAxC,CAA/B;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCvC,QAAQ,CAACqC,eAAD,CAAhD;AAEA,QAAMG,gBAAgB,GAAG1C,WAAW,CACjC2C,YAAD,IAA0B;AACxBhC,IAAAA,WAAW,CAAC;AAAEiC,MAAAA,IAAI,EAAED;AAAR,KAAD,CAAX;AACAP,IAAAA,KAAK;AACN,GAJiC,EAKlC,CAACA,KAAD,EAAQzB,WAAR,CALkC,CAApC;;AAQA,QAAMkC,aAAa,GAAIpB,IAAD,IAAkB;AACtC,UAAMqB,aAAa,GAAGrB,IAAI,CAACsB,MAAL,GAAc,CAApC;AACA,UAAMC,QAAQ,GAAGF,aAAa,GAAGvB,aAAa,CAACgB,eAAD,EAAkBd,IAAlB,CAAhB,GAA0Cc,eAAxE;AACAE,IAAAA,eAAe,CAACO,QAAD,CAAf;AACD,GAJD;;AAKA,QAAM,CAACC,sBAAD,IAA2BvC,oBAAoB,CAACmC,aAAD,EAAgB9B,cAAhB,CAArD;;AAEA,QAAMmC,QAAQ,GAAIC,KAAD,IAAgD;AAC/D,UAAM;AAAEC,MAAAA;AAAF,QAAYD,KAAK,CAACE,MAAxB;AAEAf,IAAAA,aAAa,CAACc,KAAD,CAAb;AACAH,IAAAA,sBAAsB,CAACG,KAAD,CAAtB;AACD,GALD;;AAOA,QAAME,SAAS,GAAIH,KAAD,IAA4C;AAC5D,UAAMI,UAAU,GAAGJ,KAAK,CAACK,OAAN,KAAkB,EAArC;;AAEA,QAAID,UAAJ,EAAgB;AACdV,MAAAA,aAAa,CAAC3B,UAAD,CAAb;AACD;AACF,GAND;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,kCAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAC,mCADZ;AAEE,IAAA,IAAI,EAAC,iBAFP;AAGE,mBAAY,yBAHd;AAIE,IAAA,WAAW,EAAEmB,CAAC,CAAC,QAAD,CAJhB;AAKE,IAAA,QAAQ,EAAEa,QALZ;AAME,IAAA,KAAK,EAAEhC,UANT;AAOE,IAAA,YAAY,EAAC,KAPf;AAQE,IAAA,SAAS,EAAEoC,SARb;AASE,IAAA,SAAS,MATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAYE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,SAAS,EAAC,qBAFZ;AAGE,mBAAY,+BAHd;AAIE,IAAA,QAAQ,EAAEpC,UAAU,KAAK,EAJ3B;AAKE,IAAA,OAAO,EAAE,MAAM;AACboB,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAO,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF,CAZF,CADF,eA6BE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,YAAY,CAACiB,GAAb,CAAkBC,IAAD,iBAChB,oBAAC,sBAAD;AAAwB,IAAA,GAAG,EAAEA,IAAI,CAACN,KAAlC;AAAyC,IAAA,MAAM,EAAEM,IAAjD;AAAuD,IAAA,WAAW,EAAEhB,gBAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CA7BF,CADF;AAqCD;;GAzEeP,8B;UACAhC,c,EAkBmBO,oB;;;KAnBnByB,8B;;AAfdH,EAAAA,a","sourcesContent":["import React, { HTMLProps, KeyboardEvent, useCallback, useMemo, useState } from 'react'\n\nimport { partition } from 'lodash'\n\nimport { useTranslation } from 'react-i18next'\nimport { MdClear } from 'react-icons/md'\nimport { connect } from 'react-redux'\nimport { Button, Input, InputGroup, InputGroupAddon } from 'reactstrap'\nimport { ActionCreator } from 'typescript-fsa'\nimport { useDebouncedCallback } from 'use-debounce'\n\nimport { State } from '../../../state/reducer'\nimport { SetScenarioParams, setScenario } from '../../../state/scenario/scenario.actions'\nimport { selectScenarioNames } from '../../../state/scenario/scenario.selectors'\nimport { stringsToOptions } from '../../Form/FormDropdownOption'\n\nimport { ScenarioLoaderListItem } from './ScenarioLoaderListItem'\nimport type { ScenarioOption } from './ScenarioOption'\n\nimport './ScenarioLoader.scss'\n\nconst DEBOUNCE_DELAY = 500\n\nexport function includesLowerCase(candidate: string, searchTerm: string): boolean {\n  return candidate.toLowerCase().includes(searchTerm.toLowerCase())\n}\n\nexport function startsWithLowerCase(candidate: string, searchTerm: string): boolean {\n  return candidate.toLowerCase().startsWith(searchTerm.toLowerCase())\n}\n\nexport function searchOptions(items: ScenarioOption[], term: string): ScenarioOption[] {\n  const [itemsStartWith, itemsNotStartWith] = partition(items, ({ label }) => startsWithLowerCase(label, term))\n  const [itemsInclude] = partition(itemsNotStartWith, ({ label }) => includesLowerCase(label, term))\n  return [...itemsStartWith, ...itemsInclude]\n}\n\nexport interface ScenarioLoaderListProps extends HTMLProps<HTMLDivElement> {\n  scenarioNames: string[]\n  setScenario: ActionCreator<SetScenarioParams>\n  close(): void\n}\n\nconst mapStateToProps = (state: State) => ({\n  scenarioNames: selectScenarioNames(state),\n})\n\nconst mapDispatchToProps = {\n  setScenario,\n}\n\nexport const ScenarioLoaderList = connect(mapStateToProps, mapDispatchToProps)(ScenarioLoaderListDisconnected)\n\nexport function ScenarioLoaderListDisconnected({ scenarioNames, setScenario, close }: ScenarioLoaderListProps) {\n  const { t } = useTranslation()\n  const [searchTerm, setSearchTerm] = useState('')\n  const scenarioOptions = useMemo(() => stringsToOptions(scenarioNames), [scenarioNames])\n  const [filteredRows, setFilteredRows] = useState(scenarioOptions)\n\n  const onScenarioSelect = useCallback(\n    (scenarioName: string) => {\n      setScenario({ name: scenarioName })\n      close()\n    },\n    [close, setScenario],\n  )\n\n  const executeFilter = (term: string) => {\n    const hasSearchTerm = term.length > 0\n    const filtered = hasSearchTerm ? searchOptions(scenarioOptions, term) : scenarioOptions\n    setFilteredRows(filtered)\n  }\n  const [executeFilterDebounced] = useDebouncedCallback(executeFilter, DEBOUNCE_DELAY)\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n\n    setSearchTerm(value)\n    executeFilterDebounced(value)\n  }\n\n  const onKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    const isEnterKey = event.keyCode === 13\n\n    if (isEnterKey) {\n      executeFilter(searchTerm)\n    }\n  }\n\n  return (\n    <div className=\"scenario-loader-list-container\">\n      <InputGroup className=\"scenario-loader-list-input-group\">\n        <Input\n          className=\"scenario-loader-list-search-input\"\n          name=\"search-scenario\"\n          data-testid=\"PresetLoaderDialogInput\"\n          placeholder={t('Search')}\n          onChange={onChange}\n          value={searchTerm}\n          autoComplete=\"off\"\n          onKeyDown={onKeyDown}\n          autoFocus\n        />\n        <InputGroupAddon addonType=\"append\">\n          <Button\n            color=\"secondary\"\n            className=\"btn-search-scenario\"\n            data-testid=\"PresetLoaderDialogClearButton\"\n            disabled={searchTerm === ''}\n            onClick={() => {\n              setSearchTerm('')\n              executeFilter('')\n            }}\n          >\n            <MdClear />\n          </Button>\n        </InputGroupAddon>\n      </InputGroup>\n\n      <div className=\"mt-2 scenario-loader-list\">\n        {filteredRows.map((item) => (\n          <ScenarioLoaderListItem key={item.value} option={item} onItemClick={onScenarioSelect} />\n        ))}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}