{"ast":null,"code":"import _pt from \"prop-types\";\nimport _zipWith from \"lodash/zipWith\";\nimport _pick from \"lodash/pick\";\nimport _omit from \"lodash/omit\";\nimport _isEqual from \"lodash/isEqual\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Main.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Formik } from 'formik';\nimport { Col, Row } from 'reactstrap';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { selectScenarioData, selectAgeDistributionData, selectSeverityDistributionData, selectCanRun } from '../../state/scenario/scenario.selectors';\nimport { selectAreResultsMaximized } from '../../state/settings/settings.selectors';\nimport { setAgeDistributionData, setCanRun, setScenarioData, setSeverityDistributionData } from '../../state/scenario/scenario.actions';\nimport { algorithmRunTrigger } from '../../state/algorithm/algorithm.actions';\nimport { ColCustom } from '../Layout/ColCustom';\nimport { schema } from './validation/schema';\nimport { Disclaimer } from './Disclaimer';\nimport { ResultsCard } from './Results/ResultsCard';\nimport { ScenarioCard } from './Scenario/ScenarioCard';\nimport './Main.scss';\n\nfunction getColumnSizes(areResultsMaximized) {\n  if (areResultsMaximized) {\n    return {\n      colScenario: {\n        xl: 4\n      },\n      colResults: {\n        xl: 8\n      }\n    };\n  }\n\n  return {\n    colScenario: {\n      xl: 6\n    },\n    colResults: {\n      xl: 6\n    }\n  };\n}\n\nfunction toFormData({\n  scenarioData,\n  severityDistributionData,\n  ageDistributionData\n}) {\n  const severity = _zipWith(severityDistributionData, ageDistributionData, (severityRow, ageDistributionRow) => ({\n    id: severityRow.ageGroup,\n    ...severityRow,\n    ...ageDistributionRow\n  }));\n\n  return { ...scenarioData,\n    severity\n  };\n}\n\nfunction fromFormData(formData) {\n  const scenarioData = _omit(formData, ['severity']);\n\n  const severityDistributionData = formData.severity.map(row => _omit(row, ['id', 'population']));\n  const ageDistributionData = formData.severity.map(row => _pick(row, ['ageGroup', 'population']));\n  return {\n    scenarioData,\n    severityDistributionData,\n    ageDistributionData\n  };\n}\n\nconst mapStateToProps = state => ({\n  canRun: selectCanRun(state),\n  scenarioData: selectScenarioData(state),\n  ageDistributionData: selectAgeDistributionData(state),\n  severityDistributionData: selectSeverityDistributionData(state),\n  areResultsMaximized: selectAreResultsMaximized(state)\n});\n\nconst mapDispatchToProps = {\n  algorithmRunTrigger,\n  setCanRun,\n  setScenarioData,\n  setSeverityDistributionData,\n  setAgeDistributionData\n};\nexport const Main = connect(mapStateToProps, mapDispatchToProps)(MainDisconnected);\nexport function MainDisconnected({\n  canRun,\n  scenarioData,\n  ageDistributionData,\n  severityDistributionData,\n  areResultsMaximized,\n  algorithmRunTrigger,\n  setCanRun,\n  setScenarioData,\n  setSeverityDistributionData,\n  setAgeDistributionData\n}) {\n  _s();\n\n  const [validateFormAndUpdateState] = useDebouncedCallback(newFormDataDangerous => {\n    return schema.validate(newFormDataDangerous).then(newFormDataValid => {\n      if (!canRun) {\n        setCanRun(true);\n      }\n\n      const {\n        scenarioData: newScenarioData,\n        ageDistributionData: newAgeDistributionData,\n        severityDistributionData: newSeverityDistributionData\n      } = fromFormData(newFormDataValid);\n\n      if (!_isEqual(newScenarioData, scenarioData)) {\n        setScenarioData(newScenarioData);\n      }\n\n      if (!_isEqual(newSeverityDistributionData, severityDistributionData)) {\n        setSeverityDistributionData(newSeverityDistributionData);\n      }\n\n      if (!_isEqual(newAgeDistributionData, ageDistributionData)) {\n        setAgeDistributionData(newAgeDistributionData);\n      }\n\n      return newFormDataValid;\n    }).catch(error => {\n      if (canRun) {\n        setCanRun(false);\n      }\n\n      return error.errors;\n    });\n  }, 500);\n  const formData = useMemo(() => toFormData({\n    scenarioData,\n    ageDistributionData,\n    severityDistributionData\n  }), [ageDistributionData, scenarioData, severityDistributionData]);\n  const handleSubmit = useCallback((_0, {\n    setSubmitting\n  }) => {\n    setSubmitting(true);\n    algorithmRunTrigger();\n    setSubmitting(false);\n  }, [algorithmRunTrigger]);\n  const {\n    colScenario,\n    colResults\n  } = getColumnSizes(areResultsMaximized);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Disclaimer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: formData,\n    onSubmit: handleSubmit,\n    validate: validateFormAndUpdateState,\n    validationSchema: schema,\n    validateOnMount: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    isValid,\n    isSubmitting\n  }) => {\n    return /*#__PURE__*/React.createElement(Form, {\n      noValidate: true,\n      className: \"form form-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"row-form-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(ColCustom, Object.assign({\n      lg: 4\n    }, colScenario, {\n      className: \"col-wrapper-scenario animate-flex-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ScenarioCard, {\n      errors: errors,\n      touched: touched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(ColCustom, Object.assign({\n      lg: 8\n    }, colResults, {\n      className: \"col-wrapper-results animate-flex-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ResultsCard, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 23\n      }\n    }))));\n  }))));\n}\n\n_s(MainDisconnected, \"aj64BekiP2tnadVoC1vt39A+1qY=\", false, function () {\n  return [useDebouncedCallback];\n});\n\n_c = MainDisconnected;\nMainDisconnected.propTypes = {\n  canRun: _pt.bool.isRequired,\n  ageDistributionData: _pt.array.isRequired,\n  severityDistributionData: _pt.array.isRequired,\n  areResultsMaximized: _pt.bool.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"MainDisconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Main.tsx"],"names":["React","useCallback","useMemo","connect","Form","Formik","Col","Row","useDebouncedCallback","selectScenarioData","selectAgeDistributionData","selectSeverityDistributionData","selectCanRun","selectAreResultsMaximized","setAgeDistributionData","setCanRun","setScenarioData","setSeverityDistributionData","algorithmRunTrigger","ColCustom","schema","Disclaimer","ResultsCard","ScenarioCard","getColumnSizes","areResultsMaximized","colScenario","xl","colResults","toFormData","scenarioData","severityDistributionData","ageDistributionData","severity","severityRow","ageDistributionRow","id","ageGroup","fromFormData","formData","map","row","mapStateToProps","state","canRun","mapDispatchToProps","Main","MainDisconnected","validateFormAndUpdateState","newFormDataDangerous","validate","then","newFormDataValid","newScenarioData","newAgeDistributionData","newSeverityDistributionData","catch","error","errors","handleSubmit","_0","setSubmitting","values","touched","isValid","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react'\n\nimport { isEqual, omit, pick, zipWith } from 'lodash'\n\nimport { connect } from 'react-redux'\nimport { Form, Formik, FormikErrors, FormikValues, FormikHelpers } from 'formik'\nimport { Col, Row } from 'reactstrap'\nimport { ActionCreator } from 'typescript-fsa'\nimport { useDebouncedCallback } from 'use-debounce'\n\nimport type { ScenarioDatum, SeverityDistributionDatum, AgeDistributionDatum } from '../../algorithms/types/Param.types'\n\nimport type { State } from '../../state/reducer'\nimport {\n  selectScenarioData,\n  selectAgeDistributionData,\n  selectSeverityDistributionData,\n  selectCanRun,\n} from '../../state/scenario/scenario.selectors'\nimport { selectAreResultsMaximized } from '../../state/settings/settings.selectors'\nimport {\n  setAgeDistributionData,\n  setCanRun,\n  setScenarioData,\n  setSeverityDistributionData,\n} from '../../state/scenario/scenario.actions'\nimport { algorithmRunTrigger } from '../../state/algorithm/algorithm.actions'\n\nimport { ColCustom } from '../Layout/ColCustom'\n\nimport type { AgeGroupRow } from './SeverityTable/SeverityTable'\nimport { schema } from './validation/schema'\nimport { Disclaimer } from './Disclaimer'\nimport { ResultsCard } from './Results/ResultsCard'\nimport { ScenarioCard } from './Scenario/ScenarioCard'\n\nimport './Main.scss'\n\ninterface FormikValidationErrors extends Error {\n  errors: FormikErrors<FormikValues>\n}\n\nfunction getColumnSizes(areResultsMaximized: boolean) {\n  if (areResultsMaximized) {\n    return { colScenario: { xl: 4 }, colResults: { xl: 8 } }\n  }\n\n  return { colScenario: { xl: 6 }, colResults: { xl: 6 } }\n}\n\nexport interface ScenarioParams {\n  scenarioData: ScenarioDatum\n  ageDistributionData: AgeDistributionDatum[]\n  severityDistributionData: SeverityDistributionDatum[]\n}\n\nfunction toFormData({ scenarioData, severityDistributionData, ageDistributionData }: ScenarioParams): FormData {\n  const severity = zipWith(severityDistributionData, ageDistributionData, (severityRow, ageDistributionRow) => ({\n    id: severityRow.ageGroup,\n    ...severityRow,\n    ...ageDistributionRow,\n  }))\n  return { ...scenarioData, severity }\n}\n\nfunction fromFormData(formData: FormData): ScenarioParams {\n  const scenarioData = omit(formData, ['severity']) as ScenarioDatum\n  const severityDistributionData = formData.severity.map((row) => omit(row, ['id', 'population']))\n  const ageDistributionData = formData.severity.map((row) => pick(row, ['ageGroup', 'population']))\n  return { scenarioData, severityDistributionData, ageDistributionData }\n}\n\nexport interface FormData extends ScenarioDatum {\n  severity: AgeGroupRow[]\n}\n\nexport interface MainProps {\n  canRun: boolean\n  scenarioData: ScenarioDatum\n  ageDistributionData: AgeDistributionDatum[]\n  severityDistributionData: SeverityDistributionDatum[]\n  areResultsMaximized: boolean\n  setCanRun: ActionCreator<boolean>\n  algorithmRunTrigger: ActionCreator<void>\n  setScenarioData: ActionCreator<ScenarioDatum>\n  setSeverityDistributionData: ActionCreator<SeverityDistributionDatum[]>\n  setAgeDistributionData: ActionCreator<AgeDistributionDatum[]>\n}\n\nconst mapStateToProps = (state: State) => ({\n  canRun: selectCanRun(state),\n  scenarioData: selectScenarioData(state),\n  ageDistributionData: selectAgeDistributionData(state),\n  severityDistributionData: selectSeverityDistributionData(state),\n  areResultsMaximized: selectAreResultsMaximized(state),\n})\n\nconst mapDispatchToProps = {\n  algorithmRunTrigger,\n  setCanRun,\n  setScenarioData,\n  setSeverityDistributionData,\n  setAgeDistributionData,\n}\n\nexport const Main = connect(mapStateToProps, mapDispatchToProps)(MainDisconnected)\n\nexport function MainDisconnected({\n  canRun,\n  scenarioData,\n  ageDistributionData,\n  severityDistributionData,\n  areResultsMaximized,\n  algorithmRunTrigger,\n  setCanRun,\n  setScenarioData,\n  setSeverityDistributionData,\n  setAgeDistributionData,\n}: MainProps) {\n  const [validateFormAndUpdateState] = useDebouncedCallback((newFormDataDangerous: FormData) => {\n    return schema\n      .validate(newFormDataDangerous)\n      .then((newFormDataValid) => {\n        if (!canRun) {\n          setCanRun(true)\n        }\n\n        const {\n          scenarioData: newScenarioData,\n          ageDistributionData: newAgeDistributionData,\n          severityDistributionData: newSeverityDistributionData,\n        } = fromFormData(newFormDataValid)\n\n        if (!isEqual(newScenarioData, scenarioData)) {\n          setScenarioData(newScenarioData)\n        }\n\n        if (!isEqual(newSeverityDistributionData, severityDistributionData)) {\n          setSeverityDistributionData(newSeverityDistributionData)\n        }\n\n        if (!isEqual(newAgeDistributionData, ageDistributionData)) {\n          setAgeDistributionData(newAgeDistributionData)\n        }\n\n        return newFormDataValid\n      })\n      .catch((error: FormikValidationErrors) => {\n        if (canRun) {\n          setCanRun(false)\n        }\n        return error.errors\n      })\n  }, 500)\n\n  const formData = useMemo(() => toFormData({ scenarioData, ageDistributionData, severityDistributionData }), [\n    ageDistributionData,\n    scenarioData,\n    severityDistributionData,\n  ])\n\n  const handleSubmit = useCallback(\n    (_0: FormData, { setSubmitting }: FormikHelpers<FormData>) => {\n      setSubmitting(true)\n      algorithmRunTrigger()\n      setSubmitting(false)\n    },\n    [algorithmRunTrigger],\n  )\n\n  const { colScenario, colResults } = getColumnSizes(areResultsMaximized)\n\n  return (\n    <>\n      <Disclaimer />\n      <Row noGutters className=\"row-main\">\n        <Col>\n          <Formik\n            enableReinitialize\n            initialValues={formData}\n            onSubmit={handleSubmit}\n            validate={validateFormAndUpdateState}\n            validationSchema={schema}\n            validateOnMount\n          >\n            {({ values, errors, touched, isValid, isSubmitting }) => {\n              return (\n                <Form noValidate className=\"form form-main\">\n                  <Row className=\"row-form-main\">\n                    <ColCustom lg={4} {...colScenario} className=\"col-wrapper-scenario animate-flex-width\">\n                      <ScenarioCard errors={errors} touched={touched} />\n                    </ColCustom>\n\n                    <ColCustom lg={8} {...colResults} className=\"col-wrapper-results animate-flex-width\">\n                      <ResultsCard />\n                    </ColCustom>\n                  </Row>\n                </Form>\n              )\n            }}\n          </Formik>\n        </Col>\n      </Row>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}