{"ast":null,"code":"import _last from \"lodash/last\";\n\nvar _last2;\n\nimport { getOrThrow } from '../../helpers/getOrThrow';\nimport urlv1 from './v1/encode';\nexport const URL_ENCODERS = new Map(Object.entries({\n  '1': urlv1\n}));\nexport const URL_ENCODER_VERSIONS = Array.from(URL_ENCODERS.keys()).sort();\nexport const URL_ENCODER_VERSION_LATEST = (_last2 = _last(URL_ENCODER_VERSIONS)) !== null && _last2 !== void 0 ? _last2 : '1';\nexport const URL_ENCODER_LATEST = getOrThrow(URL_ENCODERS, URL_ENCODER_VERSION_LATEST);\n_c = URL_ENCODER_LATEST;\n\nvar _c;\n\n$RefreshReg$(_c, \"URL_ENCODER_LATEST\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/io/encoding/versioning.ts"],"names":["getOrThrow","urlv1","URL_ENCODERS","Map","Object","entries","URL_ENCODER_VERSIONS","Array","from","keys","sort","URL_ENCODER_VERSION_LATEST","URL_ENCODER_LATEST"],"mappings":";;;;AAIA,SAASA,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AAaA,OAAO,MAAMC,YAAY,GAAG,IAAIC,GAAJ,CAC1BC,MAAM,CAACC,OAAP,CAAe;AACb,OAAKJ;AADQ,CAAf,CAD0B,CAArB;AAKP,OAAO,MAAMK,oBAAoB,GAAGC,KAAK,CAACC,IAAN,CAAWN,YAAY,CAACO,IAAb,EAAX,EAAgCC,IAAhC,EAA7B;AACP,OAAO,MAAMC,0BAA0B,aAAG,MAAKL,oBAAL,CAAH,2CAAiC,GAAjE;AACP,OAAO,MAAMM,kBAAkB,GAAGZ,UAAU,CAACE,YAAD,EAAeS,0BAAf,CAArC;KAAMC,kB","sourcesContent":["import { last } from 'lodash'\n\nimport type { ScenarioParameters } from '../../algorithms/types/Param.types'\n\nimport { getOrThrow } from '../../helpers/getOrThrow'\n\nimport urlv1 from './v1/encode'\n\nexport type Serializer = (input: ScenarioParameters) => string\nexport type Deserializer = (input: string) => ScenarioParameters\n\nexport type UrlEncoder = (obj: Record<string, unknown>) => string\nexport type UrlDecoder = (str: string) => Record<string, unknown>\n\nexport interface UrlEncoders {\n  encode: UrlEncoder\n  decode: UrlDecoder\n}\n\nexport const URL_ENCODERS = new Map<string, UrlEncoders>(\n  Object.entries({\n    '1': urlv1,\n  }),\n)\nexport const URL_ENCODER_VERSIONS = Array.from(URL_ENCODERS.keys()).sort()\nexport const URL_ENCODER_VERSION_LATEST = last(URL_ENCODER_VERSIONS) ?? '1'\nexport const URL_ENCODER_LATEST = getOrThrow(URL_ENCODERS, URL_ENCODER_VERSION_LATEST)\n"]},"metadata":{},"sourceType":"module"}