{"ast":null,"code":"import { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistStore } from 'redux-persist';\nimport createRootReducer from './reducer';\nimport createRootSaga from './sagas';\nconst development = process.env.NODE_ENV === 'development';\nconst debug = development || process.env.DEBUGGABLE_PROD === '1';\nexport function persistStoreAsync(store, options) {\n  return new Promise(resolve => {\n    const persistor = persistStore(store, options, () => resolve(persistor));\n  });\n}\nexport async function configureStore() {\n  const history = createBrowserHistory();\n  const sagaMiddleware = createSagaMiddleware();\n  let middlewares = [routerMiddleware(history), sagaMiddleware].filter(Boolean);\n\n  if (process.env.DEV_ENABLE_REDUX_IMMUTABLE_STATE_INVARIANT === '1') {\n    middlewares = [...middlewares, reduxImmutableStateInvariant()];\n  }\n\n  let enhancer = applyMiddleware(...middlewares);\n\n  if (debug && composeWithDevTools) {\n    enhancer = composeWithDevTools({\n      trace: true,\n      traceLimit: 25,\n      actionsBlacklist: '@@INIT'\n    })(enhancer);\n  }\n\n  const store = createStore(createRootReducer(history), {}, enhancer);\n  const persistor = await persistStoreAsync(store, {});\n  let rootSagaTask = sagaMiddleware.run(createRootSaga());\n\n  if (module.hot) {\n    // Setup hot reloading of root reducer\n    module.hot.accept('./reducer', () => {\n      store.replaceReducer(createRootReducer(history));\n      console.info('[HMR] root reducer reloaded succesfully');\n    }); // Setup hot reloading of root saga\n\n    module.hot.accept('./sagas', () => {\n      rootSagaTask.cancel();\n      rootSagaTask.toPromise().then(() => {\n        rootSagaTask = sagaMiddleware.run(createRootSaga());\n        console.info('[HMR] root saga reloaded succesfully');\n        return true;\n      }).catch(error => console.error(error));\n    });\n  }\n\n  return {\n    store,\n    history,\n    persistor\n  };\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/state/store.ts"],"names":["routerMiddleware","createBrowserHistory","applyMiddleware","createStore","composeWithDevTools","reduxImmutableStateInvariant","createSagaMiddleware","persistStore","createRootReducer","createRootSaga","development","process","env","NODE_ENV","debug","DEBUGGABLE_PROD","persistStoreAsync","store","options","Promise","resolve","persistor","configureStore","history","sagaMiddleware","middlewares","filter","Boolean","DEV_ENABLE_REDUX_IMMUTABLE_STATE_INVARIANT","enhancer","trace","traceLimit","actionsBlacklist","rootSagaTask","run","module","hot","accept","replaceReducer","console","info","cancel","toPromise","then","catch","error"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,wBAAjC;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA+E,OAA/E;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,4BAAP,MAAyC,iCAAzC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,iBAAP,MAA8B,WAA9B;AACA,OAAOC,cAAP,MAA2B,SAA3B;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7C;AACA,MAAMC,KAAK,GAAGJ,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAYG,eAAZ,KAAgC,GAA7D;AAEA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAyCC,OAAzC,EAAwF;AAC7F,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAMC,SAAS,GAAGd,YAAY,CAACU,KAAD,EAAQC,OAAR,EAAiB,MAAME,OAAO,CAACC,SAAD,CAA9B,CAA9B;AACD,GAFM,CAAP;AAGD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,OAAO,GAAGtB,oBAAoB,EAApC;AAEA,QAAMuB,cAAc,GAAGlB,oBAAoB,EAA3C;AACA,MAAImB,WAAW,GAAG,CAACzB,gBAAgB,CAACuB,OAAD,CAAjB,EAA4BC,cAA5B,EAA4CE,MAA5C,CAAmDC,OAAnD,CAAlB;;AAEA,MAAIhB,OAAO,CAACC,GAAR,CAAYgB,0CAAZ,KAA2D,GAA/D,EAAoE;AAClEH,IAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAiBpB,4BAA4B,EAA7C,CAAd;AACD;;AAED,MAAIwB,QAAQ,GAAG3B,eAAe,CAAC,GAAGuB,WAAJ,CAA9B;;AAEA,MAAIX,KAAK,IAAIV,mBAAb,EAAkC;AAChCyB,IAAAA,QAAQ,GAAGzB,mBAAmB,CAAC;AAC7B0B,MAAAA,KAAK,EAAE,IADsB;AAE7BC,MAAAA,UAAU,EAAE,EAFiB;AAG7BC,MAAAA,gBAAgB,EAAE;AAHW,KAAD,CAAnB,CAIRH,QAJQ,CAAX;AAKD;;AAED,QAAMZ,KAAK,GAAGd,WAAW,CAACK,iBAAiB,CAACe,OAAD,CAAlB,EAA6B,EAA7B,EAAiCM,QAAjC,CAAzB;AACA,QAAMR,SAAS,GAAG,MAAML,iBAAiB,CAACC,KAAD,EAAQ,EAAR,CAAzC;AAEA,MAAIgB,YAAY,GAAGT,cAAc,CAACU,GAAf,CAAmBzB,cAAc,EAAjC,CAAnB;;AAEA,MAAI0B,MAAM,CAACC,GAAX,EAAgB;AACd;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,WAAlB,EAA+B,MAAM;AACnCpB,MAAAA,KAAK,CAACqB,cAAN,CAAqB9B,iBAAiB,CAACe,OAAD,CAAtC;AACAgB,MAAAA,OAAO,CAACC,IAAR,CAAa,yCAAb;AACD,KAHD,EAFc,CAOd;;AACAL,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,SAAlB,EAA6B,MAAM;AACjCJ,MAAAA,YAAY,CAACQ,MAAb;AACAR,MAAAA,YAAY,CACTS,SADH,GAEGC,IAFH,CAEQ,MAAM;AACVV,QAAAA,YAAY,GAAGT,cAAc,CAACU,GAAf,CAAmBzB,cAAc,EAAjC,CAAf;AACA8B,QAAAA,OAAO,CAACC,IAAR,CAAa,sCAAb;AACA,eAAO,IAAP;AACD,OANH,EAOGI,KAPH,CAOUC,KAAD,IAAkBN,OAAO,CAACM,KAAR,CAAcA,KAAd,CAP3B;AAQD,KAVD;AAWD;;AAED,SAAO;AAAE5B,IAAAA,KAAF;AAASM,IAAAA,OAAT;AAAkBF,IAAAA;AAAlB,GAAP;AACD","sourcesContent":["import { routerMiddleware } from 'connected-react-router'\nimport { createBrowserHistory } from 'history'\nimport { applyMiddleware, createStore, StoreEnhancer, Store, Middleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { PersistorOptions, Persistor } from 'redux-persist/es/types'\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant'\nimport createSagaMiddleware from 'redux-saga'\n\nimport { persistStore } from 'redux-persist'\n\nimport createRootReducer from './reducer'\nimport createRootSaga from './sagas'\n\nconst development = process.env.NODE_ENV === 'development'\nconst debug = development || process.env.DEBUGGABLE_PROD === '1'\n\nexport function persistStoreAsync(store: Store, options: PersistorOptions): Promise<Persistor> {\n  return new Promise((resolve) => {\n    const persistor = persistStore(store, options, () => resolve(persistor))\n  })\n}\n\nexport async function configureStore() {\n  const history = createBrowserHistory()\n\n  const sagaMiddleware = createSagaMiddleware()\n  let middlewares = [routerMiddleware(history), sagaMiddleware].filter(Boolean)\n\n  if (process.env.DEV_ENABLE_REDUX_IMMUTABLE_STATE_INVARIANT === '1') {\n    middlewares = [...middlewares, reduxImmutableStateInvariant() as Middleware<string>]\n  }\n\n  let enhancer = applyMiddleware(...middlewares)\n\n  if (debug && composeWithDevTools) {\n    enhancer = composeWithDevTools({\n      trace: true,\n      traceLimit: 25,\n      actionsBlacklist: '@@INIT',\n    })(enhancer)\n  }\n\n  const store = createStore(createRootReducer(history), {}, enhancer)\n  const persistor = await persistStoreAsync(store, {})\n\n  let rootSagaTask = sagaMiddleware.run(createRootSaga())\n\n  if (module.hot) {\n    // Setup hot reloading of root reducer\n    module.hot.accept('./reducer', () => {\n      store.replaceReducer(createRootReducer(history))\n      console.info('[HMR] root reducer reloaded succesfully')\n    })\n\n    // Setup hot reloading of root saga\n    module.hot.accept('./sagas', () => {\n      rootSagaTask.cancel()\n      rootSagaTask\n        .toPromise()\n        .then(() => {\n          rootSagaTask = sagaMiddleware.run(createRootSaga())\n          console.info('[HMR] root saga reloaded succesfully')\n          return true\n        })\n        .catch((error: Error) => console.error(error))\n    })\n  }\n\n  return { store, history, persistor }\n}\n\ndeclare const window: Window & {\n  __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: StoreEnhancer\n}\n\ndeclare const module: NodeHotModule\n"]},"metadata":{},"sourceType":"module"}