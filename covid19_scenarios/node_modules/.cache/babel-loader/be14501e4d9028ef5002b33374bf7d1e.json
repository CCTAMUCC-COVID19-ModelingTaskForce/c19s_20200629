{"ast":null,"code":"import _pt from \"prop-types\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Scenario/ScenarioCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { Row, Col } from 'reactstrap';\nimport { useTranslation } from 'react-i18next';\nimport { renameCurrentScenario } from '../../../state/scenario/scenario.actions';\nimport { selectAgeDistributionData, selectScenarioData, selectScenarioNames, selectSeverityDistributionData, selectCurrentScenarioName } from '../../../state/scenario/scenario.selectors';\nimport { selectAreResultsMaximized } from '../../../state/settings/settings.selectors';\nimport { ColCustom } from '../../Layout/ColCustom';\nimport { CardWithControls } from '../../Form/CardWithControls';\nimport { ScenarioLoader } from '../ScenarioLoader/ScenarioLoader';\nimport { ScenarioCardContainment } from './ScenarioCardContainment';\nimport { ScenarioCardEpidemiological } from './ScenarioCardEpidemiological';\nimport { ScenarioCardPopulation } from './ScenarioCardPopulation';\nimport { SeverityCard } from './SeverityCard';\nimport { ScenarioTitle } from './ScenarioTitle';\nimport './ScenarioTitle.scss';\nexport function getColumnSizes(areResultsMaximized) {\n  if (areResultsMaximized) {\n    return {\n      colPopulation: {\n        xxl: 6\n      },\n      colEpidemiological: {\n        xxl: 6\n      }\n    };\n  }\n\n  return {\n    colPopulation: {\n      xl: 6\n    },\n    colEpidemiological: {\n      xl: 6\n    }\n  };\n}\n\nconst mapStateToProps = state => ({\n  scenarioNames: selectScenarioNames(state),\n  currentScenarioName: selectCurrentScenarioName(state),\n  scenarioData: selectScenarioData(state),\n  ageDistributionData: selectAgeDistributionData(state),\n  severityDistributionData: selectSeverityDistributionData(state),\n  areResultsMaximized: selectAreResultsMaximized(state)\n});\n\nconst mapDispatchToProps = {\n  renameCurrentScenario\n};\nexport function ScenarioCardDisconnected({\n  currentScenarioName,\n  renameCurrentScenario,\n  areResultsMaximized,\n  errors,\n  touched\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    colPopulation,\n    colEpidemiological\n  } = getColumnSizes(areResultsMaximized); // prettier-ignore\n\n  const handleScenarioRename = useCallback(newScenario => renameCurrentScenario({\n    name: newScenario\n  }), [renameCurrentScenario]);\n  return /*#__PURE__*/React.createElement(CardWithControls, {\n    identifier: \"scenarioName\",\n    className: \"card-scenario\",\n    labelComponent: /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"p-0 m-0 text-truncate d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 23\n      }\n    }, t('Scenario')),\n    help: t(`This section allows to setup a scenario. A \"scenario\" is a set of parameters that describes a combination of population and epidemiological factors as well as a set of mitigation measures and severity assumptions to be used by the simulator.`),\n    controlsComponent: /*#__PURE__*/React.createElement(ScenarioLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 26\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-scenario-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xl: 12,\n    className: \"col-scenario-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ScenarioTitle, {\n    title: currentScenarioName,\n    onRename: handleScenarioRename,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-scenario-population-epidemiological\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ColCustom, Object.assign({}, colPopulation, {\n    className: \"col-scenario-population\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ScenarioCardPopulation, {\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(ColCustom, Object.assign({}, colEpidemiological, {\n    className: \"col-scenario-epidemiological\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ScenarioCardEpidemiological, {\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-scenario-mitigation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"col-scenario-mitigation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ScenarioCardContainment, {\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-scenario-severity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"col-scenario-severity\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SeverityCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  })))));\n}\n\n_s(ScenarioCardDisconnected, \"GApXVw/Gkd93QbTXdPQ6JZod4Hs=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ScenarioCardDisconnected;\nScenarioCardDisconnected.propTypes = {\n  scenarioNames: _pt.arrayOf(_pt.string).isRequired,\n  currentScenarioName: _pt.string.isRequired,\n  areResultsMaximized: _pt.bool.isRequired\n};\nconst ScenarioCard = connect(mapStateToProps, mapDispatchToProps)(ScenarioCardDisconnected);\nexport { ScenarioCard };\n\nvar _c;\n\n$RefreshReg$(_c, \"ScenarioCardDisconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Scenario/ScenarioCard.tsx"],"names":["React","useCallback","connect","Row","Col","useTranslation","renameCurrentScenario","selectAgeDistributionData","selectScenarioData","selectScenarioNames","selectSeverityDistributionData","selectCurrentScenarioName","selectAreResultsMaximized","ColCustom","CardWithControls","ScenarioLoader","ScenarioCardContainment","ScenarioCardEpidemiological","ScenarioCardPopulation","SeverityCard","ScenarioTitle","getColumnSizes","areResultsMaximized","colPopulation","xxl","colEpidemiological","xl","mapStateToProps","state","scenarioNames","currentScenarioName","scenarioData","ageDistributionData","severityDistributionData","mapDispatchToProps","ScenarioCardDisconnected","errors","touched","t","handleScenarioRename","newScenario","name","ScenarioCard"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAGA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,GAAT,EAAcC,GAAd,QAAyB,YAAzB;AAEA,SAASC,cAAT,QAA+B,eAA/B;AAEA,SAASC,qBAAT,QAAyD,0CAAzD;AAGA,SACEC,yBADF,EAEEC,kBAFF,EAGEC,mBAHF,EAIEC,8BAJF,EAKEC,yBALF,QAMO,4CANP;AAOA,SAASC,yBAAT,QAA0C,4CAA1C;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AAEA,SAASC,cAAT,QAA+B,kCAA/B;AAEA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,sBAAP;AAEA,OAAO,SAASC,cAAT,CAAwBC,mBAAxB,EAAsD;AAC3D,MAAIA,mBAAJ,EAAyB;AACvB,WAAO;AAAEC,MAAAA,aAAa,EAAE;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAAjB;AAA6BC,MAAAA,kBAAkB,EAAE;AAAED,QAAAA,GAAG,EAAE;AAAP;AAAjD,KAAP;AACD;;AAED,SAAO;AAAED,IAAAA,aAAa,EAAE;AAAEG,MAAAA,EAAE,EAAE;AAAN,KAAjB;AAA4BD,IAAAA,kBAAkB,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAN;AAAhD,GAAP;AACD;;AAWD,MAAMC,eAAe,GAAIC,KAAD,KAAmB;AACzCC,EAAAA,aAAa,EAAEpB,mBAAmB,CAACmB,KAAD,CADO;AAEzCE,EAAAA,mBAAmB,EAAEnB,yBAAyB,CAACiB,KAAD,CAFL;AAGzCG,EAAAA,YAAY,EAAEvB,kBAAkB,CAACoB,KAAD,CAHS;AAIzCI,EAAAA,mBAAmB,EAAEzB,yBAAyB,CAACqB,KAAD,CAJL;AAKzCK,EAAAA,wBAAwB,EAAEvB,8BAA8B,CAACkB,KAAD,CALf;AAMzCN,EAAAA,mBAAmB,EAAEV,yBAAyB,CAACgB,KAAD;AANL,CAAnB,CAAxB;;AASA,MAAMM,kBAAkB,GAAG;AACzB5B,EAAAA;AADyB,CAA3B;AAIA,OAAO,SAAS6B,wBAAT,CAAkC;AACvCL,EAAAA,mBADuC;AAEvCxB,EAAAA,qBAFuC;AAGvCgB,EAAAA,mBAHuC;AAIvCc,EAAAA,MAJuC;AAKvCC,EAAAA;AALuC,CAAlC,EAMe;AAAA;;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAQjC,cAAc,EAA5B;AAEA,QAAM;AAAEkB,IAAAA,aAAF;AAAiBE,IAAAA;AAAjB,MAAwCJ,cAAc,CAACC,mBAAD,CAA5D,CAHoB,CAKpB;;AACA,QAAMiB,oBAAoB,GAAGtC,WAAW,CACrCuC,WAAD,IAAyBlC,qBAAqB,CAAC;AAAEmC,IAAAA,IAAI,EAAED;AAAR,GAAD,CADR,EAEtC,CAAClC,qBAAD,CAFsC,CAAxC;AAKA,sBACE,oBAAC,gBAAD;AACE,IAAA,UAAU,EAAC,cADb;AAEE,IAAA,SAAS,EAAC,eAFZ;AAGE,IAAA,cAAc,eAAE;AAAI,MAAA,SAAS,EAAC,iDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiEgC,CAAC,CAAC,UAAD,CAAlE,CAHlB;AAIE,IAAA,IAAI,EAAEA,CAAC,CACJ,mPADI,CAJT;AAOE,IAAA,iBAAiB,eAAE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE,uDACE,oBAAC,GAAD;AAAK,IAAA,SAAS,MAAd;AAAe,IAAA,SAAS,EAAC,oBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,SAAS,EAAC,oBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAER,mBAAtB;AAA2C,IAAA,QAAQ,EAAES,oBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,eAOE,oBAAC,GAAD;AAAK,IAAA,SAAS,MAAd;AAAe,IAAA,SAAS,EAAC,yCAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD,oBAAehB,aAAf;AAA8B,IAAA,SAAS,EAAC,yBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,oBAAC,sBAAD;AAAwB,IAAA,MAAM,EAAEa,MAAhC;AAAwC,IAAA,OAAO,EAAEC,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAKE,oBAAC,SAAD,oBAAeZ,kBAAf;AAAmC,IAAA,SAAS,EAAC,8BAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,oBAAC,2BAAD;AAA6B,IAAA,MAAM,EAAEW,MAArC;AAA6C,IAAA,OAAO,EAAEC,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CAPF,eAiBE,oBAAC,GAAD;AAAK,IAAA,SAAS,MAAd;AAAe,IAAA,SAAS,EAAC,yBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,uBAAD;AAAyB,IAAA,MAAM,EAAED,MAAjC;AAAyC,IAAA,OAAO,EAAEC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAjBF,eAuBE,oBAAC,GAAD;AAAK,IAAA,SAAS,MAAd;AAAe,IAAA,SAAS,EAAC,uBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAvBF,CATF,CADF;AAyCD;;GA1DeF,wB;UAOA9B,c;;;KAPA8B,wB;;AArBdN,EAAAA,a;AACAC,EAAAA,mB;AACAR,EAAAA,mB;;AA+EF,MAAMoB,YAAY,GAAGxC,OAAO,CAACyB,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CC,wBAA7C,CAArB;AAEA,SAASO,YAAT","sourcesContent":["import React, { useCallback } from 'react'\n\nimport { FormikErrors, FormikTouched, FormikValues } from 'formik'\nimport { connect } from 'react-redux'\n\nimport { Row, Col } from 'reactstrap'\n\nimport { useTranslation } from 'react-i18next'\n\nimport { renameCurrentScenario, SetScenarioParams } from '../../../state/scenario/scenario.actions'\nimport { State } from '../../../state/reducer'\n\nimport {\n  selectAgeDistributionData,\n  selectScenarioData,\n  selectScenarioNames,\n  selectSeverityDistributionData,\n  selectCurrentScenarioName,\n} from '../../../state/scenario/scenario.selectors'\nimport { selectAreResultsMaximized } from '../../../state/settings/settings.selectors'\n\nimport { ColCustom } from '../../Layout/ColCustom'\nimport { CardWithControls } from '../../Form/CardWithControls'\n\nimport { ScenarioLoader } from '../ScenarioLoader/ScenarioLoader'\n\nimport { ScenarioCardContainment } from './ScenarioCardContainment'\nimport { ScenarioCardEpidemiological } from './ScenarioCardEpidemiological'\nimport { ScenarioCardPopulation } from './ScenarioCardPopulation'\nimport { SeverityCard } from './SeverityCard'\nimport { ScenarioTitle } from './ScenarioTitle'\n\nimport './ScenarioTitle.scss'\n\nexport function getColumnSizes(areResultsMaximized: boolean) {\n  if (areResultsMaximized) {\n    return { colPopulation: { xxl: 6 }, colEpidemiological: { xxl: 6 } }\n  }\n\n  return { colPopulation: { xl: 6 }, colEpidemiological: { xl: 6 } }\n}\n\nexport interface ScenarioCardProps {\n  scenarioNames: string[]\n  currentScenarioName: string\n  areResultsMaximized: boolean\n  renameCurrentScenario(params: SetScenarioParams): void\n  errors?: FormikErrors<FormikValues>\n  touched?: FormikTouched<FormikValues>\n}\n\nconst mapStateToProps = (state: State) => ({\n  scenarioNames: selectScenarioNames(state),\n  currentScenarioName: selectCurrentScenarioName(state),\n  scenarioData: selectScenarioData(state),\n  ageDistributionData: selectAgeDistributionData(state),\n  severityDistributionData: selectSeverityDistributionData(state),\n  areResultsMaximized: selectAreResultsMaximized(state),\n})\n\nconst mapDispatchToProps = {\n  renameCurrentScenario,\n}\n\nexport function ScenarioCardDisconnected({\n  currentScenarioName,\n  renameCurrentScenario,\n  areResultsMaximized,\n  errors,\n  touched,\n}: ScenarioCardProps) {\n  const { t } = useTranslation()\n\n  const { colPopulation, colEpidemiological } = getColumnSizes(areResultsMaximized)\n\n  // prettier-ignore\n  const handleScenarioRename = useCallback(\n    (newScenario: string) => renameCurrentScenario({ name: newScenario }),\n    [renameCurrentScenario],\n  )\n\n  return (\n    <CardWithControls\n      identifier=\"scenarioName\"\n      className=\"card-scenario\"\n      labelComponent={<h2 className=\"p-0 m-0 text-truncate d-flex align-items-center\">{t('Scenario')}</h2>}\n      help={t(\n        `This section allows to setup a scenario. A \"scenario\" is a set of parameters that describes a combination of population and epidemiological factors as well as a set of mitigation measures and severity assumptions to be used by the simulator.`,\n      )}\n      controlsComponent={<ScenarioLoader />}\n    >\n      <>\n        <Row noGutters className=\"row-scenario-title\">\n          <Col xl={12} className=\"col-scenario-title\">\n            <ScenarioTitle title={currentScenarioName} onRename={handleScenarioRename} />\n          </Col>\n        </Row>\n\n        <Row noGutters className=\"row-scenario-population-epidemiological\">\n          <ColCustom {...colPopulation} className=\"col-scenario-population\">\n            <ScenarioCardPopulation errors={errors} touched={touched} />\n          </ColCustom>\n\n          <ColCustom {...colEpidemiological} className=\"col-scenario-epidemiological\">\n            <ScenarioCardEpidemiological errors={errors} touched={touched} />\n          </ColCustom>\n        </Row>\n\n        <Row noGutters className=\"row-scenario-mitigation\">\n          <Col className=\"col-scenario-mitigation\">\n            <ScenarioCardContainment errors={errors} touched={touched} />\n          </Col>\n        </Row>\n\n        <Row noGutters className=\"row-scenario-severity\">\n          <Col className=\"col-scenario-severity\">\n            <SeverityCard />\n          </Col>\n        </Row>\n      </>\n    </CardWithControls>\n  )\n}\n\nconst ScenarioCard = connect(mapStateToProps, mapDispatchToProps)(ScenarioCardDisconnected)\n\nexport { ScenarioCard }\n"]},"metadata":{},"sourceType":"module"}