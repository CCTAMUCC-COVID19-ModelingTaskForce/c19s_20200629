{"ast":null,"code":"import _pt from \"prop-types\";\nimport _clamp from \"lodash/clamp\";\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Results/MitigationLinePlot.tsx\";\nimport React from 'react';\nimport { CartesianGrid, ComposedChart, Label, ReferenceArea, XAxis, YAxis } from 'recharts';\n\nconst intervalOpacity = transmissionReduction => {\n  const {\n    begin,\n    end\n  } = transmissionReduction;\n  return 0.1 + 0.006 * (100 - (end - begin));\n};\n\nexport function MitigationPlot({\n  mitigation,\n  width,\n  height,\n  tMin,\n  tMax\n}) {\n  return /*#__PURE__*/React.createElement(ComposedChart, {\n    width: width,\n    height: height,\n    margin: {\n      left: 5,\n      right: 5,\n      top: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    allowDataOverflow: true,\n    dataKey: \"time\",\n    type: \"number\",\n    domain: [tMin, tMax],\n    tickFormatter: () => '',\n    tickCount: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    yAxisId: \"mitigationStrengthAxis\",\n    allowDataOverflow: true,\n    orientation: 'left',\n    type: \"number\",\n    label: {\n      value: 'Efficiency',\n      angle: -90,\n      dx: -12,\n      fill: '#495057'\n    },\n    domain: [0, 100],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), mitigation.map(({\n    id,\n    name,\n    timeRange,\n    transmissionReduction,\n    color\n  }, i) => {\n    return /*#__PURE__*/React.createElement(ReferenceArea, {\n      key: id,\n      x1: _clamp(timeRange.begin.getTime(), tMin, tMax),\n      x2: _clamp(timeRange.end.getTime(), tMin, tMax),\n      y1: _clamp(transmissionReduction.begin - 2, 0, 100),\n      y2: _clamp(transmissionReduction.end + 2, 0, 100),\n      yAxisId: 'mitigationStrengthAxis',\n      fill: color,\n      stroke: color,\n      fillOpacity: intervalOpacity(transmissionReduction),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      value: name,\n      position: i % 2 ? 'insideRight' : 'insideLeft',\n      fill: \"#444444\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }));\n  }));\n}\n_c = MitigationPlot;\nMitigationPlot.propTypes = {\n  mitigation: _pt.array.isRequired,\n  width: _pt.number.isRequired,\n  height: _pt.number.isRequired,\n  tMin: _pt.number.isRequired,\n  tMax: _pt.number.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"MitigationPlot\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Results/MitigationLinePlot.tsx"],"names":["React","CartesianGrid","ComposedChart","Label","ReferenceArea","XAxis","YAxis","intervalOpacity","transmissionReduction","begin","end","MitigationPlot","mitigation","width","height","tMin","tMax","left","right","top","value","angle","dx","fill","map","id","name","timeRange","color","i","getTime"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport _ from 'lodash'\n\nimport { CartesianGrid, ComposedChart, Label, ReferenceArea, XAxis, YAxis } from 'recharts'\n\nimport type { MitigationInterval, NumericRangeNonNegative } from '../../../algorithms/types/Param.types'\n\nconst intervalOpacity = (transmissionReduction: NumericRangeNonNegative): number => {\n  const { begin, end } = transmissionReduction\n  return 0.1 + 0.006 * (100 - (end - begin))\n}\n\nexport interface MitigationPlotProps {\n  mitigation: MitigationInterval[]\n  width: number\n  height: number\n  tMin: number\n  tMax: number\n}\n\nexport function MitigationPlot({ mitigation, width, height, tMin, tMax }: MitigationPlotProps) {\n  return (\n    <ComposedChart\n      width={width}\n      height={height}\n      margin={{\n        left: 5,\n        right: 5,\n        top: 0,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis\n        allowDataOverflow\n        dataKey=\"time\"\n        type=\"number\"\n        domain={[tMin, tMax]}\n        tickFormatter={() => ''}\n        tickCount={7}\n      />\n      <YAxis\n        yAxisId=\"mitigationStrengthAxis\"\n        allowDataOverflow\n        orientation={'left'}\n        type=\"number\"\n        label={{ value: 'Efficiency', angle: -90, dx: -12, fill: '#495057' }}\n        domain={[0, 100]}\n      />\n      {mitigation.map(({ id, name, timeRange, transmissionReduction, color }, i) => {\n        return (\n          <ReferenceArea\n            key={id}\n            x1={_.clamp(timeRange.begin.getTime(), tMin, tMax)}\n            x2={_.clamp(timeRange.end.getTime(), tMin, tMax)}\n            y1={_.clamp(transmissionReduction.begin - 2, 0, 100)}\n            y2={_.clamp(transmissionReduction.end + 2, 0, 100)}\n            yAxisId={'mitigationStrengthAxis'}\n            fill={color}\n            stroke={color}\n            fillOpacity={intervalOpacity(transmissionReduction)}\n          >\n            <Label value={name} position={i % 2 ? 'insideRight' : 'insideLeft'} fill=\"#444444\" />\n          </ReferenceArea>\n        )\n      })}\n    </ComposedChart>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}