{"ast":null,"code":"import _pt from \"prop-types\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Controls/SimulationControls.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { AiFillFilePdf } from 'react-icons/ai';\nimport { MdTab } from 'react-icons/md';\nimport { Button } from 'reactstrap';\nimport { selectIsRunning, selectHasResult } from '../../../state/algorithm/algorithm.selectors';\nimport { selectIsAutorunEnabled } from '../../../state/settings/settings.selectors';\nimport { selectCanRun } from '../../../state/scenario/scenario.selectors';\nimport { newTabOpenTrigger, printPreviewOpenTrigger } from '../../../state/ui/ui.actions';\nimport { ModalButtonExport } from './ModalButtonExport';\nimport { ModalButtonSharing } from './ModalButtonSharing';\nimport { RunButtonContent } from './RunButtonContent';\nimport { SettingsControls } from './SettingsControls';\nimport './SimulationControls.scss';\nconst ICON_SIZE = 25;\n\nconst mapStateToProps = state => ({\n  canRun: selectCanRun(state),\n  hasResult: selectHasResult(state),\n  isRunning: selectIsRunning(state),\n  isAutorunEnabled: selectIsAutorunEnabled(state)\n});\n\nconst mapDispatchToProps = {\n  newTabOpen: newTabOpenTrigger,\n  printPreviewOpen: printPreviewOpenTrigger\n};\n\nfunction SimulationControls({\n  canRun,\n  hasResult,\n  isRunning,\n  isAutorunEnabled,\n  newTabOpen,\n  printPreviewOpen\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const newTabOpenCallback = useCallback(() => newTabOpen(), [newTabOpen]);\n  const printPreviewOpenCallback = useCallback(() => printPreviewOpen(), [printPreviewOpen]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-simulation-controls btn-run\",\n    type: \"submit\",\n    color: \"primary\",\n    disabled: !canRun || isRunning,\n    \"data-testid\": \"RunResults\",\n    title: isAutorunEnabled ? t('Refresh the simulation') : t('Run the simulation'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RunButtonContent, {\n    isRunning: isRunning,\n    isAutorunEnabled: isAutorunEnabled,\n    size: ICON_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-simulation-controls\",\n    disabled: !canRun,\n    onClick: newTabOpenCallback,\n    \"data-testid\": \"RunResultsInNewTab\",\n    title: t('Run in a new tab'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MdTab, {\n    size: ICON_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ModalButtonExport, {\n    buttonSize: ICON_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    className: \"btn-simulation-controls\",\n    disabled: !hasResult,\n    onClick: printPreviewOpenCallback,\n    title: t('Open Print Preview (Save as PDF or print)'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AiFillFilePdf, {\n    size: ICON_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ModalButtonSharing, {\n    buttonSize: ICON_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SettingsControls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(SimulationControls, \"MMQRdKN3jK9oKfT86LT5ClJybvo=\", false, function () {\n  return [useTranslation];\n});\n\n_c = SimulationControls;\nSimulationControls.propTypes = {\n  canRun: _pt.bool.isRequired,\n  hasResult: _pt.bool.isRequired,\n  isRunning: _pt.bool.isRequired,\n  isAutorunEnabled: _pt.bool.isRequired\n};\nconst SimulationControlsConnected = connect(mapStateToProps, mapDispatchToProps)(SimulationControls);\nexport { SimulationControlsConnected as SimulationControls };\n\nvar _c;\n\n$RefreshReg$(_c, \"SimulationControls\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Controls/SimulationControls.tsx"],"names":["React","useCallback","connect","useTranslation","AiFillFilePdf","MdTab","Button","selectIsRunning","selectHasResult","selectIsAutorunEnabled","selectCanRun","newTabOpenTrigger","printPreviewOpenTrigger","ModalButtonExport","ModalButtonSharing","RunButtonContent","SettingsControls","ICON_SIZE","mapStateToProps","state","canRun","hasResult","isRunning","isAutorunEnabled","mapDispatchToProps","newTabOpen","printPreviewOpen","SimulationControls","t","newTabOpenCallback","printPreviewOpenCallback","SimulationControlsConnected"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\n\nimport { connect } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport { AiFillFilePdf } from 'react-icons/ai'\nimport { MdTab } from 'react-icons/md'\nimport { Button } from 'reactstrap'\nimport { ActionCreator } from 'typescript-fsa'\n\nimport type { State } from '../../../state/reducer'\nimport { selectIsRunning, selectHasResult } from '../../../state/algorithm/algorithm.selectors'\nimport { selectIsAutorunEnabled } from '../../../state/settings/settings.selectors'\nimport { selectCanRun } from '../../../state/scenario/scenario.selectors'\nimport { newTabOpenTrigger, printPreviewOpenTrigger } from '../../../state/ui/ui.actions'\n\nimport { ModalButtonExport } from './ModalButtonExport'\nimport { ModalButtonSharing } from './ModalButtonSharing'\nimport { RunButtonContent } from './RunButtonContent'\nimport { SettingsControls } from './SettingsControls'\n\nimport './SimulationControls.scss'\n\nconst ICON_SIZE = 25\n\nexport interface SimulationControlsProps {\n  canRun: boolean\n  hasResult: boolean\n  isRunning: boolean\n  isAutorunEnabled: boolean\n  newTabOpen: ActionCreator<void>\n  printPreviewOpen: ActionCreator<void>\n}\n\nconst mapStateToProps = (state: State) => ({\n  canRun: selectCanRun(state),\n  hasResult: selectHasResult(state),\n  isRunning: selectIsRunning(state),\n  isAutorunEnabled: selectIsAutorunEnabled(state),\n})\n\nconst mapDispatchToProps = {\n  newTabOpen: newTabOpenTrigger,\n  printPreviewOpen: printPreviewOpenTrigger,\n}\n\nfunction SimulationControls({\n  canRun,\n  hasResult,\n  isRunning,\n  isAutorunEnabled,\n  newTabOpen,\n  printPreviewOpen,\n}: SimulationControlsProps) {\n  const { t } = useTranslation()\n  const newTabOpenCallback = useCallback(() => newTabOpen(), [newTabOpen])\n  const printPreviewOpenCallback = useCallback(() => printPreviewOpen(), [printPreviewOpen])\n\n  return (\n    <>\n      <Button\n        className=\"btn-simulation-controls btn-run\"\n        type=\"submit\"\n        color=\"primary\"\n        disabled={!canRun || isRunning}\n        data-testid=\"RunResults\"\n        title={isAutorunEnabled ? t('Refresh the simulation') : t('Run the simulation')}\n      >\n        <RunButtonContent isRunning={isRunning} isAutorunEnabled={isAutorunEnabled} size={ICON_SIZE} />\n      </Button>\n\n      <Button\n        className=\"btn-simulation-controls\"\n        disabled={!canRun}\n        onClick={newTabOpenCallback}\n        data-testid=\"RunResultsInNewTab\"\n        title={t('Run in a new tab')}\n      >\n        <MdTab size={ICON_SIZE} />\n      </Button>\n\n      <ModalButtonExport buttonSize={ICON_SIZE} />\n\n      <Button\n        type=\"button\"\n        className=\"btn-simulation-controls\"\n        disabled={!hasResult}\n        onClick={printPreviewOpenCallback}\n        title={t('Open Print Preview (Save as PDF or print)')}\n      >\n        <AiFillFilePdf size={ICON_SIZE} />\n      </Button>\n\n      <ModalButtonSharing buttonSize={ICON_SIZE} />\n\n      <SettingsControls />\n    </>\n  )\n}\n\nconst SimulationControlsConnected = connect(mapStateToProps, mapDispatchToProps)(SimulationControls)\n\nexport { SimulationControlsConnected as SimulationControls }\n"]},"metadata":{},"sourceType":"module"}