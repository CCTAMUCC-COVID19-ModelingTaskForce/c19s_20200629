{"ast":null,"code":"import _pt from \"prop-types\";\nimport _maxBy from \"lodash/maxBy\";\nimport _minBy from \"lodash/minBy\";\nimport _max from \"lodash/max\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Results/DeterministicLinePlot.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { CartesianGrid, ComposedChart, Legend, Line, Scatter, Area, Tooltip, XAxis, YAxis } from 'recharts';\nimport { useTranslation } from 'react-i18next';\nimport { numberFormatter } from '../../../helpers/numberFormat';\nimport { selectResult } from '../../../state/algorithm/algorithm.selectors';\nimport { selectScenarioData, selectCaseCountsData } from '../../../state/scenario/scenario.selectors';\nimport { selectIsLogScale, selectShouldFormatNumbers } from '../../../state/settings/settings.selectors';\nimport { calculatePosition, scrollToRef } from './chartHelper';\nimport { linesToPlot, areasToPlot, observationsToPlot, DATA_POINTS, translatePlots, defaultEnabledPlots } from './ChartCommon';\nimport { LinePlotTooltip } from './LinePlotTooltip';\nimport { MitigationPlot } from './MitigationLinePlot';\nimport { R0Plot } from './R0LinePlot';\nimport { verifyPositive, computeNewEmpiricalCases } from './Utils';\nimport './DeterministicLinePlot.scss';\nconst ASPECT_RATIO = 16 / 9;\n\nfunction xTickFormatter(tick) {\n  return new Date(tick).toISOString().slice(0, 10);\n}\n\nfunction labelFormatter(value) {\n  return xTickFormatter(value);\n}\n\nfunction legendFormatter(enabledPlots, value, entry) {\n  let activeClassName = 'legend-inactive';\n\n  if ((entry === null || entry === void 0 ? void 0 : entry.dataKey) && enabledPlots.includes(entry.dataKey)) {\n    activeClassName = 'legend';\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: activeClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  }, value);\n}\n\nconst mapStateToProps = state => ({\n  scenarioData: selectScenarioData(state),\n  result: selectResult(state),\n  caseCountsData: selectCaseCountsData(state),\n  isLogScale: selectIsLogScale(state),\n  shouldFormatNumbers: selectShouldFormatNumbers(state)\n});\n\nconst mapDispatchToProps = {}; // eslint-disable-next-line sonarjs/cognitive-complexity\n\nexport function DeterministicLinePlotDiconnected({\n  scenarioData,\n  result,\n  caseCountsData,\n  isLogScale,\n  shouldFormatNumbers\n}) {\n  _s();\n\n  var _caseCountsData$map;\n\n  const {\n    t\n  } = useTranslation();\n  const chartRef = React.useRef(null);\n  const [enabledPlots, setEnabledPlots] = useState(defaultEnabledPlots);\n  const formatNumber = numberFormatter(!!shouldFormatNumbers, false);\n  const formatNumberRounded = numberFormatter(!!shouldFormatNumbers, true);\n\n  if (!result) {\n    return null;\n  }\n\n  const {\n    mitigationIntervals\n  } = scenarioData.mitigation;\n  const nHospitalBeds = verifyPositive(scenarioData.population.hospitalBeds);\n  const nICUBeds = verifyPositive(scenarioData.population.icuBeds); // NOTE: this used to use scenarioData.epidemiological.infectiousPeriodDays as\n  // time interval but a weekly interval makes more sense given reporting practices\n\n  const [newEmpiricalCases] = computeNewEmpiricalCases(7, 'cases', caseCountsData);\n  const [weeklyEmpiricalDeaths] = computeNewEmpiricalCases(7, 'deaths', caseCountsData);\n  const hasObservations = {\n    [DATA_POINTS.ObservedCases]: caseCountsData && caseCountsData.some(d => d.cases),\n    [DATA_POINTS.ObservedICU]: caseCountsData && caseCountsData.some(d => d.icu),\n    [DATA_POINTS.ObservedDeaths]: caseCountsData && caseCountsData.some(d => d.deaths),\n    [DATA_POINTS.ObservedWeeklyDeaths]: caseCountsData && caseCountsData.some(d => d.deaths),\n    [DATA_POINTS.ObservedNewCases]: newEmpiricalCases && newEmpiricalCases.some(d => d),\n    [DATA_POINTS.ObservedHospitalized]: caseCountsData && caseCountsData.some(d => d.hospitalized)\n  };\n  const observations = (_caseCountsData$map = caseCountsData === null || caseCountsData === void 0 ? void 0 : caseCountsData.map((d, i) => ({\n    time: new Date(d.time).getTime(),\n    cases: enabledPlots.includes(DATA_POINTS.ObservedCases) ? d.cases || undefined : undefined,\n    observedDeaths: enabledPlots.includes(DATA_POINTS.ObservedDeaths) ? d.deaths || undefined : undefined,\n    currentHospitalized: enabledPlots.includes(DATA_POINTS.ObservedHospitalized) ? d.hospitalized || undefined : undefined,\n    ICU: enabledPlots.includes(DATA_POINTS.ObservedICU) ? d.icu || undefined : undefined,\n    newCases: enabledPlots.includes(DATA_POINTS.ObservedNewCases) ? newEmpiricalCases[i] : undefined,\n    weeklyDeaths: enabledPlots.includes(DATA_POINTS.ObservedWeeklyDeaths) ? weeklyEmpiricalDeaths[i] : undefined,\n    hospitalBeds: nHospitalBeds,\n    ICUbeds: nICUBeds\n  }))) !== null && _caseCountsData$map !== void 0 ? _caseCountsData$map : [];\n  const plotData = [...result.plotData.map(x => {\n    const dpoint = {\n      time: x.time,\n      hospitalBeds: nHospitalBeds,\n      ICUbeds: nICUBeds\n    };\n    Object.keys(x.lines).forEach(d => {\n      dpoint[d] = enabledPlots.includes(d) ? x.lines[d] : undefined;\n    });\n    Object.keys(x.areas).forEach(d => {\n      dpoint[`${d}Area`] = enabledPlots.includes(d) ? x.areas[d] : undefined;\n    });\n    return dpoint;\n  }), ...observations];\n\n  if (plotData.length === 0) {\n    return null;\n  }\n\n  plotData.sort((a, b) => a.time > b.time ? 1 : -1);\n  const consolidatedPlotData = [plotData[0]];\n  const msPerDay = 24 * 60 * 60 * 1000;\n  plotData.forEach(d => {\n    if (d.time - msPerDay < consolidatedPlotData[consolidatedPlotData.length - 1].time) {\n      consolidatedPlotData[consolidatedPlotData.length - 1] = { ...d,\n        ...consolidatedPlotData[consolidatedPlotData.length - 1]\n      };\n    } else {\n      consolidatedPlotData.push(d);\n    }\n  }); // determine the max of enabled plots w/o the hospital capacity\n\n  const dataKeys = enabledPlots.filter(d => d !== DATA_POINTS.HospitalBeds && d !== DATA_POINTS.ICUbeds); // @ts-ignore\n\n  const yDataMax = _max(consolidatedPlotData.map(d => _max(dataKeys.map(k => d[k]))));\n\n  const tMin = _minBy(plotData, 'time').time; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n\n  const tMax = _maxBy(plotData, 'time').time; // eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n\n  const observationsHavingDataToPlot = observationsToPlot().filter(itemToPlot => {\n    if (observations.length !== 0) {\n      return hasObservations[itemToPlot.key];\n    }\n\n    return false;\n  });\n  const tooltipItemsToDisplay = enabledPlots.filter(itemKey => itemKey !== 'time' && itemKey !== 'hospitalBeds' && itemKey !== 'ICUbeds');\n  const logScaleString = isLogScale ? 'log' : 'linear';\n\n  const tooltipValueFormatter = value => typeof value === 'number' ? formatNumber(Number(value)) : value;\n\n  const yTickFormatter = value => formatNumberRounded(value);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-100 h-100\",\n    \"data-testid\": \"DeterministicLinePlot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    handleWidth: true,\n    handleHeight: true,\n    refreshRate: 300,\n    refreshMode: \"debounce\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, ({\n    width\n  }) => {\n    if (!width) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"w-100 h-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 20\n        }\n      });\n    }\n\n    const height = Math.max(500, width / ASPECT_RATIO);\n    const tooltipPosition = calculatePosition(height);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      ref: chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(R0Plot, {\n      R0Trajectory: result.R0,\n      width: width,\n      height: height / 4,\n      tMin: tMin,\n      tMax: tMax,\n      labelFormatter: labelFormatter,\n      tooltipValueFormatter: tooltipValueFormatter,\n      tooltipPosition: tooltipPosition,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(MitigationPlot, {\n      mitigation: mitigationIntervals,\n      width: width,\n      height: height / 4,\n      tMin: tMin,\n      tMax: tMax,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(ComposedChart, {\n      onClick: () => scrollToRef(chartRef),\n      width: width,\n      height: height,\n      data: consolidatedPlotData,\n      throttleDelay: 75,\n      margin: {\n        left: 5,\n        right: 5,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      allowDataOverflow: true,\n      dataKey: \"time\",\n      type: \"number\",\n      domain: ['dataMin', 'dataMax'],\n      tickFormatter: xTickFormatter,\n      tickCount: 7,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      allowDataOverflow: true,\n      scale: logScaleString,\n      type: \"number\",\n      domain: isLogScale ? [1, yDataMax * 1.1] : [0, yDataMax * 1.1],\n      tickFormatter: yTickFormatter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      labelFormatter: labelFormatter,\n      position: tooltipPosition,\n      content: props => /*#__PURE__*/React.createElement(LinePlotTooltip, Object.assign({\n        valueFormatter: tooltipValueFormatter,\n        itemsToDisplay: tooltipItemsToDisplay\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      verticalAlign: \"bottom\",\n      formatter: (value, entry) => legendFormatter(enabledPlots, value, entry),\n      onClick: e => {\n        const plots = enabledPlots.slice(0);\n        enabledPlots.includes(e.dataKey) ? plots.splice(plots.indexOf(e.dataKey), 1) : plots.push(e.dataKey);\n        setEnabledPlots(plots);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }\n    }), translatePlots(t, observationsHavingDataToPlot).map(d => /*#__PURE__*/React.createElement(Scatter, {\n      key: d.key,\n      dataKey: d.key,\n      fill: d.color,\n      name: d.name,\n      isAnimationActive: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 19\n      }\n    })), translatePlots(t, linesToPlot).map(d => /*#__PURE__*/React.createElement(Line, {\n      key: d.key,\n      dot: false,\n      isAnimationActive: false,\n      type: \"monotone\",\n      strokeWidth: 3,\n      dataKey: d.key,\n      stroke: d.color,\n      name: d.name,\n      legendType: d.legendType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 19\n      }\n    })), translatePlots(t, areasToPlot).map(d => /*#__PURE__*/React.createElement(Area, {\n      key: d.key,\n      type: \"monotone\",\n      fillOpacity: 0.12,\n      dataKey: d.key,\n      isAnimationActive: false,\n      name: d.name,\n      stroke: d.color,\n      strokeWidth: 0,\n      fill: d.color,\n      legendType: d.legendType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 19\n      }\n    }))));\n  }));\n}\n\n_s(DeterministicLinePlotDiconnected, \"//O/fqLv0FqRhXq1QM4AOtt9TqI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = DeterministicLinePlotDiconnected;\nDeterministicLinePlotDiconnected.propTypes = {\n  caseCountsData: _pt.array,\n  isLogScale: _pt.bool.isRequired,\n  shouldFormatNumbers: _pt.bool.isRequired\n};\nconst DeterministicLinePlot = connect(mapStateToProps, mapDispatchToProps)(DeterministicLinePlotDiconnected);\nexport { DeterministicLinePlot };\n\nvar _c;\n\n$RefreshReg$(_c, \"DeterministicLinePlotDiconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Results/DeterministicLinePlot.tsx"],"names":["React","useState","connect","ReactResizeDetector","CartesianGrid","ComposedChart","Legend","Line","Scatter","Area","Tooltip","XAxis","YAxis","useTranslation","numberFormatter","selectResult","selectScenarioData","selectCaseCountsData","selectIsLogScale","selectShouldFormatNumbers","calculatePosition","scrollToRef","linesToPlot","areasToPlot","observationsToPlot","DATA_POINTS","translatePlots","defaultEnabledPlots","LinePlotTooltip","MitigationPlot","R0Plot","verifyPositive","computeNewEmpiricalCases","ASPECT_RATIO","xTickFormatter","tick","Date","toISOString","slice","labelFormatter","value","legendFormatter","enabledPlots","entry","activeClassName","dataKey","includes","mapStateToProps","state","scenarioData","result","caseCountsData","isLogScale","shouldFormatNumbers","mapDispatchToProps","DeterministicLinePlotDiconnected","t","chartRef","useRef","setEnabledPlots","formatNumber","formatNumberRounded","mitigationIntervals","mitigation","nHospitalBeds","population","hospitalBeds","nICUBeds","icuBeds","newEmpiricalCases","weeklyEmpiricalDeaths","hasObservations","ObservedCases","some","d","cases","ObservedICU","icu","ObservedDeaths","deaths","ObservedWeeklyDeaths","ObservedNewCases","ObservedHospitalized","hospitalized","observations","map","i","time","getTime","undefined","observedDeaths","currentHospitalized","ICU","newCases","weeklyDeaths","ICUbeds","plotData","x","dpoint","Object","keys","lines","forEach","areas","length","sort","a","b","consolidatedPlotData","msPerDay","push","dataKeys","filter","HospitalBeds","yDataMax","k","tMin","tMax","observationsHavingDataToPlot","itemToPlot","key","tooltipItemsToDisplay","itemKey","logScaleString","tooltipValueFormatter","Number","yTickFormatter","width","height","Math","max","tooltipPosition","R0","left","right","bottom","props","e","plots","splice","indexOf","color","name","legendType","DeterministicLinePlot"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport _ from 'lodash'\nimport { connect } from 'react-redux'\n\nimport ReactResizeDetector from 'react-resize-detector'\nimport {\n  CartesianGrid,\n  ComposedChart,\n  Legend,\n  Line,\n  Scatter,\n  Area,\n  Tooltip,\n  TooltipProps,\n  XAxis,\n  YAxis,\n  YAxisProps,\n  LegendPayload,\n} from 'recharts'\n\nimport { useTranslation } from 'react-i18next'\n\nimport type { ScenarioDatum, CaseCountsDatum } from '../../../algorithms/types/Param.types'\n\nimport type { AlgorithmResult } from '../../../algorithms/types/Result.types'\n\nimport { numberFormatter } from '../../../helpers/numberFormat'\nimport { selectResult } from '../../../state/algorithm/algorithm.selectors'\nimport { State } from '../../../state/reducer'\nimport { selectScenarioData, selectCaseCountsData } from '../../../state/scenario/scenario.selectors'\nimport { selectIsLogScale, selectShouldFormatNumbers } from '../../../state/settings/settings.selectors'\n\nimport { calculatePosition, scrollToRef } from './chartHelper'\nimport {\n  linesToPlot,\n  areasToPlot,\n  observationsToPlot,\n  DATA_POINTS,\n  translatePlots,\n  defaultEnabledPlots,\n} from './ChartCommon'\nimport { LinePlotTooltip } from './LinePlotTooltip'\nimport { MitigationPlot } from './MitigationLinePlot'\nimport { R0Plot } from './R0LinePlot'\n\nimport { verifyPositive, computeNewEmpiricalCases } from './Utils'\n\nimport './DeterministicLinePlot.scss'\n\nconst ASPECT_RATIO = 16 / 9\n\nfunction xTickFormatter(tick: string | number): string {\n  return new Date(tick).toISOString().slice(0, 10)\n}\n\nfunction labelFormatter(value: string | number): React.ReactNode {\n  return xTickFormatter(value)\n}\n\nfunction legendFormatter(enabledPlots: string[], value?: LegendPayload['value'], entry?: LegendPayload) {\n  let activeClassName = 'legend-inactive'\n  if (entry?.dataKey && enabledPlots.includes(entry.dataKey)) {\n    activeClassName = 'legend'\n  }\n\n  return <span className={activeClassName}>{value}</span>\n}\n\nexport interface DeterministicLinePlotProps {\n  scenarioData: ScenarioDatum\n  result?: AlgorithmResult\n  caseCountsData?: CaseCountsDatum[]\n  isLogScale: boolean\n  shouldFormatNumbers: boolean\n}\n\nconst mapStateToProps = (state: State) => ({\n  scenarioData: selectScenarioData(state),\n  result: selectResult(state),\n  caseCountsData: selectCaseCountsData(state),\n  isLogScale: selectIsLogScale(state),\n  shouldFormatNumbers: selectShouldFormatNumbers(state),\n})\n\nconst mapDispatchToProps = {}\n\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function DeterministicLinePlotDiconnected({\n  scenarioData,\n  result,\n  caseCountsData,\n  isLogScale,\n  shouldFormatNumbers,\n}: DeterministicLinePlotProps) {\n  const { t } = useTranslation()\n  const chartRef = React.useRef(null)\n  const [enabledPlots, setEnabledPlots] = useState(defaultEnabledPlots)\n\n  const formatNumber = numberFormatter(!!shouldFormatNumbers, false)\n  const formatNumberRounded = numberFormatter(!!shouldFormatNumbers, true)\n\n  if (!result) {\n    return null\n  }\n\n  const { mitigationIntervals } = scenarioData.mitigation\n\n  const nHospitalBeds = verifyPositive(scenarioData.population.hospitalBeds)\n  const nICUBeds = verifyPositive(scenarioData.population.icuBeds)\n\n  // NOTE: this used to use scenarioData.epidemiological.infectiousPeriodDays as\n  // time interval but a weekly interval makes more sense given reporting practices\n  const [newEmpiricalCases] = computeNewEmpiricalCases(7, 'cases', caseCountsData)\n\n  const [weeklyEmpiricalDeaths] = computeNewEmpiricalCases(7, 'deaths', caseCountsData)\n\n  const hasObservations = {\n    [DATA_POINTS.ObservedCases]: caseCountsData && caseCountsData.some((d) => d.cases),\n    [DATA_POINTS.ObservedICU]: caseCountsData && caseCountsData.some((d) => d.icu),\n    [DATA_POINTS.ObservedDeaths]: caseCountsData && caseCountsData.some((d) => d.deaths),\n    [DATA_POINTS.ObservedWeeklyDeaths]: caseCountsData && caseCountsData.some((d) => d.deaths),\n    [DATA_POINTS.ObservedNewCases]: newEmpiricalCases && newEmpiricalCases.some((d) => d),\n    [DATA_POINTS.ObservedHospitalized]: caseCountsData && caseCountsData.some((d) => d.hospitalized),\n  }\n\n  const observations =\n    caseCountsData?.map((d, i) => ({\n      time: new Date(d.time).getTime(),\n      cases: enabledPlots.includes(DATA_POINTS.ObservedCases) ? d.cases || undefined : undefined,\n      observedDeaths: enabledPlots.includes(DATA_POINTS.ObservedDeaths) ? d.deaths || undefined : undefined,\n      currentHospitalized: enabledPlots.includes(DATA_POINTS.ObservedHospitalized)\n        ? d.hospitalized || undefined\n        : undefined,\n      ICU: enabledPlots.includes(DATA_POINTS.ObservedICU) ? d.icu || undefined : undefined,\n      newCases: enabledPlots.includes(DATA_POINTS.ObservedNewCases) ? newEmpiricalCases[i] : undefined,\n      weeklyDeaths: enabledPlots.includes(DATA_POINTS.ObservedWeeklyDeaths) ? weeklyEmpiricalDeaths[i] : undefined,\n      hospitalBeds: nHospitalBeds,\n      ICUbeds: nICUBeds,\n    })) ?? []\n\n  const plotData = [\n    ...result.plotData.map((x) => {\n      const dpoint = { time: x.time, hospitalBeds: nHospitalBeds, ICUbeds: nICUBeds }\n      Object.keys(x.lines).forEach((d) => {\n        dpoint[d] = enabledPlots.includes(d) ? x.lines[d] : undefined\n      })\n      Object.keys(x.areas).forEach((d) => {\n        dpoint[`${d}Area`] = enabledPlots.includes(d) ? x.areas[d] : undefined\n      })\n      return dpoint\n    }),\n    ...observations,\n  ]\n\n  if (plotData.length === 0) {\n    return null\n  }\n\n  plotData.sort((a, b) => (a.time > b.time ? 1 : -1))\n  const consolidatedPlotData = [plotData[0]]\n  const msPerDay = 24 * 60 * 60 * 1000\n  plotData.forEach((d) => {\n    if (d.time - msPerDay < consolidatedPlotData[consolidatedPlotData.length - 1].time) {\n      consolidatedPlotData[consolidatedPlotData.length - 1] = {\n        ...d,\n        ...consolidatedPlotData[consolidatedPlotData.length - 1],\n      }\n    } else {\n      consolidatedPlotData.push(d)\n    }\n  })\n\n  // determine the max of enabled plots w/o the hospital capacity\n  const dataKeys = enabledPlots.filter((d) => d !== DATA_POINTS.HospitalBeds && d !== DATA_POINTS.ICUbeds)\n  // @ts-ignore\n  const yDataMax = _.max(consolidatedPlotData.map((d) => _.max(dataKeys.map((k) => d[k]))))\n\n  const tMin = _.minBy(plotData, 'time')!.time // eslint-disable-line @typescript-eslint/no-non-null-assertion\n  const tMax = _.maxBy(plotData, 'time')!.time // eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n  const observationsHavingDataToPlot = observationsToPlot().filter((itemToPlot) => {\n    if (observations.length !== 0) {\n      return hasObservations[itemToPlot.key]\n    }\n    return false\n  })\n\n  const tooltipItemsToDisplay = enabledPlots.filter(\n    (itemKey: string) => itemKey !== 'time' && itemKey !== 'hospitalBeds' && itemKey !== 'ICUbeds',\n  )\n\n  const logScaleString: YAxisProps['scale'] = isLogScale ? 'log' : 'linear'\n\n  const tooltipValueFormatter = (value: number | string) =>\n    typeof value === 'number' ? formatNumber(Number(value)) : value\n\n  const yTickFormatter = (value: number) => formatNumberRounded(value)\n\n  return (\n    <div className=\"w-100 h-100\" data-testid=\"DeterministicLinePlot\">\n      <ReactResizeDetector handleWidth handleHeight refreshRate={300} refreshMode=\"debounce\">\n        {({ width }: { width?: number }) => {\n          if (!width) {\n            return <div className=\"w-100 h-100\" />\n          }\n\n          const height = Math.max(500, width / ASPECT_RATIO)\n          const tooltipPosition = calculatePosition(height)\n\n          return (\n            <>\n              <div ref={chartRef} />\n              <R0Plot\n                R0Trajectory={result.R0}\n                width={width}\n                height={height / 4}\n                tMin={tMin}\n                tMax={tMax}\n                labelFormatter={labelFormatter}\n                tooltipValueFormatter={tooltipValueFormatter}\n                tooltipPosition={tooltipPosition}\n              />\n              <MitigationPlot\n                mitigation={mitigationIntervals}\n                width={width}\n                height={height / 4}\n                tMin={tMin}\n                tMax={tMax}\n              />\n              <ComposedChart\n                onClick={() => scrollToRef(chartRef)}\n                width={width}\n                height={height}\n                data={consolidatedPlotData}\n                throttleDelay={75}\n                margin={{\n                  left: 5,\n                  right: 5,\n                  bottom: 5,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n\n                <XAxis\n                  allowDataOverflow\n                  dataKey=\"time\"\n                  type=\"number\"\n                  domain={['dataMin', 'dataMax']}\n                  tickFormatter={xTickFormatter}\n                  tickCount={7}\n                />\n\n                <YAxis\n                  allowDataOverflow\n                  scale={logScaleString}\n                  type=\"number\"\n                  domain={isLogScale ? [1, yDataMax * 1.1] : [0, yDataMax * 1.1]}\n                  tickFormatter={yTickFormatter}\n                />\n\n                <Tooltip\n                  labelFormatter={labelFormatter}\n                  position={tooltipPosition}\n                  content={(props: TooltipProps) => (\n                    <LinePlotTooltip\n                      valueFormatter={tooltipValueFormatter}\n                      itemsToDisplay={tooltipItemsToDisplay}\n                      {...props}\n                    />\n                  )}\n                />\n\n                <Legend\n                  verticalAlign=\"bottom\"\n                  formatter={(value?: LegendPayload['value'], entry?: LegendPayload) =>\n                    legendFormatter(enabledPlots, value, entry)\n                  }\n                  onClick={(e) => {\n                    const plots = enabledPlots.slice(0)\n                    enabledPlots.includes(e.dataKey) ? plots.splice(plots.indexOf(e.dataKey), 1) : plots.push(e.dataKey)\n                    setEnabledPlots(plots)\n                  }}\n                />\n\n                {translatePlots(t, observationsHavingDataToPlot).map((d) => (\n                  <Scatter key={d.key} dataKey={d.key} fill={d.color} name={d.name} isAnimationActive={false} />\n                ))}\n\n                {translatePlots(t, linesToPlot).map((d) => (\n                  <Line\n                    key={d.key}\n                    dot={false}\n                    isAnimationActive={false}\n                    type=\"monotone\"\n                    strokeWidth={3}\n                    dataKey={d.key}\n                    stroke={d.color}\n                    name={d.name}\n                    legendType={d.legendType}\n                  />\n                ))}\n\n                {translatePlots(t, areasToPlot).map((d) => (\n                  <Area\n                    key={d.key}\n                    type=\"monotone\"\n                    fillOpacity={0.12}\n                    dataKey={d.key}\n                    isAnimationActive={false}\n                    name={d.name}\n                    stroke={d.color}\n                    strokeWidth={0}\n                    fill={d.color}\n                    legendType={d.legendType}\n                  />\n                ))}\n              </ComposedChart>\n            </>\n          )\n        }}\n      </ReactResizeDetector>\n    </div>\n  )\n}\n\nconst DeterministicLinePlot = connect(mapStateToProps, mapDispatchToProps)(DeterministicLinePlotDiconnected)\n\nexport { DeterministicLinePlot }\n"]},"metadata":{},"sourceType":"module"}