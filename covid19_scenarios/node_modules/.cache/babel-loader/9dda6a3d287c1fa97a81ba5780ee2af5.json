{"ast":null,"code":"import JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\nimport { serialize } from '../../io/serialization/serialize';\nimport { serializeTrajectory } from '../model';\nexport class ExportErrorBlobApiNotSupported extends Error {\n  constructor() {\n    super('Error: when exporting: `Blob()` API is not supported by this browser');\n  }\n\n}\nexport class ExportErrorResultsInvalid extends Error {\n  constructor(result) {\n    super('Error: when exporting: algorithm results are invalid');\n    this.result = result;\n  }\n\n}\nexport function checkBlobSupport() {\n  try {\n    return !!new Blob();\n  } catch {\n    throw new ExportErrorBlobApiNotSupported();\n  }\n}\nexport function saveFile(content, filename) {\n  const blob = new Blob([content], {\n    type: 'text/plain;charset=utf-8'\n  });\n  saveAs(blob, filename);\n}\nexport function exportResult({\n  scenarioParameters,\n  result,\n  detailed,\n  filename\n}) {\n  checkBlobSupport();\n  const trajectory = result === null || result === void 0 ? void 0 : result.trajectory;\n\n  if (!result || !trajectory) {\n    throw new ExportErrorResultsInvalid(result);\n  }\n\n  const str = serializeTrajectory({\n    trajectory,\n    detailed\n  });\n  saveFile(str, filename);\n}\nexport function exportScenario({\n  scenarioParameters,\n  filename\n}) {\n  checkBlobSupport();\n  const str = serialize(scenarioParameters);\n  saveFile(str, filename);\n}\nexport async function exportAll({\n  scenarioParameters,\n  result,\n  filenameParams,\n  filenameResultsSummary,\n  filenameResultsDetailed,\n  filenameZip\n}) {\n  checkBlobSupport();\n  const trajectory = result === null || result === void 0 ? void 0 : result.trajectory;\n\n  if (!result || !trajectory) {\n    throw new ExportErrorResultsInvalid(result);\n  }\n\n  const paramStr = serialize(scenarioParameters);\n  const summaryStr = serializeTrajectory({\n    trajectory,\n    detailed: false\n  });\n  const detailedStr = serializeTrajectory({\n    trajectory,\n    detailed: true\n  });\n  const zip = new JSZip();\n  zip.file(filenameParams, paramStr);\n  zip.file(filenameResultsSummary, summaryStr);\n  zip.file(filenameResultsDetailed, detailedStr);\n  const zipFile = await zip.generateAsync({\n    type: 'blob'\n  });\n  saveAs(zipFile, filenameZip);\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/algorithms/utils/exportResult.ts"],"names":["JSZip","saveAs","serialize","serializeTrajectory","ExportErrorBlobApiNotSupported","Error","constructor","ExportErrorResultsInvalid","result","checkBlobSupport","Blob","saveFile","content","filename","blob","type","exportResult","scenarioParameters","detailed","trajectory","str","exportScenario","exportAll","filenameParams","filenameResultsSummary","filenameResultsDetailed","filenameZip","paramStr","summaryStr","detailedStr","zip","file","zipFile","generateAsync"],"mappings":"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","sourcesContent":["import JSZip from 'jszip'\nimport { saveAs } from 'file-saver'\n\nimport type { StrictOmit } from 'ts-essentials'\nimport type { ScenarioParameters } from '../types/Param.types'\nimport type { AlgorithmResult } from '../types/Result.types'\n\nimport { serialize } from '../../io/serialization/serialize'\nimport { serializeTrajectory } from '../model'\n\nexport class ExportErrorBlobApiNotSupported extends Error {\n  constructor() {\n    super('Error: when exporting: `Blob()` API is not supported by this browser')\n  }\n}\n\nexport class ExportErrorResultsInvalid extends Error {\n  public result?: AlgorithmResult\n\n  constructor(result?: AlgorithmResult) {\n    super('Error: when exporting: algorithm results are invalid')\n    this.result = result\n  }\n}\n\nexport function checkBlobSupport() {\n  try {\n    return !!new Blob()\n  } catch {\n    throw new ExportErrorBlobApiNotSupported()\n  }\n}\n\nexport function saveFile(content: string, filename: string) {\n  const blob = new Blob([content], { type: 'text/plain;charset=utf-8' })\n  saveAs(blob, filename)\n}\n\nexport interface ExportResultsParams {\n  scenarioParameters: ScenarioParameters\n  result?: AlgorithmResult\n  detailed: boolean\n  filename: string\n}\n\nexport function exportResult({ scenarioParameters, result, detailed, filename }: ExportResultsParams) {\n  checkBlobSupport()\n\n  const trajectory = result?.trajectory\n  if (!result || !trajectory) {\n    throw new ExportErrorResultsInvalid(result)\n  }\n\n  const str = serializeTrajectory({ trajectory, detailed })\n  saveFile(str, filename)\n}\n\nexport interface ExportScenarioParams {\n  scenarioParameters: ScenarioParameters\n  filename: string\n}\n\nexport function exportScenario({ scenarioParameters, filename }: ExportScenarioParams) {\n  checkBlobSupport()\n  const str = serialize(scenarioParameters)\n  saveFile(str, filename)\n}\n\nexport interface Filenames {\n  filenameParams: string\n  filenameResultsSummary: string\n  filenameResultsDetailed: string\n  filenameZip: string\n}\n\nexport type ExportAllParams = StrictOmit<\n  ExportScenarioParams & ExportResultsParams & Filenames,\n  'detailed' | 'filename'\n>\n\nexport async function exportAll({\n  scenarioParameters,\n  result,\n  filenameParams,\n  filenameResultsSummary,\n  filenameResultsDetailed,\n  filenameZip,\n}: ExportAllParams) {\n  checkBlobSupport()\n\n  const trajectory = result?.trajectory\n  if (!result || !trajectory) {\n    throw new ExportErrorResultsInvalid(result)\n  }\n\n  const paramStr = serialize(scenarioParameters)\n  const summaryStr = serializeTrajectory({ trajectory, detailed: false })\n  const detailedStr = serializeTrajectory({ trajectory, detailed: true })\n\n  const zip = new JSZip()\n  zip.file(filenameParams, paramStr)\n  zip.file(filenameResultsSummary, summaryStr)\n  zip.file(filenameResultsDetailed, detailedStr)\n\n  const zipFile = await zip.generateAsync({ type: 'blob' })\n  saveAs(zipFile, filenameZip)\n}\n"]},"metadata":{},"sourceType":"module"}