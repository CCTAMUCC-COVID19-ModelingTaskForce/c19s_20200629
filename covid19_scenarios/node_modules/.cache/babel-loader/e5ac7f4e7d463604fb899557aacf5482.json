{"ast":null,"code":"import _pt from \"prop-types\";\nimport _sumBy from \"lodash/sumBy\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Results/AgeBarChart.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { useTranslation } from 'react-i18next';\nimport { Bar, BarChart, ErrorBar, CartesianGrid, Legend, Tooltip, XAxis, YAxis } from 'recharts';\nimport { numberFormatter } from '../../../helpers/numberFormat';\nimport { selectAgeDistributionData, selectSeverityDistributionData } from '../../../state/scenario/scenario.selectors';\nimport { selectResult } from '../../../state/algorithm/algorithm.selectors';\nimport { selectShouldFormatNumbers, selectShouldShowPlotLabels } from '../../../state/settings/settings.selectors';\nimport { colors } from './ChartCommon';\nimport { calculatePosition, scrollToRef } from './chartHelper';\nimport { ChartTooltip } from './ChartTooltip';\nconst ASPECT_RATIO = 16 / 4; // eslint-disable-next-line @typescript-eslint/ban-types\n\nconst mapStateToProps = state => ({\n  result: selectResult(state),\n  ageDistributionData: selectAgeDistributionData(state),\n  severityDistributionData: selectSeverityDistributionData(state),\n  shouldFormatNumbers: selectShouldFormatNumbers(state),\n  shouldShowPlotLabels: selectShouldShowPlotLabels(state)\n});\n\nconst mapDispatchToProps = {};\nexport const AgeBarChart = connect(mapStateToProps, mapDispatchToProps)(AgeBarChartDisconnected);\nexport function AgeBarChartDisconnected({\n  result,\n  ageDistributionData,\n  severityDistributionData,\n  shouldFormatNumbers\n}) {\n  _s();\n\n  const {\n    t: unsafeT\n  } = useTranslation();\n  const casesChartRef = React.useRef(null);\n  const t = unsafeT;\n  const label = {\n    position: 'top',\n    fill: '#444444',\n    fontSize: '11px',\n    formatter: label => {\n      if (label <= 0) {\n        return undefined;\n      }\n\n      if (!shouldFormatNumbers) {\n        return label;\n      }\n\n      let num = label;\n\n      if (typeof num === 'string') {\n        num = Number.parseFloat(num);\n      }\n\n      return numberFormatter(true, false)(num);\n    }\n  };\n\n  if (!result) {\n    return null;\n  }\n\n  const formatNumber = numberFormatter(shouldFormatNumbers, false);\n  const formatNumberRounded = numberFormatter(shouldFormatNumbers, true); // Ensure age distribution is normalized\n\n  const Z = _sumBy(ageDistributionData, ({\n    population\n  }) => population);\n\n  const normAgeDistribution = ageDistributionData.map(d => d.population / Z);\n  const ages = ageDistributionData.map(d => d.ageGroup);\n  const lastDataPoint = result.trajectory.middle[result.trajectory.middle.length - 1];\n  const plotData = ages.map((age, i) => ({\n    name: age,\n    fraction: Math.round(normAgeDistribution[i] * 1000) / 10,\n    peakSevere: Math.round(Math.max(...result.trajectory.middle.map(x => x.current.severe[age]))),\n    errorPeakSevere: [Math.round(Math.max(...result.trajectory.lower.map(x => x.current.severe[age]))), Math.round(Math.max(...result.trajectory.upper.map(x => x.current.severe[age])))],\n    peakCritical: Math.round(Math.max(...result.trajectory.middle.map(x => x.current.critical[age]))),\n    errorPeakCritical: [Math.round(Math.max(...result.trajectory.lower.map(x => x.current.critical[age]))), Math.round(Math.max(...result.trajectory.upper.map(x => x.current.critical[age])))],\n    peakOverflow: Math.round(Math.max(...result.trajectory.middle.map(x => x.current.overflow[age]))),\n    errorPeakOverflow: [Math.round(Math.max(...result.trajectory.lower.map(x => x.current.overflow[age]))), Math.round(Math.max(...result.trajectory.upper.map(x => x.current.overflow[age])))],\n    totalFatalities: Math.round(lastDataPoint.cumulative.fatality[age]),\n    errorFatalities: [Math.round(Math.max(...result.trajectory.lower.map(x => x.cumulative.fatality[age]))), Math.round(Math.max(...result.trajectory.upper.map(x => x.cumulative.fatality[age])))]\n  }));\n\n  const tooltipValueFormatter = value => typeof value === 'number' ? formatNumber(value) : value;\n\n  const tickFormatter = value => formatNumberRounded(value);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-100 h-100\",\n    \"data-testid\": \"AgeBarChart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReactResizeDetector, {\n    handleWidth: true,\n    handleHeight: true,\n    refreshRate: 300,\n    refreshMode: \"debounce\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, ({\n    width\n  }) => {\n    if (!width) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"w-100 h-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 20\n        }\n      });\n    }\n\n    const height = Math.max(300, width / ASPECT_RATIO);\n    const tooltipPosition = calculatePosition(height);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      ref: casesChartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(BarChart, {\n      onClick: () => scrollToRef(casesChartRef),\n      width: width,\n      height: height,\n      data: plotData,\n      throttleDelay: 75,\n      margin: {\n        left: 0,\n        right: 0,\n        bottom: 10,\n        top: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      label: {\n        value: t('Age'),\n        textAnchor: 'middle',\n        position: 'insideBottom',\n        offset: -7,\n        fill: '#495057'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      label: {\n        value: t('Cases'),\n        angle: -90,\n        position: 'insideLeft',\n        fill: '#495057'\n      },\n      tickFormatter: tickFormatter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      label: {\n        value: t('Age distribution [%]'),\n        textAnchor: 'middle',\n        angle: 90,\n        position: 'insideRight',\n        fill: '#495057'\n      },\n      orientation: 'right',\n      yAxisId: \"ageDisAxis\",\n      tickFormatter: tickFormatter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      position: tooltipPosition,\n      content: props => /*#__PURE__*/React.createElement(ChartTooltip, Object.assign({\n        valueFormatter: tooltipValueFormatter\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 53\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      verticalAlign: \"bottom\",\n      wrapperStyle: {\n        paddingTop: '12px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      dataKey: \"peakSevere\",\n      fill: colors.severe,\n      name: t('peak severe'),\n      label: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"errorPeakSevere\",\n      stroke: colors.severe,\n      width: 2,\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      dataKey: \"peakCritical\",\n      fill: colors.critical,\n      name: t('peak critical'),\n      label: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"errorPeakCritical\",\n      stroke: colors.critical,\n      width: 2,\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      dataKey: \"peakOverflow\",\n      fill: colors.overflow,\n      name: t('peak overflow'),\n      label: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"errorPeakOverflow\",\n      stroke: colors.overflow,\n      width: 2,\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      dataKey: \"totalFatalities\",\n      fill: colors.fatality,\n      name: t('total deaths'),\n      label: label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ErrorBar, {\n      dataKey: \"errorFatalities\",\n      stroke: colors.fatality,\n      width: 2,\n      strokeWidth: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Bar, {\n      isAnimationActive: false,\n      dataKey: \"fraction\",\n      fill: \"#aaaaaa\",\n      name: t('% of population'),\n      yAxisId: 'ageDisAxis',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }\n    })));\n  }));\n}\n\n_s(AgeBarChartDisconnected, \"ZsvCN9IK/YgALVU8ZgToVS6NGXU=\", false, function () {\n  return [useTranslation];\n});\n\n_c = AgeBarChartDisconnected;\nAgeBarChartDisconnected.propTypes = {\n  ageDistributionData: _pt.array.isRequired,\n  severityDistributionData: _pt.array.isRequired,\n  shouldFormatNumbers: _pt.bool.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AgeBarChartDisconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Results/AgeBarChart.tsx"],"names":["React","connect","ReactResizeDetector","useTranslation","Bar","BarChart","ErrorBar","CartesianGrid","Legend","Tooltip","XAxis","YAxis","numberFormatter","selectAgeDistributionData","selectSeverityDistributionData","selectResult","selectShouldFormatNumbers","selectShouldShowPlotLabels","colors","calculatePosition","scrollToRef","ChartTooltip","ASPECT_RATIO","mapStateToProps","state","result","ageDistributionData","severityDistributionData","shouldFormatNumbers","shouldShowPlotLabels","mapDispatchToProps","AgeBarChart","AgeBarChartDisconnected","t","unsafeT","casesChartRef","useRef","label","position","fill","fontSize","formatter","undefined","num","Number","parseFloat","formatNumber","formatNumberRounded","Z","population","normAgeDistribution","map","d","ages","ageGroup","lastDataPoint","trajectory","middle","length","plotData","age","i","name","fraction","Math","round","peakSevere","max","x","current","severe","errorPeakSevere","lower","upper","peakCritical","critical","errorPeakCritical","peakOverflow","overflow","errorPeakOverflow","totalFatalities","cumulative","fatality","errorFatalities","tooltipValueFormatter","value","tickFormatter","width","height","tooltipPosition","left","right","bottom","top","textAnchor","offset","angle","props","paddingTop"],"mappings":"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","sourcesContent":["import { TFunction, TFunctionResult } from 'i18next'\nimport React from 'react'\n\nimport { sumBy } from 'lodash'\nimport { connect } from 'react-redux'\n\nimport ReactResizeDetector from 'react-resize-detector'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Bar,\n  BarChart,\n  ErrorBar,\n  CartesianGrid,\n  Legend,\n  Tooltip,\n  XAxis,\n  YAxis,\n  LabelProps,\n  TooltipProps,\n} from 'recharts'\n\nimport type { AlgorithmResult } from '../../../algorithms/types/Result.types'\nimport type { AgeDistributionDatum, SeverityDistributionDatum } from '../../../algorithms/types/Param.types'\n\nimport { numberFormatter } from '../../../helpers/numberFormat'\nimport { State } from '../../../state/reducer'\nimport { selectAgeDistributionData, selectSeverityDistributionData } from '../../../state/scenario/scenario.selectors'\nimport { selectResult } from '../../../state/algorithm/algorithm.selectors'\nimport { selectShouldFormatNumbers, selectShouldShowPlotLabels } from '../../../state/settings/settings.selectors'\n\nimport { colors } from './ChartCommon'\nimport { calculatePosition, scrollToRef } from './chartHelper'\nimport { ChartTooltip } from './ChartTooltip'\n\nconst ASPECT_RATIO = 16 / 4\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type SafeTFunction = (...args: Parameters<TFunction>) => Exclude<TFunctionResult, null | object>\n\nexport interface AgeBarChartProps {\n  result?: AlgorithmResult\n  ageDistributionData: AgeDistributionDatum[]\n  severityDistributionData: SeverityDistributionDatum[]\n  shouldFormatNumbers: boolean\n}\n\nconst mapStateToProps = (state: State) => ({\n  result: selectResult(state),\n  ageDistributionData: selectAgeDistributionData(state),\n  severityDistributionData: selectSeverityDistributionData(state),\n  shouldFormatNumbers: selectShouldFormatNumbers(state),\n  shouldShowPlotLabels: selectShouldShowPlotLabels(state),\n})\n\nconst mapDispatchToProps = {}\n\nexport const AgeBarChart = connect(mapStateToProps, mapDispatchToProps)(AgeBarChartDisconnected)\n\nexport function AgeBarChartDisconnected({\n  result,\n  ageDistributionData,\n  severityDistributionData,\n  shouldFormatNumbers,\n}: AgeBarChartProps) {\n  const { t: unsafeT } = useTranslation()\n  const casesChartRef = React.useRef(null)\n\n  const t = unsafeT as SafeTFunction\n\n  const label: LabelProps = {\n    position: 'top',\n    fill: '#444444',\n    fontSize: '11px',\n    formatter: (label: string | number) => {\n      if (label <= 0) {\n        return undefined\n      }\n\n      if (!shouldFormatNumbers) {\n        return label\n      }\n\n      let num = label\n      if (typeof num === 'string') {\n        num = Number.parseFloat(num)\n      }\n\n      return numberFormatter(true, false)(num)\n    },\n  }\n\n  if (!result) {\n    return null\n  }\n\n  const formatNumber = numberFormatter(shouldFormatNumbers, false)\n  const formatNumberRounded = numberFormatter(shouldFormatNumbers, true)\n\n  // Ensure age distribution is normalized\n  const Z: number = sumBy(ageDistributionData, ({ population }) => population)\n  const normAgeDistribution = ageDistributionData.map((d) => d.population / Z)\n  const ages = ageDistributionData.map((d) => d.ageGroup)\n\n  const lastDataPoint = result.trajectory.middle[result.trajectory.middle.length - 1]\n  const plotData = ages.map((age, i) => ({\n    name: age,\n    fraction: Math.round(normAgeDistribution[i] * 1000) / 10,\n    peakSevere: Math.round(Math.max(...result.trajectory.middle.map((x) => x.current.severe[age]))),\n    errorPeakSevere: [\n      Math.round(Math.max(...result.trajectory.lower.map((x) => x.current.severe[age]))),\n      Math.round(Math.max(...result.trajectory.upper.map((x) => x.current.severe[age]))),\n    ],\n    peakCritical: Math.round(Math.max(...result.trajectory.middle.map((x) => x.current.critical[age]))),\n    errorPeakCritical: [\n      Math.round(Math.max(...result.trajectory.lower.map((x) => x.current.critical[age]))),\n      Math.round(Math.max(...result.trajectory.upper.map((x) => x.current.critical[age]))),\n    ],\n    peakOverflow: Math.round(Math.max(...result.trajectory.middle.map((x) => x.current.overflow[age]))),\n    errorPeakOverflow: [\n      Math.round(Math.max(...result.trajectory.lower.map((x) => x.current.overflow[age]))),\n      Math.round(Math.max(...result.trajectory.upper.map((x) => x.current.overflow[age]))),\n    ],\n    totalFatalities: Math.round(lastDataPoint.cumulative.fatality[age]),\n    errorFatalities: [\n      Math.round(Math.max(...result.trajectory.lower.map((x) => x.cumulative.fatality[age]))),\n      Math.round(Math.max(...result.trajectory.upper.map((x) => x.cumulative.fatality[age]))),\n    ],\n  }))\n\n  const tooltipValueFormatter = (value: number | string) => (typeof value === 'number' ? formatNumber(value) : value)\n\n  const tickFormatter = (value: number) => formatNumberRounded(value)\n\n  return (\n    <div className=\"w-100 h-100\" data-testid=\"AgeBarChart\">\n      <ReactResizeDetector handleWidth handleHeight refreshRate={300} refreshMode=\"debounce\">\n        {({ width }: { width?: number }) => {\n          if (!width) {\n            return <div className=\"w-100 h-100\" />\n          }\n\n          const height = Math.max(300, width / ASPECT_RATIO)\n          const tooltipPosition = calculatePosition(height)\n\n          return (\n            <>\n              <div ref={casesChartRef} />\n              <BarChart\n                onClick={() => scrollToRef(casesChartRef)}\n                width={width}\n                height={height}\n                data={plotData}\n                throttleDelay={75}\n                margin={{\n                  left: 0,\n                  right: 0,\n                  bottom: 10,\n                  top: 10,\n                }}\n              >\n                <XAxis\n                  dataKey=\"name\"\n                  label={{\n                    value: t('Age'),\n                    textAnchor: 'middle',\n                    position: 'insideBottom',\n                    offset: -7,\n                    fill: '#495057',\n                  }}\n                />\n                <YAxis\n                  label={{ value: t('Cases'), angle: -90, position: 'insideLeft', fill: '#495057' }}\n                  tickFormatter={tickFormatter}\n                />\n                <YAxis\n                  label={{\n                    value: t('Age distribution [%]'),\n                    textAnchor: 'middle',\n                    angle: 90,\n                    position: 'insideRight',\n                    fill: '#495057',\n                  }}\n                  orientation={'right'}\n                  yAxisId=\"ageDisAxis\"\n                  tickFormatter={tickFormatter}\n                />\n                <Tooltip\n                  position={tooltipPosition}\n                  content={(props: TooltipProps) => <ChartTooltip valueFormatter={tooltipValueFormatter} {...props} />}\n                />\n                <Legend verticalAlign=\"bottom\" wrapperStyle={{ paddingTop: '12px' }} />\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <Bar\n                  isAnimationActive={false}\n                  dataKey=\"peakSevere\"\n                  fill={colors.severe}\n                  name={t('peak severe')}\n                  label={label}\n                >\n                  <ErrorBar dataKey=\"errorPeakSevere\" stroke={colors.severe} width={2} strokeWidth={1} />\n                </Bar>\n                <Bar\n                  isAnimationActive={false}\n                  dataKey=\"peakCritical\"\n                  fill={colors.critical}\n                  name={t('peak critical')}\n                  label={label}\n                >\n                  <ErrorBar dataKey=\"errorPeakCritical\" stroke={colors.critical} width={2} strokeWidth={1} />\n                </Bar>\n                <Bar\n                  isAnimationActive={false}\n                  dataKey=\"peakOverflow\"\n                  fill={colors.overflow}\n                  name={t('peak overflow')}\n                  label={label}\n                >\n                  <ErrorBar dataKey=\"errorPeakOverflow\" stroke={colors.overflow} width={2} strokeWidth={1} />\n                </Bar>\n                <Bar\n                  isAnimationActive={false}\n                  dataKey=\"totalFatalities\"\n                  fill={colors.fatality}\n                  name={t('total deaths')}\n                  label={label}\n                >\n                  <ErrorBar dataKey=\"errorFatalities\" stroke={colors.fatality} width={2} strokeWidth={1} />\n                </Bar>\n                <Bar\n                  isAnimationActive={false}\n                  dataKey=\"fraction\"\n                  fill=\"#aaaaaa\"\n                  name={t('% of population')}\n                  yAxisId={'ageDisAxis'}\n                />\n              </BarChart>\n            </>\n          )\n        }}\n      </ReactResizeDetector>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}