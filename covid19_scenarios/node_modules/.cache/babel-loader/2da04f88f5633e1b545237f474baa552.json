{"ast":null,"code":"import { put, takeLatest, select } from 'redux-saga/effects';\nimport { replace, LOCATION_CHANGE } from 'connected-react-router';\nimport { fromUrl } from '../../io/serialization/fromUrl';\nimport { algorithmRunTrigger } from '../algorithm/algorithm.actions';\nimport { addMitigationInterval, removeMitigationInterval, setAgeDistributionData, setScenario, setScenarioData, setScenarioState, setSeverityDistributionData } from './scenario.actions';\nimport { selectIsAutorunEnabled } from '../settings/settings.selectors';\nexport function* processUrl({\n  payload: {\n    location\n  }\n}) {\n  const {\n    pathname,\n    search\n  } = location;\n\n  if (pathname === '/' && search) {\n    const state = fromUrl(search);\n    yield Object.defineProperty(put(replace({\n      pathname,\n      search: ''\n    })), \"@@redux-saga/LOCATION\", {\n      value: {\n        fileName: \"src/state/scenario/scenario.sagas.ts\",\n        lineNumber: 21,\n        code: \"put(replace({ pathname, search: '' }))\"\n      }\n    });\n    yield Object.defineProperty(put(setScenarioState(state)), \"@@redux-saga/LOCATION\", {\n      value: {\n        fileName: \"src/state/scenario/scenario.sagas.ts\",\n        lineNumber: 22,\n        code: \"put(setScenarioState(state))\"\n      }\n    });\n    yield Object.defineProperty(put(algorithmRunTrigger()), \"@@redux-saga/LOCATION\", {\n      value: {\n        fileName: \"src/state/scenario/scenario.sagas.ts\",\n        lineNumber: 23,\n        code: \"put(algorithmRunTrigger())\"\n      }\n    });\n  } else {\n    yield Object.defineProperty(put(algorithmRunTrigger()), \"@@redux-saga/LOCATION\", {\n      value: {\n        fileName: \"src/state/scenario/scenario.sagas.ts\",\n        lineNumber: 25,\n        code: \"put(algorithmRunTrigger())\"\n      }\n    });\n  }\n}\nObject.defineProperty(processUrl, \"@@redux-saga/LOCATION\", {\n  value: {\n    fileName: \"src/state/scenario/scenario.sagas.ts\",\n    lineNumber: 17,\n    code: null\n  }\n})\nexport function* triggerAlgorithm() {\n  const isAutorunEnabled = yield select(selectIsAutorunEnabled);\n\n  if (isAutorunEnabled) {\n    yield Object.defineProperty(put(algorithmRunTrigger()), \"@@redux-saga/LOCATION\", {\n      value: {\n        fileName: \"src/state/scenario/scenario.sagas.ts\",\n        lineNumber: 32,\n        code: \"put(algorithmRunTrigger())\"\n      }\n    });\n  }\n}\nObject.defineProperty(triggerAlgorithm, \"@@redux-saga/LOCATION\", {\n  value: {\n    fileName: \"src/state/scenario/scenario.sagas.ts\",\n    lineNumber: 29,\n    code: null\n  }\n})\nexport default [takeLatest(LOCATION_CHANGE, processUrl), takeLatest(setScenario, triggerAlgorithm), takeLatest(setScenarioData, triggerAlgorithm), takeLatest(setScenarioState, triggerAlgorithm), takeLatest(setSeverityDistributionData, triggerAlgorithm), takeLatest(setAgeDistributionData, triggerAlgorithm), takeLatest(addMitigationInterval, triggerAlgorithm), takeLatest(removeMitigationInterval, triggerAlgorithm)];","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/state/scenario/scenario.sagas.ts"],"names":["put","takeLatest","select","replace","LOCATION_CHANGE","fromUrl","algorithmRunTrigger","addMitigationInterval","removeMitigationInterval","setAgeDistributionData","setScenario","setScenarioData","setScenarioState","setSeverityDistributionData","selectIsAutorunEnabled","processUrl","payload","location","pathname","search","state","triggerAlgorithm","isAutorunEnabled"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,MAA1B,QAAwC,oBAAxC;AAEA,SAASC,OAAT,EAAkBC,eAAlB,QAA+D,wBAA/D;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,SACEC,qBADF,EAEEC,wBAFF,EAGEC,sBAHF,EAIEC,WAJF,EAKEC,eALF,EAMEC,gBANF,EAOEC,2BAPF,QAQO,oBARP;AASA,SAASC,sBAAT,QAAuC,gCAAvC;AAEA,OAAO,UAAUC,UAAV,CAAqB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAAX,CAArB,EAAsE;AAC3E,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBF,QAA7B;;AACA,MAAIC,QAAQ,KAAK,GAAb,IAAoBC,MAAxB,EAAgC;AAC9B,UAAMC,KAAK,GAAGf,OAAO,CAACc,MAAD,CAArB;AACA,gCAAMnB,GAAG,CAACG,OAAO,CAAC;AAAEe,MAAAA,QAAF;AAAYC,MAAAA,MAAM,EAAE;AAApB,KAAD,CAAR,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gCAAMnB,GAAG,CAACY,gBAAgB,CAACQ,KAAD,CAAjB,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gCAAMpB,GAAG,CAACM,mBAAmB,EAApB,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GALD,MAKO;AACL,gCAAMN,GAAG,CAACM,mBAAmB,EAApB,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;AACF;;;;;;;;AAED,OAAO,UAAUe,gBAAV,GAA6B;AAClC,QAAMC,gBAAgB,GAAI,MAAMpB,MAAM,CAACY,sBAAD,CAAtC;;AACA,MAAIQ,gBAAJ,EAAsB;AACpB,gCAAMtB,GAAG,CAACM,mBAAmB,EAApB,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;AACF;;;;;;;;AAED,eAAe,CACbL,UAAU,CAACG,eAAD,EAAkBW,UAAlB,CADG,EAEbd,UAAU,CAACS,WAAD,EAAcW,gBAAd,CAFG,EAGbpB,UAAU,CAACU,eAAD,EAAkBU,gBAAlB,CAHG,EAIbpB,UAAU,CAACW,gBAAD,EAAmBS,gBAAnB,CAJG,EAKbpB,UAAU,CAACY,2BAAD,EAA8BQ,gBAA9B,CALG,EAMbpB,UAAU,CAACQ,sBAAD,EAAyBY,gBAAzB,CANG,EAObpB,UAAU,CAACM,qBAAD,EAAwBc,gBAAxB,CAPG,EAQbpB,UAAU,CAACO,wBAAD,EAA2Ba,gBAA3B,CARG,CAAf","sourcesContent":["import { put, takeLatest, select } from 'redux-saga/effects'\n\nimport { replace, LOCATION_CHANGE, LocationChangeAction } from 'connected-react-router'\nimport { fromUrl } from '../../io/serialization/fromUrl'\nimport { algorithmRunTrigger } from '../algorithm/algorithm.actions'\nimport {\n  addMitigationInterval,\n  removeMitigationInterval,\n  setAgeDistributionData,\n  setScenario,\n  setScenarioData,\n  setScenarioState,\n  setSeverityDistributionData,\n} from './scenario.actions'\nimport { selectIsAutorunEnabled } from '../settings/settings.selectors'\n\nexport function* processUrl({ payload: { location } }: LocationChangeAction) {\n  const { pathname, search } = location\n  if (pathname === '/' && search) {\n    const state = fromUrl(search)\n    yield put(replace({ pathname, search: '' }))\n    yield put(setScenarioState(state))\n    yield put(algorithmRunTrigger())\n  } else {\n    yield put(algorithmRunTrigger())\n  }\n}\n\nexport function* triggerAlgorithm() {\n  const isAutorunEnabled = (yield select(selectIsAutorunEnabled) as unknown) as boolean\n  if (isAutorunEnabled) {\n    yield put(algorithmRunTrigger())\n  }\n}\n\nexport default [\n  takeLatest(LOCATION_CHANGE, processUrl),\n  takeLatest(setScenario, triggerAlgorithm),\n  takeLatest(setScenarioData, triggerAlgorithm),\n  takeLatest(setScenarioState, triggerAlgorithm),\n  takeLatest(setSeverityDistributionData, triggerAlgorithm),\n  takeLatest(setAgeDistributionData, triggerAlgorithm),\n  takeLatest(addMitigationInterval, triggerAlgorithm),\n  takeLatest(removeMitigationInterval, triggerAlgorithm),\n]\n"]},"metadata":{},"sourceType":"module"}