{"ast":null,"code":"import _pt from \"prop-types\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/CaseCounts/CaseCountsDataPicker.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'reactstrap';\nimport { useTranslation, getI18n } from 'react-i18next';\nimport { FaTrash } from 'react-icons/fa';\nimport { NONE_COUNTRY_NAME } from '../../../constants';\nimport { setCaseCountsDataCustom, resetCaseCounts } from '../../../state/scenario/scenario.actions';\nimport { selectCaseCountsNameCustom } from '../../../state/scenario/scenario.selectors';\nimport { caseCountsNames } from '../../../io/defaults/getCaseCountsData';\nimport { FormCustom } from '../../Form/FormCustom';\nimport { FormDropdown } from '../../Form/FormDropdown';\nimport CaseCountsUploader from './CaseCountsUploader';\nconst caseCountOptions = caseCountsNames.map(name => ({\n  value: name,\n  label: name\n}));\ncaseCountOptions.push({\n  value: NONE_COUNTRY_NAME,\n  label: getI18n().t(NONE_COUNTRY_NAME)\n});\n\nconst mapStateToProps = state => ({\n  caseCountsNameCustom: selectCaseCountsNameCustom(state)\n});\n\nconst mapDispatchToProps = {\n  setCaseCountsDataCustom,\n  resetCaseCounts\n};\nexport const CaseCountsDataPicker = connect(mapStateToProps, mapDispatchToProps)(CaseCountsDataPickerDisconnected);\nexport function CaseCountsDataPickerDisconnected({\n  caseCountsNameCustom,\n  setCaseCountsDataCustom,\n  resetCaseCounts,\n  errors,\n  touched\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n\n  function onDataImported(imported) {\n    setCaseCountsDataCustom({\n      data: imported.data,\n      name: imported.fileName\n    });\n  }\n\n  function reset() {\n    resetCaseCounts();\n  }\n\n  if (caseCountsNameCustom) {\n    return /*#__PURE__*/React.createElement(FormCustom, {\n      identifier: \"population.caseCountsName\",\n      label: t('Confirmed cases'),\n      help: t('Select region for which to plot confirmed case and death counts.'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"truncate-ellipsis\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, caseCountsNameCustom), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      outline: true,\n      size: \"sm\",\n      onClick: reset,\n      title: t('Delete the imported case counts data'),\n      className: \"ml-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FaTrash, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormDropdown, {\n    identifier: \"population.caseCountsName\",\n    label: t('Confirmed cases'),\n    help: t('Select region for which to plot confirmed case and death counts.'),\n    options: caseCountOptions,\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CaseCountsUploader, {\n    onDataImported: onDataImported,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(CaseCountsDataPickerDisconnected, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = CaseCountsDataPickerDisconnected;\nCaseCountsDataPickerDisconnected.propTypes = {\n  caseCountsNameCustom: _pt.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CaseCountsDataPickerDisconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/CaseCounts/CaseCountsDataPicker.tsx"],"names":["React","connect","Button","useTranslation","getI18n","FaTrash","NONE_COUNTRY_NAME","setCaseCountsDataCustom","resetCaseCounts","selectCaseCountsNameCustom","caseCountsNames","FormCustom","FormDropdown","CaseCountsUploader","caseCountOptions","map","name","value","label","push","t","mapStateToProps","state","caseCountsNameCustom","mapDispatchToProps","CaseCountsDataPicker","CaseCountsDataPickerDisconnected","errors","touched","onDataImported","imported","data","fileName","reset"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { connect } from 'react-redux'\nimport { Button } from 'reactstrap'\nimport { useTranslation, getI18n } from 'react-i18next'\nimport type { FormikErrors, FormikTouched, FormikValues } from 'formik'\nimport { FaTrash } from 'react-icons/fa'\nimport type { ActionCreator } from 'typescript-fsa'\n\nimport type { CaseCountsData } from '../../../algorithms/types/Param.types'\n\nimport { NONE_COUNTRY_NAME } from '../../../constants'\n\nimport type { State } from '../../../state/reducer'\nimport { setCaseCountsDataCustom, resetCaseCounts } from '../../../state/scenario/scenario.actions'\nimport { selectCaseCountsNameCustom } from '../../../state/scenario/scenario.selectors'\nimport { caseCountsNames } from '../../../io/defaults/getCaseCountsData'\n\nimport { FormCustom } from '../../Form/FormCustom'\nimport { FormDropdown } from '../../Form/FormDropdown'\nimport CaseCountsUploader, { ImportedCaseCounts } from './CaseCountsUploader'\n\nconst caseCountOptions = caseCountsNames.map((name) => ({ value: name, label: name }))\ncaseCountOptions.push({ value: NONE_COUNTRY_NAME, label: getI18n().t(NONE_COUNTRY_NAME) })\n\nexport interface CaseCountsDataPickerProps {\n  caseCountsNameCustom?: string\n  setCaseCountsDataCustom: ActionCreator<CaseCountsData>\n  resetCaseCounts: ActionCreator<void>\n  errors?: FormikErrors<FormikValues>\n  touched?: FormikTouched<FormikValues>\n}\n\nconst mapStateToProps = (state: State) => ({\n  caseCountsNameCustom: selectCaseCountsNameCustom(state),\n})\n\nconst mapDispatchToProps = {\n  setCaseCountsDataCustom,\n  resetCaseCounts,\n}\n\nexport const CaseCountsDataPicker = connect(mapStateToProps, mapDispatchToProps)(CaseCountsDataPickerDisconnected)\n\nexport function CaseCountsDataPickerDisconnected({\n  caseCountsNameCustom,\n  setCaseCountsDataCustom,\n  resetCaseCounts,\n  errors,\n  touched,\n}: CaseCountsDataPickerProps) {\n  const { t } = useTranslation()\n\n  function onDataImported(imported: ImportedCaseCounts) {\n    setCaseCountsDataCustom({ data: imported.data, name: imported.fileName })\n  }\n\n  function reset() {\n    resetCaseCounts()\n  }\n\n  if (caseCountsNameCustom) {\n    return (\n      <FormCustom\n        identifier=\"population.caseCountsName\"\n        label={t('Confirmed cases')}\n        help={t('Select region for which to plot confirmed case and death counts.')}\n      >\n        <span className=\"truncate-ellipsis\">{caseCountsNameCustom}</span>\n        <Button\n          color=\"secondary\"\n          outline\n          size=\"sm\"\n          onClick={reset}\n          title={t('Delete the imported case counts data')}\n          className=\"ml-2\"\n        >\n          <FaTrash />\n        </Button>\n      </FormCustom>\n    )\n  }\n\n  return (\n    <>\n      <FormDropdown<string>\n        identifier=\"population.caseCountsName\"\n        label={t('Confirmed cases')}\n        help={t('Select region for which to plot confirmed case and death counts.')}\n        options={caseCountOptions}\n        errors={errors}\n        touched={touched}\n      />\n      <CaseCountsUploader onDataImported={onDataImported} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}