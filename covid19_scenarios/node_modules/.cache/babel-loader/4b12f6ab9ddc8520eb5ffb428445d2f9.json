{"ast":null,"code":"import * as yup from 'yup';\nimport i18next from 'i18next';\nimport { AgeGroup } from '../../../algorithms/types/Param.types';\nimport { CUSTOM_COUNTRY_NAME } from '../../../constants';\nimport { ageDistributionNames } from '../../../io/defaults/getAgeDistributionData';\nconst ageRegions = [...ageDistributionNames, CUSTOM_COUNTRY_NAME];\nconst MSG_REQUIRED = i18next.t('Value is required');\nconst MSG_NON_NEGATIVE = i18next.t('Should be non-negative (or zero)');\nconst MSG_POSITIVE = i18next.t('Should be strictly positive (non-zero)');\nconst MSG_AT_LEAST_TEN = i18next.t('Should be at least ten');\nconst MSG_AT_LEAST_ONE_DAY = i18next.t('Should be at least one day or greater');\nconst MSG_INTEGER = i18next.t('Should be a whole number');\nconst MSG_MAX_100 = i18next.t('Should be 100 at most');\nconst MSG_TOO_MANY_RUNS = i18next.t('Too many runs');\nconst MSG_RANGE_INVALID = i18next.t('Range begin should be less or equal to range end'); // TODO: all this validation should be replaced with JSON-schema-based validation\n\nconst percentageSchema = yup.number().required(i18next.t(MSG_REQUIRED)).min(0, i18next.t('Percentage should be non-negative')).max(100, i18next.t('Percentage cannot be greater than 100')).typeError(i18next.t('Percentage should be a number'));\nconst positiveIntegerSchema = yup.number().required(i18next.t(MSG_REQUIRED)).integer(i18next.t('This value should be an integer')).min(0, i18next.t('This value should be non-negative')).typeError(i18next.t('This value should be an integer'));\nexport function numericRangeNonNegative() {\n  return yup.object({\n    begin: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n    end: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE)\n  }).test('valid numeric range', MSG_RANGE_INVALID, ({\n    begin,\n    end\n  }) => begin <= end);\n}\nexport function percentageRange() {\n  return yup.object({\n    begin: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE).max(100, MSG_MAX_100),\n    end: yup.number().required(MSG_REQUIRED).max(100, MSG_MAX_100)\n  }).test('valid percentage range', MSG_RANGE_INVALID, ({\n    begin,\n    end\n  }) => begin <= end);\n}\nexport function dateRange() {\n  return yup.object({\n    begin: yup.date().required(MSG_REQUIRED),\n    end: yup.date().required(MSG_REQUIRED)\n  }).test('valid percentage range', MSG_RANGE_INVALID, ({\n    begin,\n    end\n  }) => begin <= end);\n}\nexport const schema = yup.object().shape({\n  population: yup.object().shape({\n    populationServed: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n    ageDistributionName: yup.string().required(MSG_REQUIRED).oneOf(ageRegions, i18next.t('No such region in our data')),\n    initialNumberOfCases: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n    importsPerDay: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n    caseCountsName: yup.string().required(MSG_REQUIRED),\n    hospitalBeds: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n    icuBeds: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE)\n  }).required(MSG_REQUIRED),\n  epidemiological: yup.object().shape({\n    latencyDays: yup.number().required(MSG_REQUIRED).min(1, MSG_AT_LEAST_ONE_DAY),\n    infectiousPeriodDays: yup.number().required(MSG_REQUIRED).min(1, MSG_AT_LEAST_ONE_DAY),\n    hospitalStayDays: yup.number().required(MSG_REQUIRED).min(1, MSG_AT_LEAST_ONE_DAY),\n    icuStayDays: yup.number().required(MSG_REQUIRED).min(1, MSG_AT_LEAST_ONE_DAY),\n    seasonalForcing: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n    overflowSeverity: yup.number().required(MSG_REQUIRED).positive(MSG_POSITIVE),\n    peakMonth: yup.number().required(MSG_REQUIRED).min(0, MSG_POSITIVE).max(11),\n    r0: numericRangeNonNegative().required(MSG_REQUIRED)\n  }).required(MSG_REQUIRED),\n  mitigation: yup.object().shape({\n    mitigationIntervals: yup.array().of(yup.object({\n      color: yup.string().required(MSG_REQUIRED),\n      id: yup.string().required(MSG_REQUIRED),\n      transmissionReduction: percentageRange().required(MSG_REQUIRED),\n      name: yup.string().required(MSG_REQUIRED),\n      timeRange: dateRange().required(MSG_REQUIRED)\n    }).required(MSG_REQUIRED)).defined()\n  }).required(MSG_REQUIRED),\n  simulation: yup.object().shape({\n    numberStochasticRuns: yup.number().integer(MSG_INTEGER).required(MSG_REQUIRED).min(1, MSG_AT_LEAST_TEN).max(100001, MSG_TOO_MANY_RUNS),\n    simulationTimeRange: dateRange().required(MSG_REQUIRED)\n  }).required(MSG_REQUIRED),\n  severity: yup.array().of(yup.object().shape({\n    id: yup.string().required(MSG_REQUIRED),\n    ageGroup: yup.string().oneOf(Object.values(AgeGroup)).required(MSG_REQUIRED),\n    population: positiveIntegerSchema.required(MSG_REQUIRED),\n    confirmed: percentageSchema.required(MSG_REQUIRED),\n    severe: percentageSchema.required(MSG_REQUIRED),\n    critical: percentageSchema.required(MSG_REQUIRED),\n    fatal: percentageSchema.required(MSG_REQUIRED),\n    isolated: percentageSchema.required(MSG_REQUIRED)\n  }).required(MSG_REQUIRED)).defined()\n}).required(MSG_REQUIRED);","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/validation/schema.ts"],"names":["yup","i18next","AgeGroup","CUSTOM_COUNTRY_NAME","ageDistributionNames","ageRegions","MSG_REQUIRED","t","MSG_NON_NEGATIVE","MSG_POSITIVE","MSG_AT_LEAST_TEN","MSG_AT_LEAST_ONE_DAY","MSG_INTEGER","MSG_MAX_100","MSG_TOO_MANY_RUNS","MSG_RANGE_INVALID","percentageSchema","number","required","min","max","typeError","positiveIntegerSchema","integer","numericRangeNonNegative","object","begin","end","test","percentageRange","dateRange","date","schema","shape","population","populationServed","ageDistributionName","string","oneOf","initialNumberOfCases","importsPerDay","caseCountsName","hospitalBeds","icuBeds","epidemiological","latencyDays","infectiousPeriodDays","hospitalStayDays","icuStayDays","seasonalForcing","overflowSeverity","positive","peakMonth","r0","mitigation","mitigationIntervals","array","of","color","id","transmissionReduction","name","timeRange","defined","simulation","numberStochasticRuns","simulationTimeRange","severity","ageGroup","Object","values","confirmed","severe","critical","fatal","isolated"],"mappings":"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","sourcesContent":["import * as yup from 'yup'\n\nimport i18next from 'i18next'\nimport { AgeGroup } from '../../../algorithms/types/Param.types'\nimport { UUIDv4 } from '../../../helpers/uuid'\n\nimport type { FormData } from '../Main'\n\nimport { CUSTOM_COUNTRY_NAME } from '../../../constants'\n\nimport { ageDistributionNames } from '../../../io/defaults/getAgeDistributionData'\n\nconst ageRegions = [...ageDistributionNames, CUSTOM_COUNTRY_NAME]\n\nconst MSG_REQUIRED = i18next.t('Value is required')\nconst MSG_NON_NEGATIVE = i18next.t('Should be non-negative (or zero)')\nconst MSG_POSITIVE = i18next.t('Should be strictly positive (non-zero)')\nconst MSG_AT_LEAST_TEN = i18next.t('Should be at least ten')\nconst MSG_AT_LEAST_ONE_DAY = i18next.t('Should be at least one day or greater')\nconst MSG_INTEGER = i18next.t('Should be a whole number')\nconst MSG_MAX_100 = i18next.t('Should be 100 at most')\nconst MSG_TOO_MANY_RUNS = i18next.t('Too many runs')\nconst MSG_RANGE_INVALID = i18next.t('Range begin should be less or equal to range end')\n\n// TODO: all this validation should be replaced with JSON-schema-based validation\n\nconst percentageSchema = yup\n  .number()\n  .required(i18next.t(MSG_REQUIRED))\n  .min(0, i18next.t('Percentage should be non-negative'))\n  .max(100, i18next.t('Percentage cannot be greater than 100'))\n  .typeError(i18next.t('Percentage should be a number'))\n\nconst positiveIntegerSchema = yup\n  .number()\n  .required(i18next.t(MSG_REQUIRED))\n  .integer(i18next.t('This value should be an integer'))\n  .min(0, i18next.t('This value should be non-negative'))\n  .typeError(i18next.t('This value should be an integer'))\n\nexport function numericRangeNonNegative() {\n  return yup\n    .object({\n      begin: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n      end: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n    })\n    .test('valid numeric range', MSG_RANGE_INVALID, ({ begin, end }) => begin <= end)\n}\n\nexport function percentageRange() {\n  return yup\n    .object({\n      begin: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE).max(100, MSG_MAX_100),\n      end: yup.number().required(MSG_REQUIRED).max(100, MSG_MAX_100),\n    })\n    .test('valid percentage range', MSG_RANGE_INVALID, ({ begin, end }) => begin <= end)\n}\n\nexport function dateRange() {\n  return yup\n    .object({\n      begin: yup.date().required(MSG_REQUIRED),\n      end: yup.date().required(MSG_REQUIRED),\n    })\n    .test('valid percentage range', MSG_RANGE_INVALID, ({ begin, end }) => begin <= end)\n}\n\nexport const schema: yup.Schema<FormData> = yup\n  .object()\n  .shape({\n    population: yup\n      .object()\n      .shape({\n        populationServed: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n\n        ageDistributionName: yup\n          .string()\n          .required(MSG_REQUIRED)\n          .oneOf(ageRegions, i18next.t('No such region in our data')),\n\n        initialNumberOfCases: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n\n        importsPerDay: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n\n        caseCountsName: yup.string().required(MSG_REQUIRED),\n\n        hospitalBeds: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n\n        icuBeds: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n      })\n      .required(MSG_REQUIRED),\n\n    epidemiological: yup\n      .object()\n      .shape({\n        latencyDays: yup.number().required(MSG_REQUIRED).min(1, MSG_AT_LEAST_ONE_DAY),\n\n        infectiousPeriodDays: yup.number().required(MSG_REQUIRED).min(1, MSG_AT_LEAST_ONE_DAY),\n\n        hospitalStayDays: yup.number().required(MSG_REQUIRED).min(1, MSG_AT_LEAST_ONE_DAY),\n\n        icuStayDays: yup.number().required(MSG_REQUIRED).min(1, MSG_AT_LEAST_ONE_DAY),\n\n        seasonalForcing: yup.number().required(MSG_REQUIRED).min(0, MSG_NON_NEGATIVE),\n\n        overflowSeverity: yup.number().required(MSG_REQUIRED).positive(MSG_POSITIVE),\n\n        peakMonth: yup.number().required(MSG_REQUIRED).min(0, MSG_POSITIVE).max(11),\n\n        r0: numericRangeNonNegative().required(MSG_REQUIRED),\n      })\n      .required(MSG_REQUIRED),\n\n    mitigation: yup\n      .object()\n      .shape({\n        mitigationIntervals: yup\n          .array()\n          .of(\n            yup\n              .object({\n                color: yup.string().required(MSG_REQUIRED),\n                id: (yup.string().required(MSG_REQUIRED) as unknown) as yup.Schema<UUIDv4>,\n                transmissionReduction: percentageRange().required(MSG_REQUIRED),\n                name: yup.string().required(MSG_REQUIRED),\n                timeRange: dateRange().required(MSG_REQUIRED),\n              })\n              .required(MSG_REQUIRED),\n          )\n          .defined(),\n      })\n      .required(MSG_REQUIRED),\n\n    simulation: yup\n      .object()\n      .shape({\n        numberStochasticRuns: yup\n          .number()\n          .integer(MSG_INTEGER)\n          .required(MSG_REQUIRED)\n          .min(1, MSG_AT_LEAST_TEN)\n          .max(100001, MSG_TOO_MANY_RUNS),\n\n        simulationTimeRange: dateRange().required(MSG_REQUIRED),\n      })\n      .required(MSG_REQUIRED),\n\n    severity: yup\n      .array()\n      .of(\n        yup\n          .object()\n          .shape({\n            id: yup.string().required(MSG_REQUIRED),\n            ageGroup: yup.string().oneOf(Object.values(AgeGroup)).required(MSG_REQUIRED),\n            population: positiveIntegerSchema.required(MSG_REQUIRED),\n            confirmed: percentageSchema.required(MSG_REQUIRED),\n            severe: percentageSchema.required(MSG_REQUIRED),\n            critical: percentageSchema.required(MSG_REQUIRED),\n            fatal: percentageSchema.required(MSG_REQUIRED),\n            isolated: percentageSchema.required(MSG_REQUIRED),\n          })\n          .required(MSG_REQUIRED),\n      )\n      .defined(),\n  })\n  .required(MSG_REQUIRED)\n"]},"metadata":{},"sourceType":"module"}