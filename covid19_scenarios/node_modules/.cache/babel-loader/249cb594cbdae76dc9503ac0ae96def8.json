{"ast":null,"code":"var _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/CaseCounts/CaseCountsUploader.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader, UncontrolledAlert } from 'reactstrap';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport Papa from 'papaparse';\nimport { appendDash } from '../../../helpers/appendDash';\nimport { FileReaderError, readFile } from '../../../helpers/readFile';\nimport { ErrorArray } from '../../../helpers/ErrorArray';\nimport { CSVParserErrorCSVSyntaxInvalid } from '../../../io/parsingCsv/errors';\nimport { convert, validate } from '../../../io/defaults/getCaseCountsData';\nimport CaseCountsUploaderInstructionsText from './CaseCountsUploaderInstructionsText.mdx';\nimport { CaseCountsLoaderUploadZone } from './CaseCountsUploadZone';\nimport './CaseCountsUploader.scss';\n\nclass UploadErrorTooManyFiles extends Error {\n  constructor(nFiles) {\n    super(`when uploading: one file is expected, but got ${nFiles}`);\n    this.nFiles = nFiles;\n  }\n\n}\n\nclass UploadErrorUnknown extends Error {\n  constructor() {\n    super(`when uploading: unknown error`);\n  }\n\n}\n\nfunction exceptionsToStrings(error) {\n  if (error instanceof UploadErrorTooManyFiles) {\n    return [i18next.t('Only one file is expected')];\n  }\n\n  if (error instanceof UploadErrorUnknown) {\n    return [i18next.t('Unknown error')];\n  }\n\n  if (error instanceof FileReaderError) {\n    return [i18next.t('Unable to read file.')];\n  }\n\n  if (error instanceof ErrorArray) {\n    var _error$errors;\n\n    return (_error$errors = error.errors) !== null && _error$errors !== void 0 ? _error$errors : [];\n  }\n\n  throw error;\n}\n\nexport default function CaseCountsUploader({\n  onDataImported\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [isOpen, setIsOpen] = useState(false);\n  const [errors, setErrors] = useState([]);\n\n  const toggleOpen = () => setIsOpen(!isOpen);\n\n  const close = () => setIsOpen(false);\n\n  async function processFiles(acceptedFiles, rejectedFiles) {\n    const nFiles = acceptedFiles.length + rejectedFiles.length;\n\n    if (nFiles > 1) {\n      throw new UploadErrorTooManyFiles(nFiles);\n    }\n\n    if (acceptedFiles.length !== 1) {\n      throw new UploadErrorTooManyFiles(acceptedFiles.length);\n    }\n\n    const file = acceptedFiles[0];\n    let content = '';\n\n    try {\n      content = await readFile(file); // NOTE: this should protect from parsing failures when file is using DOS-style newlines\n\n      content = content.replace(/\\r\\n/g, '\\n');\n    } catch {\n      throw new FileReaderError(file);\n    }\n\n    const {\n      data,\n      errors,\n      meta\n    } = Papa.parse(content, {\n      header: true,\n      skipEmptyLines: 'greedy',\n      trimHeaders: true,\n      dynamicTyping: true,\n      comments: '#'\n    });\n\n    if (errors.length > 0) {\n      throw new CSVParserErrorCSVSyntaxInvalid(errors.map(error => error.message));\n    } else if (meta.aborted || !(data === null || data === void 0 ? void 0 : data.length)) {\n      throw new CSVParserErrorCSVSyntaxInvalid([`Aborted`]);\n    } else if (!(data === null || data === void 0 ? void 0 : data.length)) {\n      throw new CSVParserErrorCSVSyntaxInvalid([`There was no data`]);\n    }\n\n    const dataDangerous = {\n      data,\n      name: file.name\n    };\n    validate(dataDangerous);\n    const converted = convert(dataDangerous);\n    onDataImported({\n      fileName: file.name,\n      data: converted.data\n    });\n    close();\n  }\n\n  async function onDrop(acceptedFiles, rejectedFiles) {\n    setErrors([]);\n\n    try {\n      await processFiles(acceptedFiles, rejectedFiles);\n    } catch (error) {\n      const errors = exceptionsToStrings(error);\n      setErrors(prevErrors => [...prevErrors, ...errors]);\n    }\n  }\n\n  const hasErrors = errors.length > 0;\n\n  if (hasErrors) {\n    console.warn(`Errors when uploading:\\n${errors.map(appendDash).join('\\n')}`);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-right pb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"sm\",\n    color: \"link\",\n    onClick: toggleOpen,\n    className: \"pt-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, t('or import your own data'))), /*#__PURE__*/React.createElement(Modal, {\n    className: \"height-fit\",\n    centered: true,\n    size: \"lg\",\n    fade: false,\n    isOpen: isOpen,\n    toggle: toggleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, t('Import more data')), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"case-counts-uploader-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CaseCountsUploaderInstructionsText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CaseCountsLoaderUploadZone, {\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-3 case-counts-uploader-error-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, hasErrors && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"mt-2 text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 19\n    }\n  }, t(`Error`)), errors.map(error => /*#__PURE__*/React.createElement(UncontrolledAlert, {\n    color: \"danger\",\n    className: \"case-counts-uploader-error-list-item\",\n    key: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, error)))))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    onClick: toggleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, t('Cancel')))));\n}\n\n_s(CaseCountsUploader, \"rd5DnJnGtQYTItfLGk5iV5RU++o=\", false, function () {\n  return [useTranslation];\n});\n\n_c = CaseCountsUploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"CaseCountsUploader\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/CaseCounts/CaseCountsUploader.tsx"],"names":["React","useState","Button","Modal","ModalBody","ModalFooter","ModalHeader","UncontrolledAlert","i18next","useTranslation","Papa","appendDash","FileReaderError","readFile","ErrorArray","CSVParserErrorCSVSyntaxInvalid","convert","validate","CaseCountsUploaderInstructionsText","CaseCountsLoaderUploadZone","UploadErrorTooManyFiles","Error","constructor","nFiles","UploadErrorUnknown","exceptionsToStrings","error","t","errors","CaseCountsUploader","onDataImported","isOpen","setIsOpen","setErrors","toggleOpen","close","processFiles","acceptedFiles","rejectedFiles","length","file","content","replace","data","meta","parse","header","skipEmptyLines","trimHeaders","dynamicTyping","comments","map","message","aborted","dataDangerous","name","converted","fileName","onDrop","prevErrors","hasErrors","console","warn","join"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport { FileRejection } from 'react-dropzone'\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader, UncontrolledAlert } from 'reactstrap'\nimport i18next from 'i18next'\nimport { useTranslation } from 'react-i18next'\nimport Papa from 'papaparse'\n\nimport { appendDash } from '../../../helpers/appendDash'\n\nimport type { CaseCountsDatum } from '../../../algorithms/types/Param.types'\n\nimport { FileReaderError, readFile } from '../../../helpers/readFile'\nimport { ErrorArray } from '../../../helpers/ErrorArray'\n\nimport { CSVParserErrorCSVSyntaxInvalid } from '../../../io/parsingCsv/errors'\nimport { convert, validate } from '../../../io/defaults/getCaseCountsData'\n\nimport CaseCountsUploaderInstructionsText from './CaseCountsUploaderInstructionsText.mdx'\nimport { CaseCountsLoaderUploadZone } from './CaseCountsUploadZone'\n\nimport './CaseCountsUploader.scss'\n\nclass UploadErrorTooManyFiles extends Error {\n  public readonly nFiles: number\n  constructor(nFiles: number) {\n    super(`when uploading: one file is expected, but got ${nFiles}`)\n    this.nFiles = nFiles\n  }\n}\n\nclass UploadErrorUnknown extends Error {\n  constructor() {\n    super(`when uploading: unknown error`)\n  }\n}\n\nfunction exceptionsToStrings(error: Error): string[] {\n  if (error instanceof UploadErrorTooManyFiles) {\n    return [i18next.t('Only one file is expected')]\n  }\n  if (error instanceof UploadErrorUnknown) {\n    return [i18next.t('Unknown error')]\n  }\n  if (error instanceof FileReaderError) {\n    return [i18next.t('Unable to read file.')]\n  }\n  if (error instanceof ErrorArray) {\n    return error.errors ?? []\n  }\n\n  throw error\n}\n\nexport interface ImportedCaseCounts {\n  fileName: string\n  data: CaseCountsDatum[]\n}\n\nexport interface ImportCaseCountDialogProps {\n  onDataImported(data: ImportedCaseCounts): void\n}\n\nexport default function CaseCountsUploader({ onDataImported }: ImportCaseCountDialogProps) {\n  const { t } = useTranslation()\n  const [isOpen, setIsOpen] = useState<boolean>(false)\n  const [errors, setErrors] = useState<string[]>([])\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n  const close = () => setIsOpen(false)\n\n  async function processFiles(acceptedFiles: File[], rejectedFiles: FileRejection[]) {\n    const nFiles = acceptedFiles.length + rejectedFiles.length\n\n    if (nFiles > 1) {\n      throw new UploadErrorTooManyFiles(nFiles)\n    }\n\n    if (acceptedFiles.length !== 1) {\n      throw new UploadErrorTooManyFiles(acceptedFiles.length)\n    }\n\n    const file = acceptedFiles[0]\n    let content = ''\n    try {\n      content = await readFile(file)\n\n      // NOTE: this should protect from parsing failures when file is using DOS-style newlines\n      content = content.replace(/\\r\\n/g, '\\n')\n    } catch {\n      throw new FileReaderError(file)\n    }\n\n    const { data, errors, meta } = Papa.parse(content, {\n      header: true,\n      skipEmptyLines: 'greedy',\n      trimHeaders: true,\n      dynamicTyping: true,\n      comments: '#',\n    })\n\n    if (errors.length > 0) {\n      throw new CSVParserErrorCSVSyntaxInvalid(errors.map((error) => error.message))\n    } else if (meta.aborted || !data?.length) {\n      throw new CSVParserErrorCSVSyntaxInvalid([`Aborted`])\n    } else if (!data?.length) {\n      throw new CSVParserErrorCSVSyntaxInvalid([`There was no data`])\n    }\n\n    const dataDangerous = { data, name: file.name }\n    validate(dataDangerous)\n    const converted = convert(dataDangerous)\n    onDataImported({ fileName: file.name, data: converted.data })\n    close()\n  }\n\n  async function onDrop(acceptedFiles: File[], rejectedFiles: FileRejection[]) {\n    setErrors([])\n\n    try {\n      await processFiles(acceptedFiles, rejectedFiles)\n    } catch (error) {\n      const errors = exceptionsToStrings(error)\n      setErrors((prevErrors) => [...prevErrors, ...errors])\n    }\n  }\n\n  const hasErrors = errors.length > 0\n  if (hasErrors) {\n    console.warn(`Errors when uploading:\\n${errors.map(appendDash).join('\\n')}`)\n  }\n\n  return (\n    <>\n      <div className=\"text-right pb-2\">\n        <Button size=\"sm\" color=\"link\" onClick={toggleOpen} className=\"pt-0\">\n          {t('or import your own data')}\n        </Button>\n      </div>\n\n      <Modal className=\"height-fit\" centered size=\"lg\" fade={false} isOpen={isOpen} toggle={toggleOpen}>\n        <ModalHeader toggle={toggleOpen}>{t('Import more data')}</ModalHeader>\n        <ModalBody>\n          <div className=\"case-counts-uploader-container\">\n            <CaseCountsUploaderInstructionsText />\n            <CaseCountsLoaderUploadZone onDrop={onDrop} />\n\n            <div className=\"mt-3 case-counts-uploader-error-list\">\n              {hasErrors && (\n                <>\n                  <h4 className=\"mt-2 text-danger\">{t(`Error`)}</h4>\n                  {errors.map((error) => (\n                    <UncontrolledAlert color=\"danger\" className=\"case-counts-uploader-error-list-item\" key={error}>\n                      {error}\n                    </UncontrolledAlert>\n                  ))}\n                </>\n              )}\n            </div>\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggleOpen}>\n            {t('Cancel')}\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}