{"ast":null,"code":"import loadable from '@loadable/component';\nimport delay from 'p-min-delay';\nimport { timeout } from 'promise-timeout';\nimport { withErrorBoundary } from 'react-error-boundary';\nimport ErrorPage from '../../pages/ErrorPage';\nconst Loadable = loadable(_c = props => {\n  const {\n    forceLoadingMs,\n    timeoutMs\n  } = props;\n  let pagePromise = import(\n  /**/\n\n  /* webpackChunkName: \"pages/[request]\" */\n\n  /* webpackExclude: /(\\.(css|scss)|(\\/__tests__\\/.*|([.\\/])(test|spec))\\.(js|ts\\md)sx?)$/ */\n  `../../pages/${props.page}` // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ); // Force \"Loading\" component to be shown a given amount of time\n  // (even if main component loads before the time elapses)\n  // Useful for transition animations.\n\n  if (forceLoadingMs > 0) {\n    pagePromise = delay(pagePromise, forceLoadingMs);\n  } // Emit error if page fails to load withing given time interval\n\n\n  if (timeoutMs > 0) {\n    pagePromise = timeout(pagePromise, timeoutMs);\n  }\n\n  return pagePromise;\n});\n_c2 = Loadable;\nexport default _c3 = withErrorBoundary(Loadable, {\n  FallbackComponent: ErrorPage\n});\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Loadable$loadable\");\n$RefreshReg$(_c2, \"Loadable\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/PageSwitcher/Loadable.tsx"],"names":["loadable","delay","timeout","withErrorBoundary","ErrorPage","Loadable","props","forceLoadingMs","timeoutMs","pagePromise","page","FallbackComponent"],"mappings":"AAAA,OAAOA,QAAP,MAA2C,qBAA3C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,OAAOC,SAAP,MAAsB,uBAAtB;AASA,MAAMC,QAAQ,GAAGL,QAAQ,MAAEM,KAAD,IAA0B;AAClD,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAgCF,KAAtC;AAEA,MAAIG,WAAW,GAAG;AAChB;;AACA;;AACA;AACC,iBAAcH,KAAK,CAACI,IAAK,EAJV,CAKhB;AALgB,GAAlB,CAHkD,CAWlD;AACA;AACA;;AACA,MAAIH,cAAc,GAAG,CAArB,EAAwB;AACtBE,IAAAA,WAAW,GAAGR,KAAK,CAACQ,WAAD,EAAcF,cAAd,CAAnB;AACD,GAhBiD,CAkBlD;;;AACA,MAAIC,SAAS,GAAG,CAAhB,EAAmB;AACjBC,IAAAA,WAAW,GAAGP,OAAO,CAACO,WAAD,EAAcD,SAAd,CAArB;AACD;;AAED,SAAOC,WAAP;AACD,CAxBwB,CAAzB;MAAMJ,Q;AA0BN,qBAAeF,iBAAiB,CAACE,QAAD,EAAW;AAAEM,EAAAA,iBAAiB,EAAEP;AAArB,CAAX,CAAhC","sourcesContent":["import loadable, { DefaultComponent } from '@loadable/component'\nimport delay from 'p-min-delay'\nimport { timeout } from 'promise-timeout'\nimport { withErrorBoundary } from 'react-error-boundary'\n\nimport ErrorPage from '../../pages/ErrorPage'\n\nexport interface LoadableProps {\n  page: string\n  pathname: string\n  forceLoadingMs: number\n  timeoutMs: number\n}\n\nconst Loadable = loadable((props: LoadableProps) => {\n  const { forceLoadingMs, timeoutMs } = props\n\n  let pagePromise = import(\n    /* webpackMode: \"lazy\" */\n    /* webpackChunkName: \"pages/[request]\" */\n    /* webpackExclude: /(\\.(css|scss)|(\\/__tests__\\/.*|([.\\/])(test|spec))\\.(js|ts\\md)sx?)$/ */\n    `../../pages/${props.page}`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) as Promise<DefaultComponent<any>>\n\n  // Force \"Loading\" component to be shown a given amount of time\n  // (even if main component loads before the time elapses)\n  // Useful for transition animations.\n  if (forceLoadingMs > 0) {\n    pagePromise = delay(pagePromise, forceLoadingMs)\n  }\n\n  // Emit error if page fails to load withing given time interval\n  if (timeoutMs > 0) {\n    pagePromise = timeout(pagePromise, timeoutMs)\n  }\n\n  return pagePromise\n})\n\nexport default withErrorBoundary(Loadable, { FallbackComponent: ErrorPage })\n"]},"metadata":{},"sourceType":"module"}