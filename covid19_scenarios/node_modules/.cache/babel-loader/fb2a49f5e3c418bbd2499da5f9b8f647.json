{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/esnext.aggregate-error\";\nimport \"core-js/modules/esnext.array.last-index\";\nimport \"core-js/modules/esnext.array.last-item\";\nimport \"core-js/modules/esnext.composite-key\";\nimport \"core-js/modules/esnext.composite-symbol\";\nimport \"core-js/modules/esnext.map.delete-all\";\nimport \"core-js/modules/esnext.map.every\";\nimport \"core-js/modules/esnext.map.filter\";\nimport \"core-js/modules/esnext.map.find\";\nimport \"core-js/modules/esnext.map.find-key\";\nimport \"core-js/modules/esnext.map.from\";\nimport \"core-js/modules/esnext.map.group-by\";\nimport \"core-js/modules/esnext.map.includes\";\nimport \"core-js/modules/esnext.map.key-by\";\nimport \"core-js/modules/esnext.map.key-of\";\nimport \"core-js/modules/esnext.map.map-keys\";\nimport \"core-js/modules/esnext.map.map-values\";\nimport \"core-js/modules/esnext.map.merge\";\nimport \"core-js/modules/esnext.map.of\";\nimport \"core-js/modules/esnext.map.reduce\";\nimport \"core-js/modules/esnext.map.some\";\nimport \"core-js/modules/esnext.map.update\";\nimport \"core-js/modules/esnext.math.clamp\";\nimport \"core-js/modules/esnext.math.deg-per-rad\";\nimport \"core-js/modules/esnext.math.degrees\";\nimport \"core-js/modules/esnext.math.fscale\";\nimport \"core-js/modules/esnext.math.iaddh\";\nimport \"core-js/modules/esnext.math.imulh\";\nimport \"core-js/modules/esnext.math.isubh\";\nimport \"core-js/modules/esnext.math.rad-per-deg\";\nimport \"core-js/modules/esnext.math.radians\";\nimport \"core-js/modules/esnext.math.scale\";\nimport \"core-js/modules/esnext.math.seeded-prng\";\nimport \"core-js/modules/esnext.math.signbit\";\nimport \"core-js/modules/esnext.math.umulh\";\nimport \"core-js/modules/esnext.number.from-string\";\nimport \"core-js/modules/esnext.observable\";\nimport \"core-js/modules/esnext.promise.any\";\nimport \"core-js/modules/esnext.promise.try\";\nimport \"core-js/modules/esnext.reflect.define-metadata\";\nimport \"core-js/modules/esnext.reflect.delete-metadata\";\nimport \"core-js/modules/esnext.reflect.get-metadata\";\nimport \"core-js/modules/esnext.reflect.get-metadata-keys\";\nimport \"core-js/modules/esnext.reflect.get-own-metadata\";\nimport \"core-js/modules/esnext.reflect.get-own-metadata-keys\";\nimport \"core-js/modules/esnext.reflect.has-metadata\";\nimport \"core-js/modules/esnext.reflect.has-own-metadata\";\nimport \"core-js/modules/esnext.reflect.metadata\";\nimport \"core-js/modules/esnext.set.add-all\";\nimport \"core-js/modules/esnext.set.delete-all\";\nimport \"core-js/modules/esnext.set.difference\";\nimport \"core-js/modules/esnext.set.every\";\nimport \"core-js/modules/esnext.set.filter\";\nimport \"core-js/modules/esnext.set.find\";\nimport \"core-js/modules/esnext.set.from\";\nimport \"core-js/modules/esnext.set.intersection\";\nimport \"core-js/modules/esnext.set.is-disjoint-from\";\nimport \"core-js/modules/esnext.set.is-subset-of\";\nimport \"core-js/modules/esnext.set.is-superset-of\";\nimport \"core-js/modules/esnext.set.join\";\nimport \"core-js/modules/esnext.set.map\";\nimport \"core-js/modules/esnext.set.of\";\nimport \"core-js/modules/esnext.set.reduce\";\nimport \"core-js/modules/esnext.set.some\";\nimport \"core-js/modules/esnext.set.symmetric-difference\";\nimport \"core-js/modules/esnext.set.union\";\nimport \"core-js/modules/esnext.string.at\";\nimport \"core-js/modules/esnext.string.code-points\";\nimport \"core-js/modules/esnext.string.match-all\";\nimport \"core-js/modules/esnext.string.replace-all\";\nimport \"core-js/modules/esnext.symbol.dispose\";\nimport \"core-js/modules/esnext.symbol.observable\";\nimport \"core-js/modules/esnext.symbol.pattern-match\";\nimport \"core-js/modules/esnext.weak-map.delete-all\";\nimport \"core-js/modules/esnext.weak-map.from\";\nimport \"core-js/modules/esnext.weak-map.of\";\nimport \"core-js/modules/esnext.weak-set.add-all\";\nimport \"core-js/modules/esnext.weak-set.delete-all\";\nimport \"core-js/modules/esnext.weak-set.from\";\nimport \"core-js/modules/esnext.weak-set.of\";\nimport \"core-js/modules/web.immediate\";\n/* eslint-disable no-restricted-globals */\n\n/* Necessary because 'self' should be accepted as a global in webworkers. */\n\nimport 'regenerator-runtime';\nimport { run } from '../../algorithms/run';\nimport { EnvVarError } from '../../../lib/EnvVarError';\nconst webRoot = process.env.WEB_ROOT;\n\nif (!webRoot) {\n  throw new EnvVarError('WEB_ROOT', webRoot);\n}\n\nself.addEventListener('message', event => {\n  const args = event.data;\n  run(args).then(result => self.postMessage({\n    result\n  })).catch(error => self.postMessage({\n    error: errorToString(error)\n  }));\n});\n/* Firefox cannot do structured cloning of Error types,\n * therefore we convert the error into a string.\n * Track https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n */\n\nfunction errorToString(error) {\n  return `Algorithm error:${error.name}:${error.message}`;\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/workers/algorithm/worker.ts"],"names":["webRoot","process","self","event","args","run","result","error","errorToString","name","message"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAIA,OAAA,qBAAA;AAEA,SAAA,GAAA,QAAA,sBAAA;AAEA,SAAA,WAAA,QAAA,0BAAA;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAPA,GAAAA,CAAhB,QAAA;;AACA,IAAI,CAAJ,OAAA,EAAc;AACZ,QAAM,IAAA,WAAA,CAAA,UAAA,EAAN,OAAM,CAAN;AACD;;AAEDC,IAAI,CAAJA,gBAAAA,CAAAA,SAAAA,EAAkCC,KAAD,IAAyB;AACxD,QAAMC,IAAI,GAAGD,KAAK,CAAlB,IAAA;AAEAE,EAAAA,GAAG,CAAHA,IAAG,CAAHA,CAAAA,IAAAA,CACSC,MAAD,IAAY,IAAI,CAAJ,WAAA,CAAiB;AAAEA,IAAAA;AAAF,GAAjB,CADpBD,EAAAA,KAAAA,CAEUE,KAAD,IAAW,IAAI,CAAJ,WAAA,CAAiB;AAAEA,IAAAA,KAAK,EAAEC,aAAa,CAAA,KAAA;AAAtB,GAAjB,CAFpBH;AAHFH,CAAAA;AAQA;;;;;AAIA,SAAA,aAAA,CAAA,KAAA,EAA6C;AAC3C,SAAQ,mBAAkBK,KAAK,CAACE,IAAK,IAAGF,KAAK,CAACG,OAA9C,EAAA;AACD","sourcesContent":["/* eslint-disable no-restricted-globals */\n/* Necessary because 'self' should be accepted as a global in webworkers. */\n\nimport 'core-js'\n\nimport 'regenerator-runtime'\n\nimport { run, RunParams } from '../../algorithms/run'\n\nimport { EnvVarError } from '../../../lib/EnvVarError'\n\nconst webRoot = process.env.WEB_ROOT\nif (!webRoot) {\n  throw new EnvVarError('WEB_ROOT', webRoot)\n}\n\nself.addEventListener('message', (event: MessageEvent) => {\n  const args = event.data as RunParams\n\n  run(args)\n    .then((result) => self.postMessage({ result }))\n    .catch((error) => self.postMessage({ error: errorToString(error) }))\n})\n\n/* Firefox cannot do structured cloning of Error types,\n * therefore we convert the error into a string.\n * Track https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n */\nfunction errorToString(error: Error): string {\n  return `Algorithm error:${error.name}:${error.message}`\n}\n"]},"metadata":{},"sourceType":"module"}