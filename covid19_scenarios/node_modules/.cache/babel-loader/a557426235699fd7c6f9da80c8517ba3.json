{"ast":null,"code":"import _pt from \"prop-types\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Scenario/ScenarioCardPopulation.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport i18next from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { CUSTOM_COUNTRY_NAME } from '../../../constants';\nimport { ageDistributionNames } from '../../../io/defaults/getAgeDistributionData';\nimport { CardWithControls } from '../../Form/CardWithControls';\nimport { FormDatePicker } from '../../Form/FormDatePicker';\nimport { FormDropdown } from '../../Form/FormDropdown';\nimport { FormSpinBox } from '../../Form/FormSpinBox';\nimport { CaseCountsDataPicker } from '../CaseCounts/CaseCountsDataPicker';\nconst countryOptions = ageDistributionNames.map(country => ({\n  value: country,\n  label: country\n}));\ncountryOptions.push({\n  value: CUSTOM_COUNTRY_NAME,\n  label: i18next.t(CUSTOM_COUNTRY_NAME)\n});\n\nfunction ScenarioCardPopulation({\n  errors,\n  touched\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/React.createElement(CardWithControls, {\n    className: \"card-population h-100\",\n    identifier: \"populationScenario\",\n    labelComponent: /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"p-0 m-0 d-inline text-truncate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 23\n      }\n    }, t('Population')),\n    help: t('Parameters of the population served by the healthcare system.'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormSpinBox, {\n    identifier: \"population.populationServed\",\n    label: t('Population'),\n    help: t('Number of people served by the healthcare system.'),\n    step: 1,\n    min: 0,\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormDropdown, {\n    identifier: \"population.ageDistributionName\",\n    label: t('Age distribution'),\n    help: t('Country to determine the age distribution in the population'),\n    options: countryOptions,\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormSpinBox, {\n    identifier: \"population.initialNumberOfCases\",\n    label: t('Initial number of cases'),\n    help: t('Number of cases present at the start of simulation'),\n    step: 1,\n    min: 0,\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormSpinBox, {\n    identifier: \"population.importsPerDay\",\n    label: t('Imports per day'),\n    help: t('Number of cases imported from the outside per day on average'),\n    step: 0.1,\n    min: 0,\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormSpinBox, {\n    identifier: \"population.hospitalBeds\",\n    label: t('Hospital Beds (est.)'),\n    help: t('Number of hospital beds available. The default values are rough estimates indicating total capacity. Number of beds available for COVID-19 treatment is likely much lower.'),\n    step: 1,\n    min: 0,\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormSpinBox, {\n    identifier: \"population.icuBeds\",\n    label: t('ICU/ICMU (est.)'),\n    help: t('Number of available beds in Intensive Care Units (ICUs). The default values are rough estimates indicating total capacity. Number of ICU/ICMUs available for COVID-19 treatment is likely much lower.'),\n    step: 1,\n    min: 0,\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CaseCountsDataPicker, {\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormDatePicker, {\n    identifier: \"simulation.simulationTimeRange\",\n    label: t('Simulation time range'),\n    help: t('Start and end date of the simulation. Changing the time range might affect the result due to resampling of the mitigation curve.'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormSpinBox, {\n    identifier: \"simulation.numberStochasticRuns\",\n    label: t('Number of runs'),\n    help: t('Perform multiple runs, to account for the uncertainty of parameters. More runs result in more accurate simulation, but take more time to finish.'),\n    step: 1,\n    min: 10,\n    errors: errors,\n    touched: touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(ScenarioCardPopulation, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ScenarioCardPopulation;\nexport { ScenarioCardPopulation };\n\nvar _c;\n\n$RefreshReg$(_c, \"ScenarioCardPopulation\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Scenario/ScenarioCardPopulation.tsx"],"names":["React","i18next","useTranslation","CUSTOM_COUNTRY_NAME","ageDistributionNames","CardWithControls","FormDatePicker","FormDropdown","FormSpinBox","CaseCountsDataPicker","countryOptions","map","country","value","label","push","t","ScenarioCardPopulation","errors","touched"],"mappings":"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","sourcesContent":["import React from 'react'\nimport i18next from 'i18next'\n\nimport { FormikErrors, FormikTouched, FormikValues } from 'formik'\n\nimport { useTranslation } from 'react-i18next'\n\nimport { CUSTOM_COUNTRY_NAME } from '../../../constants'\n\nimport { ageDistributionNames } from '../../../io/defaults/getAgeDistributionData'\n\nimport { CardWithControls } from '../../Form/CardWithControls'\nimport { FormDatePicker } from '../../Form/FormDatePicker'\nimport { FormDropdown } from '../../Form/FormDropdown'\nimport { FormSpinBox } from '../../Form/FormSpinBox'\n\nimport { CaseCountsDataPicker } from '../CaseCounts/CaseCountsDataPicker'\n\nconst countryOptions = ageDistributionNames.map((country) => ({ value: country, label: country }))\ncountryOptions.push({ value: CUSTOM_COUNTRY_NAME, label: i18next.t(CUSTOM_COUNTRY_NAME) })\n\nexport interface ScenarioCardPopulationProps {\n  errors?: FormikErrors<FormikValues>\n  touched?: FormikTouched<FormikValues>\n}\n\nfunction ScenarioCardPopulation({ errors, touched }: ScenarioCardPopulationProps) {\n  const { t } = useTranslation()\n\n  return (\n    <CardWithControls\n      className=\"card-population h-100\"\n      identifier=\"populationScenario\"\n      labelComponent={<h3 className=\"p-0 m-0 d-inline text-truncate\">{t('Population')}</h3>}\n      help={t('Parameters of the population served by the healthcare system.')}\n    >\n      <FormSpinBox\n        identifier=\"population.populationServed\"\n        label={t('Population')}\n        help={t('Number of people served by the healthcare system.')}\n        step={1}\n        min={0}\n        errors={errors}\n        touched={touched}\n      />\n      <FormDropdown<string>\n        identifier=\"population.ageDistributionName\"\n        label={t('Age distribution')}\n        help={t('Country to determine the age distribution in the population')}\n        options={countryOptions}\n        errors={errors}\n        touched={touched}\n      />\n      <FormSpinBox\n        identifier=\"population.initialNumberOfCases\"\n        label={t('Initial number of cases')}\n        help={t('Number of cases present at the start of simulation')}\n        step={1}\n        min={0}\n        errors={errors}\n        touched={touched}\n      />\n      <FormSpinBox\n        identifier=\"population.importsPerDay\"\n        label={t('Imports per day')}\n        help={t('Number of cases imported from the outside per day on average')}\n        step={0.1}\n        min={0}\n        errors={errors}\n        touched={touched}\n      />\n      <FormSpinBox\n        identifier=\"population.hospitalBeds\"\n        label={t('Hospital Beds (est.)')}\n        help={t(\n          'Number of hospital beds available. The default values are rough estimates indicating total capacity. Number of beds available for COVID-19 treatment is likely much lower.',\n        )}\n        step={1}\n        min={0}\n        errors={errors}\n        touched={touched}\n      />\n      <FormSpinBox\n        identifier=\"population.icuBeds\"\n        label={t('ICU/ICMU (est.)')}\n        help={t(\n          'Number of available beds in Intensive Care Units (ICUs). The default values are rough estimates indicating total capacity. Number of ICU/ICMUs available for COVID-19 treatment is likely much lower.',\n        )}\n        step={1}\n        min={0}\n        errors={errors}\n        touched={touched}\n      />\n      <CaseCountsDataPicker errors={errors} touched={touched} />\n      <FormDatePicker\n        identifier=\"simulation.simulationTimeRange\"\n        label={t('Simulation time range')}\n        help={t(\n          'Start and end date of the simulation. Changing the time range might affect the result due to resampling of the mitigation curve.',\n        )}\n      />\n      <FormSpinBox\n        identifier=\"simulation.numberStochasticRuns\"\n        label={t('Number of runs')}\n        help={t(\n          'Perform multiple runs, to account for the uncertainty of parameters. More runs result in more accurate simulation, but take more time to finish.',\n        )}\n        step={1}\n        min={10}\n        errors={errors}\n        touched={touched}\n      />\n    </CardWithControls>\n  )\n}\n\nexport { ScenarioCardPopulation }\n"]},"metadata":{},"sourceType":"module"}