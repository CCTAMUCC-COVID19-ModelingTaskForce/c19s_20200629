{"ast":null,"code":"import _trim from \"lodash/trim\";\nimport Ajv from 'ajv';\nimport ajvLocalizers from 'ajv-i18n';\nimport { Convert } from '../../algorithms/types/Param.types';\nimport validateCaseCountsArray, { errors } from '../../.generated/latest/validateCaseCountsArray';\nimport validateCaseCountsData, { errors as dataErrors } from '../../.generated/latest/validateCaseCountsData';\nimport { DeserializationErrorValidationFailed, DeserializationErrorConversionFailed } from '../serialization/errors';\nimport caseCountsDataRaw from '../../assets/data/caseCounts.json';\nimport { NONE_COUNTRY_NAME } from '../../constants';\nexport function validateAll() {\n  const valid = validateCaseCountsArray(caseCountsDataRaw);\n\n  if (!valid) {\n    throw errors;\n  }\n\n  return caseCountsDataRaw.all;\n}\nexport function validate(caseCountsDataDangerous) {\n  if (!validateCaseCountsData(caseCountsDataDangerous)) {\n    var _ajvLocalizers$locale;\n\n    const locale = 'en'; // TODO: use current locale\n\n    const localize = (_ajvLocalizers$locale = ajvLocalizers[locale]) !== null && _ajvLocalizers$locale !== void 0 ? _ajvLocalizers$locale : ajvLocalizers.en;\n    localize(dataErrors);\n    const ajv = Ajv({\n      allErrors: true\n    });\n    const separator = '<<<NEWLINE>>>';\n    const errorString = ajv.errorsText(dataErrors, {\n      dataVar: '',\n      separator\n    });\n\n    if (typeof errorString === 'string') {\n      const errorStrings = errorString.split(separator).map(_trim);\n\n      if (errorStrings.length > 0) {\n        throw new DeserializationErrorValidationFailed(errorStrings);\n      }\n    }\n\n    throw new DeserializationErrorValidationFailed(['Unknown validation error']);\n  }\n}\nexport function convert(caseCountsDangerous) {\n  try {\n    return Convert.toCaseCountsData(JSON.stringify(caseCountsDangerous));\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new DeserializationErrorConversionFailed(error.message);\n    }\n\n    throw new DeserializationErrorConversionFailed('Unknown conversion error');\n  }\n}\nconst manyCaseCountsData = validateAll();\nexport const caseCountsNames = manyCaseCountsData.map(cc => cc.name);\nexport function getCaseCountsData(name) {\n  if (name === NONE_COUNTRY_NAME) {\n    return {\n      name,\n      data: []\n    };\n  }\n\n  const caseCountFound = manyCaseCountsData.find(cc => cc.name === name);\n\n  if (!caseCountFound) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`\n        Developer warning: requested case counts for \"${name}\", but this entry is not present in the data.\n        This probably means that the data has an incorrect reference to non-existing case counts.\n\n        Returning an empty case counts array. However the app state will not be adjusted.\n        This means that the incorrect name \"${name}\" will be visible in the UI, but no actual case data will be present`);\n    }\n\n    return {\n      name,\n      data: []\n    };\n  }\n\n  const caseCountsData = convert(caseCountFound);\n  const data = caseCountsData.data.filter(d => d.cases || d.deaths || d.icu || d.hospitalized).sort((a, b) => a.time > b.time ? 1 : -1);\n  return {\n    name,\n    data\n  };\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/io/defaults/getCaseCountsData.ts"],"names":["Ajv","ajvLocalizers","Convert","validateCaseCountsArray","errors","validateCaseCountsData","dataErrors","DeserializationErrorValidationFailed","DeserializationErrorConversionFailed","caseCountsDataRaw","NONE_COUNTRY_NAME","validateAll","valid","all","validate","caseCountsDataDangerous","locale","localize","en","ajv","allErrors","separator","errorString","errorsText","dataVar","errorStrings","split","map","length","convert","caseCountsDangerous","toCaseCountsData","JSON","stringify","error","Error","message","manyCaseCountsData","caseCountsNames","cc","name","getCaseCountsData","data","caseCountFound","find","process","env","NODE_ENV","console","warn","caseCountsData","filter","d","cases","deaths","icu","hospitalized","sort","a","b","time"],"mappings":"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","sourcesContent":["import { trim } from 'lodash'\n\nimport Ajv from 'ajv'\nimport ajvLocalizers from 'ajv-i18n'\n\nimport { CaseCountsArray, CaseCountsData, Convert } from '../../algorithms/types/Param.types'\nimport validateCaseCountsArray, { errors } from '../../.generated/latest/validateCaseCountsArray'\nimport validateCaseCountsData, { errors as dataErrors } from '../../.generated/latest/validateCaseCountsData'\n\nimport { DeserializationErrorValidationFailed, DeserializationErrorConversionFailed } from '../serialization/errors'\n\nimport caseCountsDataRaw from '../../assets/data/caseCounts.json'\nimport { NONE_COUNTRY_NAME } from '../../constants'\n\nexport function validateAll(): CaseCountsData[] {\n  const valid = validateCaseCountsArray(caseCountsDataRaw)\n  if (!valid) {\n    throw errors\n  }\n\n  return ((caseCountsDataRaw as unknown) as CaseCountsArray).all\n}\n\nexport function validate(caseCountsDataDangerous: Record<string, unknown>): void {\n  if (!validateCaseCountsData(caseCountsDataDangerous)) {\n    const locale = 'en' // TODO: use current locale\n    const localize = ajvLocalizers[locale] ?? ajvLocalizers.en\n    localize(dataErrors)\n\n    const ajv = Ajv({ allErrors: true })\n    const separator = '<<<NEWLINE>>>'\n    const errorString = ajv.errorsText(dataErrors, { dataVar: '', separator })\n    if (typeof errorString === 'string') {\n      const errorStrings = errorString.split(separator).map(trim)\n      if (errorStrings.length > 0) {\n        throw new DeserializationErrorValidationFailed(errorStrings)\n      }\n    }\n\n    throw new DeserializationErrorValidationFailed(['Unknown validation error'])\n  }\n}\n\nexport function convert(caseCountsDangerous: Record<string, unknown>): CaseCountsData {\n  try {\n    return Convert.toCaseCountsData(JSON.stringify(caseCountsDangerous))\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new DeserializationErrorConversionFailed(error.message)\n    }\n\n    throw new DeserializationErrorConversionFailed('Unknown conversion error')\n  }\n}\n\nconst manyCaseCountsData = validateAll()\nexport const caseCountsNames = manyCaseCountsData.map((cc) => cc.name)\n\nexport function getCaseCountsData(name: string) {\n  if (name === NONE_COUNTRY_NAME) {\n    return { name, data: [] }\n  }\n\n  const caseCountFound = manyCaseCountsData.find((cc) => cc.name === name)\n  if (!caseCountFound) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`\n        Developer warning: requested case counts for \"${name}\", but this entry is not present in the data.\n        This probably means that the data has an incorrect reference to non-existing case counts.\n\n        Returning an empty case counts array. However the app state will not be adjusted.\n        This means that the incorrect name \"${name}\" will be visible in the UI, but no actual case data will be present`)\n    }\n\n    return { name, data: [] }\n  }\n\n  const caseCountsData = convert((caseCountFound as unknown) as Record<string, unknown>)\n\n  const data = caseCountsData.data\n    .filter((d) => d.cases || d.deaths || d.icu || d.hospitalized)\n    .sort((a, b) => (a.time > b.time ? 1 : -1))\n\n  return { name, data }\n}\n"]},"metadata":{},"sourceType":"module"}