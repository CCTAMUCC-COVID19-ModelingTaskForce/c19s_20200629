{"ast":null,"code":"import _pt from \"prop-types\";\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Controls/RunButtonContent.tsx\";\nimport React from 'react';\nimport i18next from 'i18next';\nimport { MdPlayArrow, MdRefresh } from 'react-icons/md';\nimport Loader from 'react-loader-spinner';\nexport function RunningSpinner({\n  size\n}) {\n  return /*#__PURE__*/React.createElement(Loader, {\n    type: \"ThreeDots\",\n    color: \"white\",\n    height: size,\n    width: size,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  });\n}\n_c = RunningSpinner;\nRunningSpinner.propTypes = {\n  size: _pt.number.isRequired\n};\nconst states = {\n  normalIdling: {\n    Icon: MdPlayArrow,\n    text: i18next.t(`Run`)\n  },\n  normalRunning: {\n    Icon: RunningSpinner,\n    text: i18next.t(`Running...`)\n  },\n  autorunIdling: {\n    Icon: MdRefresh,\n    text: i18next.t(`Refresh`)\n  },\n  autorunRunning: {\n    Icon: RunningSpinner,\n    text: i18next.t(`Refreshing...`)\n  }\n};\nexport function RunButtonContentConcrete({\n  state,\n  size\n}) {\n  const {\n    Icon\n  } = state;\n  return /*#__PURE__*/React.createElement(Icon, {\n    size: size,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }\n  });\n}\n_c2 = RunButtonContentConcrete;\nexport function RunButtonContent({\n  isRunning,\n  isAutorunEnabled,\n  size = 35\n}) {\n  let state = states.autorunIdling;\n\n  if (isAutorunEnabled && isRunning) {\n    state = states.autorunRunning;\n  } else if (!isAutorunEnabled && !isRunning) {\n    state = states.normalIdling;\n  } else if (!isAutorunEnabled && isRunning) {\n    state = states.normalRunning;\n  }\n\n  return /*#__PURE__*/React.createElement(RunButtonContentConcrete, {\n    state: state,\n    size: size,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }\n  });\n}\n_c3 = RunButtonContent;\nRunButtonContent.propTypes = {\n  isRunning: _pt.bool.isRequired,\n  isAutorunEnabled: _pt.bool.isRequired,\n  size: _pt.number.isRequired\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RunningSpinner\");\n$RefreshReg$(_c2, \"RunButtonContentConcrete\");\n$RefreshReg$(_c3, \"RunButtonContent\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Controls/RunButtonContent.tsx"],"names":["React","i18next","MdPlayArrow","MdRefresh","Loader","RunningSpinner","size","states","normalIdling","Icon","text","t","normalRunning","autorunIdling","autorunRunning","RunButtonContentConcrete","state","RunButtonContent","isRunning","isAutorunEnabled"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,gBAAvC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAMA,OAAO,SAASC,cAAT,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAsD;AAC3D,sBAAO,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,WAAb;AAAyB,IAAA,KAAK,EAAC,OAA/B;AAAuC,IAAA,MAAM,EAAEA,IAA/C;AAAqD,IAAA,KAAK,EAAEA,IAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;KAFeD,c;;AAHdC,EAAAA,I;;AAYF,MAAMC,MAAkG,GAAG;AACzGC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAEP,WADM;AAEZQ,IAAAA,IAAI,EAAET,OAAO,CAACU,CAAR,CAAW,KAAX;AAFM,GAD2F;AAKzGC,EAAAA,aAAa,EAAE;AACbH,IAAAA,IAAI,EAAEJ,cADO;AAEbK,IAAAA,IAAI,EAAET,OAAO,CAACU,CAAR,CAAW,YAAX;AAFO,GAL0F;AASzGE,EAAAA,aAAa,EAAE;AACbJ,IAAAA,IAAI,EAAEN,SADO;AAEbO,IAAAA,IAAI,EAAET,OAAO,CAACU,CAAR,CAAW,SAAX;AAFO,GAT0F;AAazGG,EAAAA,cAAc,EAAE;AACdL,IAAAA,IAAI,EAAEJ,cADQ;AAEdK,IAAAA,IAAI,EAAET,OAAO,CAACU,CAAR,CAAW,eAAX;AAFQ;AAbyF,CAA3G;AAmBA,OAAO,SAASI,wBAAT,CAAkC;AAAEC,EAAAA,KAAF;AAASV,EAAAA;AAAT,CAAlC,EAAyF;AAC9F,QAAM;AAAEG,IAAAA;AAAF,MAAWO,KAAjB;AAEA,sBAAO,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEV,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;MAJeS,wB;AAYhB,OAAO,SAASE,gBAAT,CAA0B;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,gBAAb;AAA+Bb,EAAAA,IAAI,GAAG;AAAtC,CAA1B,EAA6F;AAClG,MAAIU,KAAK,GAAGT,MAAM,CAACM,aAAnB;;AACA,MAAIM,gBAAgB,IAAID,SAAxB,EAAmC;AACjCF,IAAAA,KAAK,GAAGT,MAAM,CAACO,cAAf;AACD,GAFD,MAEO,IAAI,CAACK,gBAAD,IAAqB,CAACD,SAA1B,EAAqC;AAC1CF,IAAAA,KAAK,GAAGT,MAAM,CAACC,YAAf;AACD,GAFM,MAEA,IAAI,CAACW,gBAAD,IAAqBD,SAAzB,EAAoC;AACzCF,IAAAA,KAAK,GAAGT,MAAM,CAACK,aAAf;AACD;;AAED,sBAAO,oBAAC,wBAAD;AAA0B,IAAA,KAAK,EAAEI,KAAjC;AAAwC,IAAA,IAAI,EAAEV,IAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;MAXeW,gB;;AALdC,EAAAA,S;AACAC,EAAAA,gB;AACAb,EAAAA,I","sourcesContent":["import React from 'react'\n\nimport i18next from 'i18next'\nimport { MdPlayArrow, MdRefresh } from 'react-icons/md'\nimport Loader from 'react-loader-spinner'\n\nexport interface RunningSpinerProps {\n  size: number\n}\n\nexport function RunningSpinner({ size }: RunningSpinerProps) {\n  return <Loader type=\"ThreeDots\" color=\"white\" height={size} width={size} />\n}\n\nexport interface ButtonState {\n  Icon: React.ElementType\n  text: string\n}\n\nconst states: Record<'normalIdling' | 'normalRunning' | 'autorunIdling' | 'autorunRunning', ButtonState> = {\n  normalIdling: {\n    Icon: MdPlayArrow,\n    text: i18next.t(`Run`),\n  },\n  normalRunning: {\n    Icon: RunningSpinner,\n    text: i18next.t(`Running...`),\n  },\n  autorunIdling: {\n    Icon: MdRefresh,\n    text: i18next.t(`Refresh`),\n  },\n  autorunRunning: {\n    Icon: RunningSpinner,\n    text: i18next.t(`Refreshing...`),\n  },\n}\n\nexport function RunButtonContentConcrete({ state, size }: { state: ButtonState; size: number }) {\n  const { Icon } = state\n\n  return <Icon size={size} />\n}\n\nexport interface RunButtonContentProps {\n  isRunning: boolean\n  isAutorunEnabled: boolean\n  size: number\n}\n\nexport function RunButtonContent({ isRunning, isAutorunEnabled, size = 35 }: RunButtonContentProps) {\n  let state = states.autorunIdling\n  if (isAutorunEnabled && isRunning) {\n    state = states.autorunRunning\n  } else if (!isAutorunEnabled && !isRunning) {\n    state = states.normalIdling\n  } else if (!isAutorunEnabled && isRunning) {\n    state = states.normalRunning\n  }\n\n  return <RunButtonContentConcrete state={state} size={size} />\n}\n"]},"metadata":{},"sourceType":"module"}