{"ast":null,"code":"import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport immerCase from '../util/fsaImmerReducer';\nimport { setAutorun, setLogScale, setFormatNumbers, setResultsMaximized, toggleAutorun, toggleLogScale, toggleFormatNumbers, toggleResultsMaximized, setDisclaimerVersionAccepted, toggleDisclaimerShouldSuppress, setLocale } from './settings.actions';\nimport { settingsDefaultState } from './settings.state';\nexport const settingsReducer = reducerWithInitialState(settingsDefaultState).withHandling(immerCase(toggleAutorun, draft => {\n  draft.isAutorunEnabled = !draft.isAutorunEnabled;\n})).withHandling(immerCase(toggleLogScale, draft => {\n  draft.isLogScale = !draft.isLogScale;\n})).withHandling(immerCase(toggleFormatNumbers, draft => {\n  draft.shouldFormatNumbers = !draft.shouldFormatNumbers;\n})).withHandling(immerCase(toggleResultsMaximized, draft => {\n  draft.areResultsMaximized = !draft.areResultsMaximized;\n})).withHandling(immerCase(setAutorun, (draft, isAutorunEnabled) => {\n  draft.isAutorunEnabled = isAutorunEnabled;\n})).withHandling(immerCase(setLogScale, (draft, isLogScale) => {\n  draft.isLogScale = isLogScale;\n})).withHandling(immerCase(setFormatNumbers, (draft, shouldFormatNumbers) => {\n  draft.shouldFormatNumbers = shouldFormatNumbers;\n})).withHandling(immerCase(setResultsMaximized, (draft, areResultsMaximized) => {\n  draft.areResultsMaximized = areResultsMaximized;\n})).withHandling(immerCase(setDisclaimerVersionAccepted, (draft, version) => {\n  draft.disclaimerVersionAccepted = version;\n})).withHandling(immerCase(toggleDisclaimerShouldSuppress, draft => {\n  draft.disclaimerShouldSuppress = !draft.disclaimerShouldSuppress;\n})).withHandling(immerCase(setLocale, (draft, localeKey) => {\n  draft.localeKey = localeKey;\n}));","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/state/settings/settings.reducer.ts"],"names":["reducerWithInitialState","immerCase","setAutorun","setLogScale","setFormatNumbers","setResultsMaximized","toggleAutorun","toggleLogScale","toggleFormatNumbers","toggleResultsMaximized","setDisclaimerVersionAccepted","toggleDisclaimerShouldSuppress","setLocale","settingsDefaultState","settingsReducer","withHandling","draft","isAutorunEnabled","isLogScale","shouldFormatNumbers","areResultsMaximized","version","disclaimerVersionAccepted","disclaimerShouldSuppress","localeKey"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,yBAAxC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,SACEC,UADF,EAEEC,WAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,mBAPF,EAQEC,sBARF,EASEC,4BATF,EAUEC,8BAVF,EAWEC,SAXF,QAYO,oBAZP;AAcA,SAASC,oBAAT,QAAqC,kBAArC;AAEA,OAAO,MAAMC,eAAe,GAAGd,uBAAuB,CAACa,oBAAD,CAAvB,CAC5BE,YAD4B,CAE3Bd,SAAS,CAACK,aAAD,EAAiBU,KAAD,IAAW;AAClCA,EAAAA,KAAK,CAACC,gBAAN,GAAyB,CAACD,KAAK,CAACC,gBAAhC;AACD,CAFQ,CAFkB,EAO5BF,YAP4B,CAQ3Bd,SAAS,CAACM,cAAD,EAAkBS,KAAD,IAAW;AACnCA,EAAAA,KAAK,CAACE,UAAN,GAAmB,CAACF,KAAK,CAACE,UAA1B;AACD,CAFQ,CARkB,EAa5BH,YAb4B,CAc3Bd,SAAS,CAACO,mBAAD,EAAuBQ,KAAD,IAAW;AACxCA,EAAAA,KAAK,CAACG,mBAAN,GAA4B,CAACH,KAAK,CAACG,mBAAnC;AACD,CAFQ,CAdkB,EAmB5BJ,YAnB4B,CAoB3Bd,SAAS,CAACQ,sBAAD,EAA0BO,KAAD,IAAW;AAC3CA,EAAAA,KAAK,CAACI,mBAAN,GAA4B,CAACJ,KAAK,CAACI,mBAAnC;AACD,CAFQ,CApBkB,EAyB5BL,YAzB4B,CA0B3Bd,SAAS,CAACC,UAAD,EAAa,CAACc,KAAD,EAAQC,gBAAR,KAA6B;AACjDD,EAAAA,KAAK,CAACC,gBAAN,GAAyBA,gBAAzB;AACD,CAFQ,CA1BkB,EA+B5BF,YA/B4B,CAgC3Bd,SAAS,CAACE,WAAD,EAAc,CAACa,KAAD,EAAQE,UAAR,KAAuB;AAC5CF,EAAAA,KAAK,CAACE,UAAN,GAAmBA,UAAnB;AACD,CAFQ,CAhCkB,EAqC5BH,YArC4B,CAsC3Bd,SAAS,CAACG,gBAAD,EAAmB,CAACY,KAAD,EAAQG,mBAAR,KAAgC;AAC1DH,EAAAA,KAAK,CAACG,mBAAN,GAA4BA,mBAA5B;AACD,CAFQ,CAtCkB,EA2C5BJ,YA3C4B,CA4C3Bd,SAAS,CAACI,mBAAD,EAAsB,CAACW,KAAD,EAAQI,mBAAR,KAAgC;AAC7DJ,EAAAA,KAAK,CAACI,mBAAN,GAA4BA,mBAA5B;AACD,CAFQ,CA5CkB,EAiD5BL,YAjD4B,CAkD3Bd,SAAS,CAACS,4BAAD,EAA+B,CAACM,KAAD,EAAQK,OAAR,KAAoB;AAC1DL,EAAAA,KAAK,CAACM,yBAAN,GAAkCD,OAAlC;AACD,CAFQ,CAlDkB,EAuD5BN,YAvD4B,CAwD3Bd,SAAS,CAACU,8BAAD,EAAkCK,KAAD,IAAW;AACnDA,EAAAA,KAAK,CAACO,wBAAN,GAAiC,CAACP,KAAK,CAACO,wBAAxC;AACD,CAFQ,CAxDkB,EA6D5BR,YA7D4B,CA8D3Bd,SAAS,CAACW,SAAD,EAAY,CAACI,KAAD,EAAQQ,SAAR,KAAsB;AACzCR,EAAAA,KAAK,CAACQ,SAAN,GAAkBA,SAAlB;AACD,CAFQ,CA9DkB,CAAxB","sourcesContent":["import { reducerWithInitialState } from 'typescript-fsa-reducers'\n\nimport immerCase from '../util/fsaImmerReducer'\n\nimport {\n  setAutorun,\n  setLogScale,\n  setFormatNumbers,\n  setResultsMaximized,\n  toggleAutorun,\n  toggleLogScale,\n  toggleFormatNumbers,\n  toggleResultsMaximized,\n  setDisclaimerVersionAccepted,\n  toggleDisclaimerShouldSuppress,\n  setLocale,\n} from './settings.actions'\n\nimport { settingsDefaultState } from './settings.state'\n\nexport const settingsReducer = reducerWithInitialState(settingsDefaultState)\n  .withHandling(\n    immerCase(toggleAutorun, (draft) => {\n      draft.isAutorunEnabled = !draft.isAutorunEnabled\n    }),\n  )\n\n  .withHandling(\n    immerCase(toggleLogScale, (draft) => {\n      draft.isLogScale = !draft.isLogScale\n    }),\n  )\n\n  .withHandling(\n    immerCase(toggleFormatNumbers, (draft) => {\n      draft.shouldFormatNumbers = !draft.shouldFormatNumbers\n    }),\n  )\n\n  .withHandling(\n    immerCase(toggleResultsMaximized, (draft) => {\n      draft.areResultsMaximized = !draft.areResultsMaximized\n    }),\n  )\n\n  .withHandling(\n    immerCase(setAutorun, (draft, isAutorunEnabled) => {\n      draft.isAutorunEnabled = isAutorunEnabled\n    }),\n  )\n\n  .withHandling(\n    immerCase(setLogScale, (draft, isLogScale) => {\n      draft.isLogScale = isLogScale\n    }),\n  )\n\n  .withHandling(\n    immerCase(setFormatNumbers, (draft, shouldFormatNumbers) => {\n      draft.shouldFormatNumbers = shouldFormatNumbers\n    }),\n  )\n\n  .withHandling(\n    immerCase(setResultsMaximized, (draft, areResultsMaximized) => {\n      draft.areResultsMaximized = areResultsMaximized\n    }),\n  )\n\n  .withHandling(\n    immerCase(setDisclaimerVersionAccepted, (draft, version) => {\n      draft.disclaimerVersionAccepted = version\n    }),\n  )\n\n  .withHandling(\n    immerCase(toggleDisclaimerShouldSuppress, (draft) => {\n      draft.disclaimerShouldSuppress = !draft.disclaimerShouldSuppress\n    }),\n  )\n\n  .withHandling(\n    immerCase(setLocale, (draft, localeKey) => {\n      draft.localeKey = localeKey\n    }),\n  )\n"]},"metadata":{},"sourceType":"module"}