{"ast":null,"code":"import validateScenarioArray, { errors } from '../../.generated/latest/validateScenarioArray';\nimport { Convert } from '../../algorithms/types/Param.types';\nimport scenariosRaw from '../../assets/data/scenarios.json';\nimport { toInternal } from '../../algorithms/types/convert';\n\nfunction validate() {\n  const valid = validateScenarioArray(scenariosRaw);\n\n  if (!valid) {\n    throw errors;\n  }\n\n  return scenariosRaw.all;\n}\n\nconst scenarios = validate();\nexport const scenarioNames = scenarios.map(scenario => scenario.name);\nexport function getScenarioData(name) {\n  const scenarioFound = scenarios.find(s => s.name === name);\n\n  if (!scenarioFound) {\n    throw new Error(`Error: scenario \"${name}\" not found in JSON`);\n  } // FIXME: this should be changed, too hacky\n\n\n  const scenarioData = Convert.toScenarioData(JSON.stringify(scenarioFound));\n  return { ...scenarioData,\n    data: toInternal(scenarioData.data)\n  };\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/io/defaults/getScenarioData.ts"],"names":["validateScenarioArray","errors","Convert","scenariosRaw","toInternal","validate","valid","all","scenarios","scenarioNames","map","scenario","name","getScenarioData","scenarioFound","find","s","Error","scenarioData","toScenarioData","JSON","stringify","data"],"mappings":"AAAA,OAAOA,qBAAP,IAAgCC,MAAhC,QAA8C,+CAA9C;AAIA,SAASC,OAAT,QAAwB,oCAAxB;AAEA,OAAOC,YAAP,MAAyB,kCAAzB;AAEA,SAASC,UAAT,QAA2B,gCAA3B;;AAEA,SAASC,QAAT,GAAoB;AAClB,QAAMC,KAAK,GAAGN,qBAAqB,CAACG,YAAD,CAAnC;;AACA,MAAI,CAACG,KAAL,EAAY;AACV,UAAML,MAAN;AACD;;AAED,SAASE,YAAF,CAA6CI,GAApD;AACD;;AAED,MAAMC,SAAS,GAAGH,QAAQ,EAA1B;AACA,OAAO,MAAMI,aAAa,GAAGD,SAAS,CAACE,GAAV,CAAeC,QAAD,IAAcA,QAAQ,CAACC,IAArC,CAAtB;AAEP,OAAO,SAASC,eAAT,CAAyBD,IAAzB,EAAqD;AAC1D,QAAME,aAAa,GAAGN,SAAS,CAACO,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACJ,IAAF,KAAWA,IAAjC,CAAtB;;AACA,MAAI,CAACE,aAAL,EAAoB;AAClB,UAAM,IAAIG,KAAJ,CAAW,oBAAmBL,IAAK,qBAAnC,CAAN;AACD,GAJyD,CAM1D;;;AACA,QAAMM,YAAY,GAAGhB,OAAO,CAACiB,cAAR,CAAuBC,IAAI,CAACC,SAAL,CAAeP,aAAf,CAAvB,CAArB;AACA,SAAO,EAAE,GAAGI,YAAL;AAAmBI,IAAAA,IAAI,EAAElB,UAAU,CAACc,YAAY,CAACI,IAAd;AAAnC,GAAP;AACD","sourcesContent":["import validateScenarioArray, { errors } from '../../.generated/latest/validateScenarioArray'\n\nimport type { ScenarioArray, ScenarioData } from '../../algorithms/types/Param.types'\n\nimport { Convert } from '../../algorithms/types/Param.types'\n\nimport scenariosRaw from '../../assets/data/scenarios.json'\n\nimport { toInternal } from '../../algorithms/types/convert'\n\nfunction validate() {\n  const valid = validateScenarioArray(scenariosRaw)\n  if (!valid) {\n    throw errors\n  }\n\n  return ((scenariosRaw as unknown) as ScenarioArray).all\n}\n\nconst scenarios = validate()\nexport const scenarioNames = scenarios.map((scenario) => scenario.name)\n\nexport function getScenarioData(name: string): ScenarioData {\n  const scenarioFound = scenarios.find((s) => s.name === name)\n  if (!scenarioFound) {\n    throw new Error(`Error: scenario \"${name}\" not found in JSON`)\n  }\n\n  // FIXME: this should be changed, too hacky\n  const scenarioData = Convert.toScenarioData(JSON.stringify(scenarioFound))\n  return { ...scenarioData, data: toInternal(scenarioData.data) }\n}\n"]},"metadata":{},"sourceType":"module"}