{"ast":null,"code":"\"use strict\";\n\nvar formats = require(\"ajv/lib/compile/formats\")();\n\nvar ucs2length = require(\"ajv/lib/compile/ucs2length\");\n\nvar validate = function () {\n  var refVal = [];\n\n  var refVal1 = function () {\n    var refVal = [];\n\n    var refVal1 = function () {\n      var refVal = [];\n      var refVal1 = {\n        $schema: \"http://json-schema.org/draft-07/schema\",\n        $id: \"IntegerNonNegative\",\n        title: \"IntegerNonNegative\",\n        type: \"integer\",\n        multipleOf: 1,\n        minimum: 0\n      };\n      refVal[1] = refVal1;\n      return function validate(data, dataPath, parentData, parentDataProperty, rootData) {\n        \"use strict\";\n\n        var vErrors = null;\n        var errors = 0;\n\n        if (data && typeof data === \"object\" && !Array.isArray(data)) {\n          var errs__0 = errors;\n          var valid1 = true;\n\n          for (var key0 in data) {\n            var isAdditional0 = !(false || key0 == \"time\" || key0 == \"cases\" || key0 == \"deaths\" || key0 == \"hospitalized\" || key0 == \"icu\" || key0 == \"recovered\");\n\n            if (isAdditional0) {\n              valid1 = false;\n              var err = {\n                keyword: \"additionalProperties\",\n                dataPath: (dataPath || \"\") + \"\",\n                schemaPath: \"#/additionalProperties\",\n                params: {\n                  additionalProperty: \"\" + key0 + \"\"\n                },\n                message: \"should NOT have additional properties\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            }\n          }\n\n          var data1 = data.time;\n\n          if (data1 === undefined) {\n            valid1 = false;\n            var err = {\n              keyword: \"required\",\n              dataPath: (dataPath || \"\") + \"\",\n              schemaPath: \"#/required\",\n              params: {\n                missingProperty: \"time\"\n              },\n              message: \"should have required property 'time'\"\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          } else {\n            var errs_1 = errors;\n\n            if (typeof data1 === \"string\") {\n              if (!formats.date.test(data1)) {\n                var err = {\n                  keyword: \"format\",\n                  dataPath: (dataPath || \"\") + \"/time\",\n                  schemaPath: \"#/properties/time/format\",\n                  params: {\n                    format: \"date\"\n                  },\n                  message: 'should match format \"date\"'\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n            } else {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/time\",\n                schemaPath: \"#/properties/time/type\",\n                params: {\n                  type: \"string\"\n                },\n                message: \"should be string\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            }\n\n            var valid1 = errors === errs_1;\n          }\n\n          var data1 = data.cases;\n\n          if (data1 === undefined) {\n            valid1 = false;\n            var err = {\n              keyword: \"required\",\n              dataPath: (dataPath || \"\") + \"\",\n              schemaPath: \"#/required\",\n              params: {\n                missingProperty: \"cases\"\n              },\n              message: \"should have required property 'cases'\"\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          } else {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/cases\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\"\n                },\n                message: \"should be integer\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            }\n\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/cases\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false\n                  },\n                  message: \"should be >= 0\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var division3;\n\n              if (division3 = data1 / 1, division3 !== parseInt(division3)) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/cases\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1\n                  },\n                  message: \"should be multiple of 1\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n            }\n\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n\n            if (!valid1) {\n              var errs_2 = errors;\n\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/cases\",\n                  schemaPath: \"#/properties/cases/anyOf/1/type\",\n                  params: {\n                    type: \"null\"\n                  },\n                  message: \"should be null\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/cases\",\n                schemaPath: \"#/properties/cases/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;else vErrors = null;\n              }\n            }\n\n            var valid1 = errors === errs_1;\n          }\n\n          var data1 = data.deaths;\n\n          if (data1 !== undefined) {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/deaths\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\"\n                },\n                message: \"should be integer\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            }\n\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/deaths\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false\n                  },\n                  message: \"should be >= 0\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var division3;\n\n              if (division3 = data1 / 1, division3 !== parseInt(division3)) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/deaths\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1\n                  },\n                  message: \"should be multiple of 1\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n            }\n\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n\n            if (!valid1) {\n              var errs_2 = errors;\n\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/deaths\",\n                  schemaPath: \"#/properties/deaths/anyOf/1/type\",\n                  params: {\n                    type: \"null\"\n                  },\n                  message: \"should be null\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/deaths\",\n                schemaPath: \"#/properties/deaths/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;else vErrors = null;\n              }\n            }\n\n            var valid1 = errors === errs_1;\n          }\n\n          var data1 = data.hospitalized;\n\n          if (data1 !== undefined) {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/hospitalized\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\"\n                },\n                message: \"should be integer\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            }\n\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/hospitalized\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false\n                  },\n                  message: \"should be >= 0\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var division3;\n\n              if (division3 = data1 / 1, division3 !== parseInt(division3)) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/hospitalized\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1\n                  },\n                  message: \"should be multiple of 1\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n            }\n\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n\n            if (!valid1) {\n              var errs_2 = errors;\n\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/hospitalized\",\n                  schemaPath: \"#/properties/hospitalized/anyOf/1/type\",\n                  params: {\n                    type: \"null\"\n                  },\n                  message: \"should be null\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/hospitalized\",\n                schemaPath: \"#/properties/hospitalized/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;else vErrors = null;\n              }\n            }\n\n            var valid1 = errors === errs_1;\n          }\n\n          var data1 = data.icu;\n\n          if (data1 !== undefined) {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/icu\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\"\n                },\n                message: \"should be integer\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            }\n\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/icu\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false\n                  },\n                  message: \"should be >= 0\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var division3;\n\n              if (division3 = data1 / 1, division3 !== parseInt(division3)) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/icu\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1\n                  },\n                  message: \"should be multiple of 1\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n            }\n\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n\n            if (!valid1) {\n              var errs_2 = errors;\n\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/icu\",\n                  schemaPath: \"#/properties/icu/anyOf/1/type\",\n                  params: {\n                    type: \"null\"\n                  },\n                  message: \"should be null\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/icu\",\n                schemaPath: \"#/properties/icu/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;else vErrors = null;\n              }\n            }\n\n            var valid1 = errors === errs_1;\n          }\n\n          var data1 = data.recovered;\n\n          if (data1 !== undefined) {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/recovered\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\"\n                },\n                message: \"should be integer\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            }\n\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/recovered\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false\n                  },\n                  message: \"should be >= 0\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var division3;\n\n              if (division3 = data1 / 1, division3 !== parseInt(division3)) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/recovered\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1\n                  },\n                  message: \"should be multiple of 1\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n            }\n\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n\n            if (!valid1) {\n              var errs_2 = errors;\n\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/recovered\",\n                  schemaPath: \"#/properties/recovered/anyOf/1/type\",\n                  params: {\n                    type: \"null\"\n                  },\n                  message: \"should be null\"\n                };\n                if (vErrors === null) vErrors = [err];else vErrors.push(err);\n                errors++;\n              }\n\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/recovered\",\n                schemaPath: \"#/properties/recovered/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;else vErrors = null;\n              }\n            }\n\n            var valid1 = errors === errs_1;\n          }\n        } else {\n          var err = {\n            keyword: \"type\",\n            dataPath: (dataPath || \"\") + \"\",\n            schemaPath: \"#/type\",\n            params: {\n              type: \"object\"\n            },\n            message: \"should be object\"\n          };\n          if (vErrors === null) vErrors = [err];else vErrors.push(err);\n          errors++;\n        }\n\n        validate.errors = vErrors;\n        return errors === 0;\n      };\n    }();\n\n    refVal1.schema = {\n      $schema: \"http://json-schema.org/draft-07/schema\",\n      $id: \"CaseCountsDatum\",\n      title: \"CaseCountsDatum\",\n      type: \"object\",\n      additionalProperties: false,\n      required: [\"time\", \"cases\"],\n      properties: {\n        time: {\n          type: \"string\",\n          format: \"date\"\n        },\n        cases: {\n          anyOf: [{\n            $ref: \"IntegerNonNegative#\"\n          }, {\n            type: \"null\"\n          }]\n        },\n        deaths: {\n          anyOf: [{\n            $ref: \"IntegerNonNegative#\"\n          }, {\n            type: \"null\"\n          }]\n        },\n        hospitalized: {\n          anyOf: [{\n            $ref: \"IntegerNonNegative#\"\n          }, {\n            type: \"null\"\n          }]\n        },\n        icu: {\n          anyOf: [{\n            $ref: \"IntegerNonNegative#\"\n          }, {\n            type: \"null\"\n          }]\n        },\n        recovered: {\n          anyOf: [{\n            $ref: \"IntegerNonNegative#\"\n          }, {\n            type: \"null\"\n          }]\n        }\n      }\n    };\n    refVal1.errors = null;\n    refVal[1] = refVal1;\n    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {\n      \"use strict\";\n\n      var vErrors = null;\n      var errors = 0;\n      if (rootData === undefined) rootData = data;\n\n      if (data && typeof data === \"object\" && !Array.isArray(data)) {\n        var errs__0 = errors;\n        var valid1 = true;\n\n        for (var key0 in data) {\n          var isAdditional0 = !(false || key0 == \"name\" || key0 == \"data\");\n\n          if (isAdditional0) {\n            valid1 = false;\n            var err = {\n              keyword: \"additionalProperties\",\n              dataPath: (dataPath || \"\") + \"\",\n              schemaPath: \"#/additionalProperties\",\n              params: {\n                additionalProperty: \"\" + key0 + \"\"\n              },\n              message: \"should NOT have additional properties\"\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n        }\n\n        var data1 = data.name;\n\n        if (data1 === undefined) {\n          valid1 = false;\n          var err = {\n            keyword: \"required\",\n            dataPath: (dataPath || \"\") + \"\",\n            schemaPath: \"#/required\",\n            params: {\n              missingProperty: \"name\"\n            },\n            message: \"should have required property 'name'\"\n          };\n          if (vErrors === null) vErrors = [err];else vErrors.push(err);\n          errors++;\n        } else {\n          var errs_1 = errors;\n\n          if (typeof data1 === \"string\") {\n            if (ucs2length(data1) < 1) {\n              var err = {\n                keyword: \"minLength\",\n                dataPath: (dataPath || \"\") + \"/name\",\n                schemaPath: \"#/properties/name/minLength\",\n                params: {\n                  limit: 1\n                },\n                message: \"should NOT be shorter than 1 characters\"\n              };\n              if (vErrors === null) vErrors = [err];else vErrors.push(err);\n              errors++;\n            }\n          } else {\n            var err = {\n              keyword: \"type\",\n              dataPath: (dataPath || \"\") + \"/name\",\n              schemaPath: \"#/properties/name/type\",\n              params: {\n                type: \"string\"\n              },\n              message: \"should be string\"\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        var data1 = data.data;\n\n        if (data1 === undefined) {\n          valid1 = false;\n          var err = {\n            keyword: \"required\",\n            dataPath: (dataPath || \"\") + \"\",\n            schemaPath: \"#/required\",\n            params: {\n              missingProperty: \"data\"\n            },\n            message: \"should have required property 'data'\"\n          };\n          if (vErrors === null) vErrors = [err];else vErrors.push(err);\n          errors++;\n        } else {\n          var errs_1 = errors;\n\n          if (Array.isArray(data1)) {\n            var errs__1 = errors;\n            var valid1;\n\n            for (var i1 = 0; i1 < data1.length; i1++) {\n              var errs_2 = errors;\n\n              if (!refVal1(data1[i1], (dataPath || \"\") + \"/data/\" + i1, data1, i1, rootData)) {\n                if (vErrors === null) vErrors = refVal1.errors;else vErrors = vErrors.concat(refVal1.errors);\n                errors = vErrors.length;\n              }\n\n              var valid2 = errors === errs_2;\n            }\n          } else {\n            var err = {\n              keyword: \"type\",\n              dataPath: (dataPath || \"\") + \"/data\",\n              schemaPath: \"#/properties/data/type\",\n              params: {\n                type: \"array\"\n              },\n              message: \"should be array\"\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n      } else {\n        var err = {\n          keyword: \"type\",\n          dataPath: (dataPath || \"\") + \"\",\n          schemaPath: \"#/type\",\n          params: {\n            type: \"object\"\n          },\n          message: \"should be object\"\n        };\n        if (vErrors === null) vErrors = [err];else vErrors.push(err);\n        errors++;\n      }\n\n      validate.errors = vErrors;\n      return errors === 0;\n    };\n  }();\n\n  refVal1.schema = {\n    $schema: \"http://json-schema.org/draft-07/schema\",\n    $id: \"CaseCountsData\",\n    title: \"CaseCountsData\",\n    type: \"object\",\n    additionalProperties: false,\n    required: [\"name\", \"data\"],\n    properties: {\n      name: {\n        type: \"string\",\n        minLength: 1\n      },\n      data: {\n        type: \"array\",\n        items: {\n          $ref: \"CaseCountsDatum#\"\n        }\n      }\n    }\n  };\n  refVal1.errors = null;\n  refVal[1] = refVal1;\n  return function validate(data, dataPath, parentData, parentDataProperty, rootData) {\n    \"use strict\";\n\n    var vErrors = null;\n    var errors = 0;\n    if (rootData === undefined) rootData = data;\n\n    if (data && typeof data === \"object\" && !Array.isArray(data)) {\n      var errs__0 = errors;\n      var valid1 = true;\n\n      for (var key0 in data) {\n        var isAdditional0 = !(false || key0 == \"all\");\n\n        if (isAdditional0) {\n          valid1 = false;\n          var err = {\n            keyword: \"additionalProperties\",\n            dataPath: (dataPath || \"\") + \"\",\n            schemaPath: \"#/additionalProperties\",\n            params: {\n              additionalProperty: \"\" + key0 + \"\"\n            },\n            message: \"should NOT have additional properties\"\n          };\n          if (vErrors === null) vErrors = [err];else vErrors.push(err);\n          errors++;\n        }\n      }\n\n      var data1 = data.all;\n\n      if (data1 === undefined) {\n        valid1 = false;\n        var err = {\n          keyword: \"required\",\n          dataPath: (dataPath || \"\") + \"\",\n          schemaPath: \"#/required\",\n          params: {\n            missingProperty: \"all\"\n          },\n          message: \"should have required property 'all'\"\n        };\n        if (vErrors === null) vErrors = [err];else vErrors.push(err);\n        errors++;\n      } else {\n        var errs_1 = errors;\n\n        if (Array.isArray(data1)) {\n          var errs__1 = errors;\n          var valid1;\n\n          for (var i1 = 0; i1 < data1.length; i1++) {\n            var errs_2 = errors;\n\n            if (!refVal1(data1[i1], (dataPath || \"\") + \"/all/\" + i1, data1, i1, rootData)) {\n              if (vErrors === null) vErrors = refVal1.errors;else vErrors = vErrors.concat(refVal1.errors);\n              errors = vErrors.length;\n            }\n\n            var valid2 = errors === errs_2;\n          }\n        } else {\n          var err = {\n            keyword: \"type\",\n            dataPath: (dataPath || \"\") + \"/all\",\n            schemaPath: \"#/properties/all/type\",\n            params: {\n              type: \"array\"\n            },\n            message: \"should be array\"\n          };\n          if (vErrors === null) vErrors = [err];else vErrors.push(err);\n          errors++;\n        }\n\n        var valid1 = errors === errs_1;\n      }\n    } else {\n      var err = {\n        keyword: \"type\",\n        dataPath: (dataPath || \"\") + \"\",\n        schemaPath: \"#/type\",\n        params: {\n          type: \"object\"\n        },\n        message: \"should be object\"\n      };\n      if (vErrors === null) vErrors = [err];else vErrors.push(err);\n      errors++;\n    }\n\n    validate.errors = vErrors;\n    return errors === 0;\n  };\n}();\n\nvalidate.schema = {\n  $schema: \"http://json-schema.org/draft-07/schema\",\n  $id: \"CaseCountsArray\",\n  title: \"CaseCountsArray\",\n  type: \"object\",\n  additionalProperties: false,\n  required: [\"all\"],\n  properties: {\n    all: {\n      type: \"array\",\n      items: {\n        $ref: \"CaseCountsData#\"\n      }\n    }\n  }\n};\nvalidate.errors = null;\nmodule.exports = validate;","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/.generated/latest/validateCaseCountsArray.js"],"names":["formats","require","ucs2length","validate","refVal","refVal1","$schema","$id","title","type","multipleOf","minimum","data","dataPath","parentData","parentDataProperty","rootData","vErrors","errors","Array","isArray","errs__0","valid1","key0","isAdditional0","err","keyword","schemaPath","params","additionalProperty","message","push","data1","time","undefined","missingProperty","errs_1","date","test","format","cases","errs__1","errs_2","errs_3","comparison","limit","exclusive","division3","parseInt","valid3","valid2","length","deaths","hospitalized","icu","recovered","schema","additionalProperties","required","properties","anyOf","$ref","name","i1","concat","minLength","items","all","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar formats = require(\"ajv/lib/compile/formats\")();\nvar ucs2length = require(\"ajv/lib/compile/ucs2length\");\nvar validate = (function () {\n  var refVal = [];\n  var refVal1 = (function () {\n    var refVal = [];\n    var refVal1 = (function () {\n      var refVal = [];\n      var refVal1 = {\n        $schema: \"http://json-schema.org/draft-07/schema\",\n        $id: \"IntegerNonNegative\",\n        title: \"IntegerNonNegative\",\n        type: \"integer\",\n        multipleOf: 1,\n        minimum: 0,\n      };\n      refVal[1] = refVal1;\n      return function validate(\n        data,\n        dataPath,\n        parentData,\n        parentDataProperty,\n        rootData\n      ) {\n        \"use strict\" /*# sourceURL=CaseCountsDatum */;\n        var vErrors = null;\n        var errors = 0;\n        if (data && typeof data === \"object\" && !Array.isArray(data)) {\n          var errs__0 = errors;\n          var valid1 = true;\n          for (var key0 in data) {\n            var isAdditional0 = !(\n              false ||\n              key0 == \"time\" ||\n              key0 == \"cases\" ||\n              key0 == \"deaths\" ||\n              key0 == \"hospitalized\" ||\n              key0 == \"icu\" ||\n              key0 == \"recovered\"\n            );\n            if (isAdditional0) {\n              valid1 = false;\n              var err = {\n                keyword: \"additionalProperties\",\n                dataPath: (dataPath || \"\") + \"\",\n                schemaPath: \"#/additionalProperties\",\n                params: {\n                  additionalProperty: \"\" + key0 + \"\",\n                },\n                message: \"should NOT have additional properties\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            }\n          }\n          var data1 = data.time;\n          if (data1 === undefined) {\n            valid1 = false;\n            var err = {\n              keyword: \"required\",\n              dataPath: (dataPath || \"\") + \"\",\n              schemaPath: \"#/required\",\n              params: {\n                missingProperty: \"time\",\n              },\n              message: \"should have required property 'time'\",\n            };\n            if (vErrors === null) vErrors = [err];\n            else vErrors.push(err);\n            errors++;\n          } else {\n            var errs_1 = errors;\n            if (typeof data1 === \"string\") {\n              if (!formats.date.test(data1)) {\n                var err = {\n                  keyword: \"format\",\n                  dataPath: (dataPath || \"\") + \"/time\",\n                  schemaPath: \"#/properties/time/format\",\n                  params: {\n                    format: \"date\",\n                  },\n                  message: 'should match format \"date\"',\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n            } else {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/time\",\n                schemaPath: \"#/properties/time/type\",\n                params: {\n                  type: \"string\",\n                },\n                message: \"should be string\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            }\n            var valid1 = errors === errs_1;\n          }\n          var data1 = data.cases;\n          if (data1 === undefined) {\n            valid1 = false;\n            var err = {\n              keyword: \"required\",\n              dataPath: (dataPath || \"\") + \"\",\n              schemaPath: \"#/required\",\n              params: {\n                missingProperty: \"cases\",\n              },\n              message: \"should have required property 'cases'\",\n            };\n            if (vErrors === null) vErrors = [err];\n            else vErrors.push(err);\n            errors++;\n          } else {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/cases\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\",\n                },\n                message: \"should be integer\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            }\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/cases\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false,\n                  },\n                  message: \"should be >= 0\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var division3;\n              if (\n                ((division3 = data1 / 1), division3 !== parseInt(division3))\n              ) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/cases\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1,\n                  },\n                  message: \"should be multiple of 1\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n            }\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n            if (!valid1) {\n              var errs_2 = errors;\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/cases\",\n                  schemaPath: \"#/properties/cases/anyOf/1/type\",\n                  params: {\n                    type: \"null\",\n                  },\n                  message: \"should be null\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/cases\",\n                schemaPath: \"#/properties/cases/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;\n                else vErrors = null;\n              }\n            }\n            var valid1 = errors === errs_1;\n          }\n          var data1 = data.deaths;\n          if (data1 !== undefined) {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/deaths\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\",\n                },\n                message: \"should be integer\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            }\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/deaths\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false,\n                  },\n                  message: \"should be >= 0\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var division3;\n              if (\n                ((division3 = data1 / 1), division3 !== parseInt(division3))\n              ) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/deaths\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1,\n                  },\n                  message: \"should be multiple of 1\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n            }\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n            if (!valid1) {\n              var errs_2 = errors;\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/deaths\",\n                  schemaPath: \"#/properties/deaths/anyOf/1/type\",\n                  params: {\n                    type: \"null\",\n                  },\n                  message: \"should be null\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/deaths\",\n                schemaPath: \"#/properties/deaths/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;\n                else vErrors = null;\n              }\n            }\n            var valid1 = errors === errs_1;\n          }\n          var data1 = data.hospitalized;\n          if (data1 !== undefined) {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/hospitalized\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\",\n                },\n                message: \"should be integer\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            }\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/hospitalized\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false,\n                  },\n                  message: \"should be >= 0\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var division3;\n              if (\n                ((division3 = data1 / 1), division3 !== parseInt(division3))\n              ) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/hospitalized\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1,\n                  },\n                  message: \"should be multiple of 1\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n            }\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n            if (!valid1) {\n              var errs_2 = errors;\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/hospitalized\",\n                  schemaPath: \"#/properties/hospitalized/anyOf/1/type\",\n                  params: {\n                    type: \"null\",\n                  },\n                  message: \"should be null\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/hospitalized\",\n                schemaPath: \"#/properties/hospitalized/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;\n                else vErrors = null;\n              }\n            }\n            var valid1 = errors === errs_1;\n          }\n          var data1 = data.icu;\n          if (data1 !== undefined) {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/icu\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\",\n                },\n                message: \"should be integer\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            }\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/icu\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false,\n                  },\n                  message: \"should be >= 0\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var division3;\n              if (\n                ((division3 = data1 / 1), division3 !== parseInt(division3))\n              ) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/icu\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1,\n                  },\n                  message: \"should be multiple of 1\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n            }\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n            if (!valid1) {\n              var errs_2 = errors;\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/icu\",\n                  schemaPath: \"#/properties/icu/anyOf/1/type\",\n                  params: {\n                    type: \"null\",\n                  },\n                  message: \"should be null\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/icu\",\n                schemaPath: \"#/properties/icu/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;\n                else vErrors = null;\n              }\n            }\n            var valid1 = errors === errs_1;\n          }\n          var data1 = data.recovered;\n          if (data1 !== undefined) {\n            var errs_1 = errors;\n            var errs__1 = errors;\n            var valid1 = false;\n            var errs_2 = errors;\n            var errs_3 = errors;\n            if (typeof data1 !== \"number\" || data1 % 1 || data1 !== data1) {\n              var err = {\n                keyword: \"type\",\n                dataPath: (dataPath || \"\") + \"/recovered\",\n                schemaPath: \"IntegerNonNegative#/type\",\n                params: {\n                  type: \"integer\",\n                },\n                message: \"should be integer\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            }\n            if (typeof data1 === \"number\") {\n              if (data1 < 0 || data1 !== data1) {\n                var err = {\n                  keyword: \"minimum\",\n                  dataPath: (dataPath || \"\") + \"/recovered\",\n                  schemaPath: \"IntegerNonNegative#/minimum\",\n                  params: {\n                    comparison: \">=\",\n                    limit: 0,\n                    exclusive: false,\n                  },\n                  message: \"should be >= 0\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var division3;\n              if (\n                ((division3 = data1 / 1), division3 !== parseInt(division3))\n              ) {\n                var err = {\n                  keyword: \"multipleOf\",\n                  dataPath: (dataPath || \"\") + \"/recovered\",\n                  schemaPath: \"IntegerNonNegative#/multipleOf\",\n                  params: {\n                    multipleOf: 1,\n                  },\n                  message: \"should be multiple of 1\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n            }\n            var valid3 = errors === errs_3;\n            var valid2 = errors === errs_2;\n            valid1 = valid1 || valid2;\n            if (!valid1) {\n              var errs_2 = errors;\n              if (data1 !== null) {\n                var err = {\n                  keyword: \"type\",\n                  dataPath: (dataPath || \"\") + \"/recovered\",\n                  schemaPath: \"#/properties/recovered/anyOf/1/type\",\n                  params: {\n                    type: \"null\",\n                  },\n                  message: \"should be null\",\n                };\n                if (vErrors === null) vErrors = [err];\n                else vErrors.push(err);\n                errors++;\n              }\n              var valid2 = errors === errs_2;\n              valid1 = valid1 || valid2;\n            }\n            if (!valid1) {\n              var err = {\n                keyword: \"anyOf\",\n                dataPath: (dataPath || \"\") + \"/recovered\",\n                schemaPath: \"#/properties/recovered/anyOf\",\n                params: {},\n                message: \"should match some schema in anyOf\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            } else {\n              errors = errs__1;\n              if (vErrors !== null) {\n                if (errs__1) vErrors.length = errs__1;\n                else vErrors = null;\n              }\n            }\n            var valid1 = errors === errs_1;\n          }\n        } else {\n          var err = {\n            keyword: \"type\",\n            dataPath: (dataPath || \"\") + \"\",\n            schemaPath: \"#/type\",\n            params: {\n              type: \"object\",\n            },\n            message: \"should be object\",\n          };\n          if (vErrors === null) vErrors = [err];\n          else vErrors.push(err);\n          errors++;\n        }\n        validate.errors = vErrors;\n        return errors === 0;\n      };\n    })();\n    refVal1.schema = {\n      $schema: \"http://json-schema.org/draft-07/schema\",\n      $id: \"CaseCountsDatum\",\n      title: \"CaseCountsDatum\",\n      type: \"object\",\n      additionalProperties: false,\n      required: [\"time\", \"cases\"],\n      properties: {\n        time: {\n          type: \"string\",\n          format: \"date\",\n        },\n        cases: {\n          anyOf: [\n            {\n              $ref: \"IntegerNonNegative#\",\n            },\n            {\n              type: \"null\",\n            },\n          ],\n        },\n        deaths: {\n          anyOf: [\n            {\n              $ref: \"IntegerNonNegative#\",\n            },\n            {\n              type: \"null\",\n            },\n          ],\n        },\n        hospitalized: {\n          anyOf: [\n            {\n              $ref: \"IntegerNonNegative#\",\n            },\n            {\n              type: \"null\",\n            },\n          ],\n        },\n        icu: {\n          anyOf: [\n            {\n              $ref: \"IntegerNonNegative#\",\n            },\n            {\n              type: \"null\",\n            },\n          ],\n        },\n        recovered: {\n          anyOf: [\n            {\n              $ref: \"IntegerNonNegative#\",\n            },\n            {\n              type: \"null\",\n            },\n          ],\n        },\n      },\n    };\n    refVal1.errors = null;\n    refVal[1] = refVal1;\n    return function validate(\n      data,\n      dataPath,\n      parentData,\n      parentDataProperty,\n      rootData\n    ) {\n      \"use strict\" /*# sourceURL=CaseCountsData */;\n      var vErrors = null;\n      var errors = 0;\n      if (rootData === undefined) rootData = data;\n      if (data && typeof data === \"object\" && !Array.isArray(data)) {\n        var errs__0 = errors;\n        var valid1 = true;\n        for (var key0 in data) {\n          var isAdditional0 = !(false || key0 == \"name\" || key0 == \"data\");\n          if (isAdditional0) {\n            valid1 = false;\n            var err = {\n              keyword: \"additionalProperties\",\n              dataPath: (dataPath || \"\") + \"\",\n              schemaPath: \"#/additionalProperties\",\n              params: {\n                additionalProperty: \"\" + key0 + \"\",\n              },\n              message: \"should NOT have additional properties\",\n            };\n            if (vErrors === null) vErrors = [err];\n            else vErrors.push(err);\n            errors++;\n          }\n        }\n        var data1 = data.name;\n        if (data1 === undefined) {\n          valid1 = false;\n          var err = {\n            keyword: \"required\",\n            dataPath: (dataPath || \"\") + \"\",\n            schemaPath: \"#/required\",\n            params: {\n              missingProperty: \"name\",\n            },\n            message: \"should have required property 'name'\",\n          };\n          if (vErrors === null) vErrors = [err];\n          else vErrors.push(err);\n          errors++;\n        } else {\n          var errs_1 = errors;\n          if (typeof data1 === \"string\") {\n            if (ucs2length(data1) < 1) {\n              var err = {\n                keyword: \"minLength\",\n                dataPath: (dataPath || \"\") + \"/name\",\n                schemaPath: \"#/properties/name/minLength\",\n                params: {\n                  limit: 1,\n                },\n                message: \"should NOT be shorter than 1 characters\",\n              };\n              if (vErrors === null) vErrors = [err];\n              else vErrors.push(err);\n              errors++;\n            }\n          } else {\n            var err = {\n              keyword: \"type\",\n              dataPath: (dataPath || \"\") + \"/name\",\n              schemaPath: \"#/properties/name/type\",\n              params: {\n                type: \"string\",\n              },\n              message: \"should be string\",\n            };\n            if (vErrors === null) vErrors = [err];\n            else vErrors.push(err);\n            errors++;\n          }\n          var valid1 = errors === errs_1;\n        }\n        var data1 = data.data;\n        if (data1 === undefined) {\n          valid1 = false;\n          var err = {\n            keyword: \"required\",\n            dataPath: (dataPath || \"\") + \"\",\n            schemaPath: \"#/required\",\n            params: {\n              missingProperty: \"data\",\n            },\n            message: \"should have required property 'data'\",\n          };\n          if (vErrors === null) vErrors = [err];\n          else vErrors.push(err);\n          errors++;\n        } else {\n          var errs_1 = errors;\n          if (Array.isArray(data1)) {\n            var errs__1 = errors;\n            var valid1;\n            for (var i1 = 0; i1 < data1.length; i1++) {\n              var errs_2 = errors;\n              if (\n                !refVal1(\n                  data1[i1],\n                  (dataPath || \"\") + \"/data/\" + i1,\n                  data1,\n                  i1,\n                  rootData\n                )\n              ) {\n                if (vErrors === null) vErrors = refVal1.errors;\n                else vErrors = vErrors.concat(refVal1.errors);\n                errors = vErrors.length;\n              }\n              var valid2 = errors === errs_2;\n            }\n          } else {\n            var err = {\n              keyword: \"type\",\n              dataPath: (dataPath || \"\") + \"/data\",\n              schemaPath: \"#/properties/data/type\",\n              params: {\n                type: \"array\",\n              },\n              message: \"should be array\",\n            };\n            if (vErrors === null) vErrors = [err];\n            else vErrors.push(err);\n            errors++;\n          }\n          var valid1 = errors === errs_1;\n        }\n      } else {\n        var err = {\n          keyword: \"type\",\n          dataPath: (dataPath || \"\") + \"\",\n          schemaPath: \"#/type\",\n          params: {\n            type: \"object\",\n          },\n          message: \"should be object\",\n        };\n        if (vErrors === null) vErrors = [err];\n        else vErrors.push(err);\n        errors++;\n      }\n      validate.errors = vErrors;\n      return errors === 0;\n    };\n  })();\n  refVal1.schema = {\n    $schema: \"http://json-schema.org/draft-07/schema\",\n    $id: \"CaseCountsData\",\n    title: \"CaseCountsData\",\n    type: \"object\",\n    additionalProperties: false,\n    required: [\"name\", \"data\"],\n    properties: {\n      name: {\n        type: \"string\",\n        minLength: 1,\n      },\n      data: {\n        type: \"array\",\n        items: {\n          $ref: \"CaseCountsDatum#\",\n        },\n      },\n    },\n  };\n  refVal1.errors = null;\n  refVal[1] = refVal1;\n  return function validate(\n    data,\n    dataPath,\n    parentData,\n    parentDataProperty,\n    rootData\n  ) {\n    \"use strict\" /*# sourceURL=CaseCountsArray */;\n    var vErrors = null;\n    var errors = 0;\n    if (rootData === undefined) rootData = data;\n    if (data && typeof data === \"object\" && !Array.isArray(data)) {\n      var errs__0 = errors;\n      var valid1 = true;\n      for (var key0 in data) {\n        var isAdditional0 = !(false || key0 == \"all\");\n        if (isAdditional0) {\n          valid1 = false;\n          var err = {\n            keyword: \"additionalProperties\",\n            dataPath: (dataPath || \"\") + \"\",\n            schemaPath: \"#/additionalProperties\",\n            params: {\n              additionalProperty: \"\" + key0 + \"\",\n            },\n            message: \"should NOT have additional properties\",\n          };\n          if (vErrors === null) vErrors = [err];\n          else vErrors.push(err);\n          errors++;\n        }\n      }\n      var data1 = data.all;\n      if (data1 === undefined) {\n        valid1 = false;\n        var err = {\n          keyword: \"required\",\n          dataPath: (dataPath || \"\") + \"\",\n          schemaPath: \"#/required\",\n          params: {\n            missingProperty: \"all\",\n          },\n          message: \"should have required property 'all'\",\n        };\n        if (vErrors === null) vErrors = [err];\n        else vErrors.push(err);\n        errors++;\n      } else {\n        var errs_1 = errors;\n        if (Array.isArray(data1)) {\n          var errs__1 = errors;\n          var valid1;\n          for (var i1 = 0; i1 < data1.length; i1++) {\n            var errs_2 = errors;\n            if (\n              !refVal1(\n                data1[i1],\n                (dataPath || \"\") + \"/all/\" + i1,\n                data1,\n                i1,\n                rootData\n              )\n            ) {\n              if (vErrors === null) vErrors = refVal1.errors;\n              else vErrors = vErrors.concat(refVal1.errors);\n              errors = vErrors.length;\n            }\n            var valid2 = errors === errs_2;\n          }\n        } else {\n          var err = {\n            keyword: \"type\",\n            dataPath: (dataPath || \"\") + \"/all\",\n            schemaPath: \"#/properties/all/type\",\n            params: {\n              type: \"array\",\n            },\n            message: \"should be array\",\n          };\n          if (vErrors === null) vErrors = [err];\n          else vErrors.push(err);\n          errors++;\n        }\n        var valid1 = errors === errs_1;\n      }\n    } else {\n      var err = {\n        keyword: \"type\",\n        dataPath: (dataPath || \"\") + \"\",\n        schemaPath: \"#/type\",\n        params: {\n          type: \"object\",\n        },\n        message: \"should be object\",\n      };\n      if (vErrors === null) vErrors = [err];\n      else vErrors.push(err);\n      errors++;\n    }\n    validate.errors = vErrors;\n    return errors === 0;\n  };\n})();\nvalidate.schema = {\n  $schema: \"http://json-schema.org/draft-07/schema\",\n  $id: \"CaseCountsArray\",\n  title: \"CaseCountsArray\",\n  type: \"object\",\n  additionalProperties: false,\n  required: [\"all\"],\n  properties: {\n    all: {\n      type: \"array\",\n      items: {\n        $ref: \"CaseCountsData#\",\n      },\n    },\n  },\n};\nvalidate.errors = null;\nmodule.exports = validate;\n"]},"metadata":{},"sourceType":"script"}