{"ast":null,"code":"import _pt from \"prop-types\";\nimport _omit from \"lodash/omit\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/SeverityTable/SeverityTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { DataTypeProvider, EditingState } from '@devexpress/dx-react-grid';\nimport { format as d3format } from 'd3-format';\nimport { useField } from 'formik';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { Grid, Table, TableHeaderRow, TableInlineCellEditing } from '@devexpress/dx-react-grid-bootstrap4';\nimport { AgeGroup } from '../../../algorithms/types/Param.types';\nimport i18n from '../../../i18n/i18n';\nimport { selectAgeDistributionData, selectScenarioData, selectSeverityDistributionData } from '../../../state/scenario/scenario.selectors';\nimport './SeverityTable.scss';\nconst columns = [{\n  name: 'ageGroup',\n  title: i18n.t('Age group')\n}, {\n  name: 'population',\n  title: i18n.t('Age distribution')\n}, {\n  name: 'confirmed',\n  title: `${i18n.t('Confirmed')}\\n% ${i18n.t('total')}`\n}, {\n  name: 'severe',\n  title: `${i18n.t('Severe')}\\n% ${i18n.t('of confirmed')}`\n}, {\n  name: 'critical',\n  title: `${i18n.t('Critical')}\\n% ${i18n.t('of severe')}`\n}, {\n  name: 'fatal',\n  title: `${i18n.t('Fatal')}\\n% ${i18n.t('of critical')}`\n}, {\n  name: 'totalFatal',\n  title: `${i18n.t('Fatal')}\\n% ${i18n.t('of all infections')}`\n}, {\n  name: 'isolated',\n  title: `${i18n.t('Isolated')}\\n% ${i18n.t('total')}`\n}];\nconst columnExtensions = [{\n  columnName: 'ageGroup',\n  align: 'center'\n}, {\n  columnName: 'population',\n  align: 'center'\n}, {\n  columnName: 'confirmed',\n  align: 'center'\n}, {\n  columnName: 'severe',\n  align: 'center'\n}, {\n  columnName: 'critical',\n  align: 'center'\n}, {\n  columnName: 'fatal',\n  align: 'center'\n}, {\n  columnName: 'totalFatal',\n  align: 'center'\n}, {\n  columnName: 'isolated',\n  align: 'center'\n}];\nconst editingColumnExtensions = [{\n  columnName: 'ageGroup',\n  editingEnabled: false\n}, {\n  columnName: 'totalFatal',\n  editingEnabled: false\n}];\n\nconst getRowId = row => row.id;\n\nfunction HeaderCell({\n  column\n}) {\n  const {\n    title\n  } = column;\n  const content = title === null || title === void 0 ? void 0 : title.split('\\n').map((line, i) => /*#__PURE__*/React.createElement(\"p\", {\n    key: `line ${i}: ${line}`,\n    className: `text-center text-bold ${i !== 0 ? 'small' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, line));\n  return /*#__PURE__*/React.createElement(\"td\", {\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }\n  }, content);\n}\n\n_c = HeaderCell;\n\nconst ValueCell = ({\n  onClick,\n  column,\n  ...props\n}) => {\n  const editingColumnExtension = editingColumnExtensions.find(editingExtension => column.name === editingExtension.columnName);\n  const editable = !editingColumnExtension || editingColumnExtension.editingEnabled;\n  return /*#__PURE__*/React.createElement(Table.Cell, Object.assign({}, props, {\n    tabIndex: editable ? 0 : -1,\n    onFocus: editable ? onClick : undefined,\n    column: column,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 10\n    }\n  }));\n};\n\n_c2 = ValueCell;\nValueCell.propTypes = {\n  onClick: _pt.func\n};\n\nconst DecimalFormatter = ({\n  value\n}) => /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 3\n  }\n}, d3format('.2')(Number.parseFloat(value)));\n\n_c3 = DecimalFormatter;\n\nconst DecimalTypeProvider = props => /*#__PURE__*/React.createElement(DataTypeProvider, Object.assign({\n  formatterComponent: DecimalFormatter\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 3\n  }\n}));\n\n_c4 = DecimalTypeProvider;\nexport function getErrorMessages(t, errors) {\n  if (!errors) {\n    return [];\n  }\n\n  return Object.entries(errors).reduce((result, [i, err]) => {\n    const rowNum = Number.parseInt(i, 10);\n    const ageGroup = Object.values(AgeGroup)[rowNum];\n\n    if (err) {\n      const messages = Object.entries(err).map(([column, message]) => t('Error in column \"{{column}}\", row \"{{ageGroup}}\": {{message}}', {\n        column,\n        ageGroup,\n        message\n      }));\n      return [...result, ...messages];\n    }\n\n    return result;\n  }, new Array());\n}\n\nconst mapStateToProps = state => ({\n  scenarioData: selectScenarioData(state),\n  ageDistributionData: selectAgeDistributionData(state),\n  severityDistributionData: selectSeverityDistributionData(state)\n});\n\nconst mapDispatchToProps = {};\nexport const SeverityTable = connect(mapStateToProps, mapDispatchToProps)(SeverityTableDisconnected);\n\nfunction SeverityTableDisconnected({\n  scenarioData,\n  ageDistributionData,\n  severityDistributionData\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [{\n    value\n  }, {\n    error\n  }, {\n    setValue\n  }] = useField('severity');\n  const errorMessages = getErrorMessages(t, error);\n\n  if (!value) {\n    return null;\n  }\n\n  const parametersWithTotals = value.map(row => ({ ...row,\n    totalFatal: row.confirmed * row.severe * row.critical * row.fatal * 1e-6\n  }));\n\n  const commitChanges = ({\n    changed\n  }) => {\n    if (!changed) {\n      return;\n    }\n\n    const newValueWithTotals = parametersWithTotals.map(row => {\n      const changedRow = changed[row.id];\n      return changedRow ? { ...row,\n        ...changedRow\n      } : row;\n    });\n    const newValue = newValueWithTotals.map(row => _omit(row, ['totalFatal']));\n    setValue(newValue);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"age-group-parameters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    rows: parametersWithTotals,\n    columns: columns,\n    getRowId: getRowId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(EditingState, {\n    onCommitChanges: commitChanges,\n    columnExtensions: editingColumnExtensions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(DecimalTypeProvider, {\n    for: ['totalFatal'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    columnExtensions: columnExtensions,\n    cellComponent: ValueCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TableInlineCellEditing, {\n    startEditAction: 'click',\n    selectTextOnEditStart: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TableHeaderRow, {\n    cellComponent: HeaderCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  })), errorMessages.map(message => /*#__PURE__*/React.createElement(\"div\", {\n    key: message,\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, message)));\n}\n\n_s(SeverityTableDisconnected, \"fI18lMy+Ihzup1qouWo6emuAA5Y=\", false, function () {\n  return [useTranslation, useField];\n});\n\n_c5 = SeverityTableDisconnected;\nSeverityTableDisconnected.propTypes = {\n  ageDistributionData: _pt.array.isRequired,\n  severityDistributionData: _pt.array.isRequired\n};\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"HeaderCell\");\n$RefreshReg$(_c2, \"ValueCell\");\n$RefreshReg$(_c3, \"DecimalFormatter\");\n$RefreshReg$(_c4, \"DecimalTypeProvider\");\n$RefreshReg$(_c5, \"SeverityTableDisconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/SeverityTable/SeverityTable.tsx"],"names":["React","DataTypeProvider","EditingState","format","d3format","useField","useTranslation","connect","Grid","Table","TableHeaderRow","TableInlineCellEditing","AgeGroup","i18n","selectAgeDistributionData","selectScenarioData","selectSeverityDistributionData","columns","name","title","t","columnExtensions","columnName","align","editingColumnExtensions","editingEnabled","getRowId","row","id","HeaderCell","column","content","split","map","line","i","ValueCell","onClick","props","editingColumnExtension","find","editingExtension","editable","undefined","DecimalFormatter","value","Number","parseFloat","DecimalTypeProvider","getErrorMessages","errors","Object","entries","reduce","result","err","rowNum","parseInt","ageGroup","values","messages","message","Array","mapStateToProps","state","scenarioData","ageDistributionData","severityDistributionData","mapDispatchToProps","SeverityTable","SeverityTableDisconnected","error","setValue","errorMessages","parametersWithTotals","totalFatal","confirmed","severe","critical","fatal","commitChanges","changed","newValueWithTotals","changedRow","newValue"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { omit } from 'lodash'\n\nimport {\n  ChangeSet,\n  Column,\n  DataTypeProvider,\n  DataTypeProviderProps,\n  EditingColumnExtension,\n  EditingState,\n} from '@devexpress/dx-react-grid'\n\nimport type { TFunction } from 'i18next'\nimport { format as d3format } from 'd3-format'\nimport { FormikErrors, useField } from 'formik'\nimport { useTranslation } from 'react-i18next'\nimport { connect } from 'react-redux'\nimport { Grid, Table, TableHeaderRow, TableInlineCellEditing } from '@devexpress/dx-react-grid-bootstrap4'\n\nimport { AgeGroup } from '../../../algorithms/types/Param.types'\nimport type {\n  AgeDistributionDatum,\n  SeverityDistributionDatum,\n  ScenarioDatum,\n} from '../../../algorithms/types/Param.types'\n\nimport i18n from '../../../i18n/i18n'\n\nimport {\n  selectAgeDistributionData,\n  selectScenarioData,\n  selectSeverityDistributionData,\n} from '../../../state/scenario/scenario.selectors'\nimport { State } from '../../../state/reducer'\n\nimport './SeverityTable.scss'\n\nexport interface AgeGroupRow extends SeverityDistributionDatum, AgeDistributionDatum {\n  id: string\n}\n\nexport interface AgeGroupRowWithTotals extends AgeGroupRow {\n  totalFatal: number\n}\n\nconst columns: Column[] = [\n  { name: 'ageGroup', title: i18n.t('Age group') },\n  { name: 'population', title: i18n.t('Age distribution') },\n  { name: 'confirmed', title: `${i18n.t('Confirmed')}\\n% ${i18n.t('total')}` },\n  { name: 'severe', title: `${i18n.t('Severe')}\\n% ${i18n.t('of confirmed')}` },\n  { name: 'critical', title: `${i18n.t('Critical')}\\n% ${i18n.t('of severe')}` },\n  { name: 'fatal', title: `${i18n.t('Fatal')}\\n% ${i18n.t('of critical')}` },\n  { name: 'totalFatal', title: `${i18n.t('Fatal')}\\n% ${i18n.t('of all infections')}` },\n  { name: 'isolated', title: `${i18n.t('Isolated')}\\n% ${i18n.t('total')}` },\n]\n\nconst columnExtensions: Table.ColumnExtension[] = [\n  { columnName: 'ageGroup', align: 'center' },\n  { columnName: 'population', align: 'center' },\n  { columnName: 'confirmed', align: 'center' },\n  { columnName: 'severe', align: 'center' },\n  { columnName: 'critical', align: 'center' },\n  { columnName: 'fatal', align: 'center' },\n  { columnName: 'totalFatal', align: 'center' },\n  { columnName: 'isolated', align: 'center' },\n]\n\nconst editingColumnExtensions: EditingColumnExtension[] = [\n  { columnName: 'ageGroup', editingEnabled: false },\n  { columnName: 'totalFatal', editingEnabled: false },\n]\n\nconst getRowId = (row: AgeGroupRow) => row.id\n\ntype HeaderCellProps = Partial<Table.DataCellProps> & TableHeaderRow.CellProps\n\nfunction HeaderCell({ column }: HeaderCellProps) {\n  const { title } = column\n  const content = title?.split('\\n').map((line, i) => (\n    <p key={`line ${i}: ${line}`} className={`text-center text-bold ${i !== 0 ? 'small' : ''}`}>\n      {line}\n    </p>\n  ))\n\n  return <td title={title}>{content}</td>\n}\ninterface ValueCellProps extends Table.DataCellProps {\n  onClick?: (e: MouseEvent) => void\n}\n\nconst ValueCell = ({ onClick, column, ...props }: ValueCellProps) => {\n  const editingColumnExtension = editingColumnExtensions.find(\n    (editingExtension) => column.name === editingExtension.columnName,\n  )\n  const editable = !editingColumnExtension || editingColumnExtension.editingEnabled\n  return <Table.Cell {...props} tabIndex={editable ? 0 : -1} onFocus={editable ? onClick : undefined} column={column} />\n}\n\nconst DecimalFormatter = ({ value }: DataTypeProvider.ValueFormatterProps) => (\n  <span>{d3format('.2')(Number.parseFloat(value))}</span>\n)\n\nconst DecimalTypeProvider = (props: DataTypeProviderProps) => (\n  <DataTypeProvider formatterComponent={DecimalFormatter} {...props} />\n)\n\nexport function getErrorMessages(t: TFunction, errors?: FormikErrors<AgeGroupRow[]>): string[] {\n  if (!errors) {\n    return []\n  }\n\n  return Object.entries(errors).reduce((result, [i, err]) => {\n    const rowNum = Number.parseInt(i, 10)\n    const ageGroup = Object.values(AgeGroup)[rowNum]\n\n    if (err) {\n      const messages = Object.entries(err).map(([column, message]) =>\n        t('Error in column \"{{column}}\", row \"{{ageGroup}}\": {{message}}', { column, ageGroup, message }),\n      )\n      return [...result, ...messages]\n    }\n\n    return result\n  }, new Array<string>())\n}\n\nexport interface SeverityTableProps {\n  scenarioData: ScenarioDatum\n  ageDistributionData: AgeDistributionDatum[]\n  severityDistributionData: SeverityDistributionDatum[]\n}\n\nconst mapStateToProps = (state: State) => ({\n  scenarioData: selectScenarioData(state),\n  ageDistributionData: selectAgeDistributionData(state),\n  severityDistributionData: selectSeverityDistributionData(state),\n})\n\nconst mapDispatchToProps = {}\n\nexport const SeverityTable = connect(mapStateToProps, mapDispatchToProps)(SeverityTableDisconnected)\n\nfunction SeverityTableDisconnected({\n  scenarioData,\n  ageDistributionData,\n  severityDistributionData,\n}: SeverityTableProps) {\n  const { t } = useTranslation()\n  const [{ value }, { error }, { setValue }] = useField<AgeGroupRow[]>('severity')\n  const errorMessages = getErrorMessages(t, error)\n\n  if (!value) {\n    return null\n  }\n\n  const parametersWithTotals: AgeGroupRowWithTotals[] = value.map((row) => ({\n    ...row,\n    totalFatal: row.confirmed * row.severe * row.critical * row.fatal * 1e-6,\n  }))\n\n  const commitChanges = ({ changed }: ChangeSet) => {\n    if (!changed) {\n      return\n    }\n\n    const newValueWithTotals: AgeGroupRowWithTotals[] = parametersWithTotals.map((row) => {\n      const changedRow = changed[row.id] as AgeGroupRowWithTotals\n      return changedRow ? { ...row, ...changedRow } : row\n    })\n    const newValue = newValueWithTotals.map((row) => omit(row, ['totalFatal']))\n    setValue(newValue)\n  }\n\n  return (\n    <div className=\"age-group-parameters\">\n      <Grid rows={parametersWithTotals} columns={columns} getRowId={getRowId}>\n        <EditingState onCommitChanges={commitChanges} columnExtensions={editingColumnExtensions} />\n        <DecimalTypeProvider for={['totalFatal']} />\n        <Table columnExtensions={columnExtensions} cellComponent={ValueCell} />\n        <TableInlineCellEditing startEditAction={'click'} selectTextOnEditStart />\n        <TableHeaderRow cellComponent={HeaderCell} />\n      </Grid>\n      {errorMessages.map((message) => (\n        <div key={message} className=\"text-danger\">\n          {message}\n        </div>\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}