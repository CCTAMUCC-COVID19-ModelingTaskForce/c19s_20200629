{"ast":null,"code":"const worker = new Worker('./worker.ts', {\n  type: 'module',\n  name: 'algorithm'\n});\nexport async function run(args) {\n  return new Promise((resolve, reject) => {\n    worker.addEventListener('message', message => {\n      const {\n        result,\n        error\n      } = message.data;\n\n      if (result) {\n        resolve(result);\n        return;\n      }\n\n      if (error) {\n        reject(error);\n      }\n    });\n    worker.addEventListener('error', error => {\n      reject(error);\n    });\n    worker.postMessage(args);\n  });\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/workers/algorithm/index.ts"],"names":["worker","Worker","type","name","run","args","Promise","resolve","reject","addEventListener","message","result","error","data","postMessage"],"mappings":"AAKA,MAAMA,MAAM,GAAG,IAAIC,MAAJ,CAAW,aAAX,EAA0B;AAAEC,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,IAAI,EAAE;AAAxB,CAA1B,CAAf;AAEA,OAAO,eAAeC,GAAf,CAAmBC,IAAnB,EAAoC;AACzC,SAAO,IAAIC,OAAJ,CAA6B,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvDR,IAAAA,MAAM,CAACS,gBAAP,CAAwB,SAAxB,EAAoCC,OAAD,IAA2B;AAC5D,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAiCF,OAAO,CAACG,IAA/C;;AAEA,UAAIF,MAAJ,EAAY;AACVJ,QAAAA,OAAO,CAACI,MAAD,CAAP;AACA;AACD;;AAED,UAAIC,KAAJ,EAAW;AACTJ,QAAAA,MAAM,CAACI,KAAD,CAAN;AACD;AACF,KAXD;AAaAZ,IAAAA,MAAM,CAACS,gBAAP,CAAwB,OAAxB,EAAkCG,KAAD,IAAW;AAC1CJ,MAAAA,MAAM,CAACI,KAAD,CAAN;AACD,KAFD;AAIAZ,IAAAA,MAAM,CAACc,WAAP,CAAmBT,IAAnB;AACD,GAnBM,CAAP;AAoBD","sourcesContent":["import { AlgorithmResult } from '../../algorithms/types/Result.types'\nimport { MessageData } from './worker.types'\n\nimport { RunParams } from '../../algorithms/run'\n\nconst worker = new Worker('./worker.ts', { type: 'module', name: 'algorithm' })\n\nexport async function run(args: RunParams) {\n  return new Promise<AlgorithmResult>((resolve, reject) => {\n    worker.addEventListener('message', (message: MessageEvent) => {\n      const { result, error }: MessageData = message.data as { result: AlgorithmResult; error: string }\n\n      if (result) {\n        resolve(result)\n        return\n      }\n\n      if (error) {\n        reject(error)\n      }\n    })\n\n    worker.addEventListener('error', (error) => {\n      reject(error)\n    })\n\n    worker.postMessage(args)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}