{"ast":null,"code":"import _pt from \"prop-types\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Results/ResultsCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport { Button, Col, Row } from 'reactstrap';\nimport { useTranslation } from 'react-i18next';\nimport { FiChevronLeft } from 'react-icons/fi';\nimport { selectHasResult } from '../../../state/algorithm/algorithm.selectors';\nimport { selectCanRun } from '../../../state/scenario/scenario.selectors';\nimport { selectAreResultsMaximized } from '../../../state/settings/settings.selectors';\nimport { toggleResultsMaximized } from '../../../state/settings/settings.actions';\nimport { CollapsibleCard } from '../../Form/CollapsibleCard';\nimport { CardWithControls } from '../../Form/CardWithControls';\nimport { AgeBarChart } from './AgeBarChart';\nimport { DeterministicLinePlot } from './DeterministicLinePlot';\nimport { OutcomeRatesTable } from './OutcomeRatesTable';\nimport { OutcomesDetailsTable } from './OutcomesDetailsTable';\nimport { SimulationControls } from '../Controls/SimulationControls';\nimport { PlotSpinner } from './PlotSpinner';\nimport './ResultsCard.scss';\nconst ICON_SIZE = 50;\n\nconst mapStateToProps = state => ({\n  canRun: selectCanRun(state),\n  hasResult: selectHasResult(state),\n  areResultsMaximized: selectAreResultsMaximized(state)\n});\n\nconst mapDispatchToProps = {\n  toggleResultsMaximized\n};\n\nfunction ResultsCardDisconnected({\n  canRun,\n  hasResult,\n  areResultsMaximized,\n  toggleResultsMaximized\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const scrollTargetRef = useRef(null);\n  const toggleResultsMaximizedLocal = useCallback(() => toggleResultsMaximized(), [toggleResultsMaximized]);\n\n  function scrollToResults() {\n    var _scrollTargetRef$curr;\n\n    scrollTargetRef === null || scrollTargetRef === void 0 ? void 0 : (_scrollTargetRef$curr = scrollTargetRef.current) === null || _scrollTargetRef$curr === void 0 ? void 0 : _scrollTargetRef$curr.scrollIntoView({\n      behavior: 'smooth',\n      block: 'start',\n      inline: 'nearest'\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardWithControls, {\n    identifier: \"results-card\",\n    className: \"card-results\",\n    labelComponent: /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"p-0 m-0 text-truncate d-flex align-items-center\",\n      \"data-testid\": \"ResultsCardTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: toggleResultsMaximizedLocal,\n      className: \"btn-dark btn-results-expand mr-2 pt-1 pb-2 d-none d-xl-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FiChevronLeft, {\n      className: classNames(areResultsMaximized ? 'icon-rotate-180' : 'icon-rotate-0'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, t('Results'))),\n    help: t('This section contains simulation results'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-results-simulation-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SimulationControls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-results-trajectories\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: scrollTargetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardWithControls, {\n    className: \"card-trajectories\",\n    identifier: \"trajectories\",\n    labelComponent: /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"d-inline text-truncate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 31\n      }\n    }, t('Outbreak trajectories')),\n    help: t(`Simulation results over time`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DeterministicLinePlot, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(PlotSpinner, {\n    size: ICON_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }\n  })))))), /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-results-age-distribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardWithControls, {\n    className: \"card-age-distribution\",\n    identifier: \"age-distribution\",\n    labelComponent: /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"d-inline text-truncate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 31\n      }\n    }, t('Distribution across age groups')),\n    help: t('Summary of outcomes per age group'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AgeBarChart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(PlotSpinner, {\n    size: ICON_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  })))))), /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-results-outcomes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CollapsibleCard, {\n    className: \"card-outcomes-table\",\n    identifier: \"outcomes-table\",\n    title: /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"d-inline text-truncate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 22\n      }\n    }, t('Outcomes summary table')),\n    help: t('Summary table of outcomes for the entire population'),\n    defaultCollapsed: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(OutcomesDetailsTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(PlotSpinner, {\n    size: ICON_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }\n  })))))), /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    className: \"row-results-outcomes-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardWithControls, {\n    className: \"card-outcomes\",\n    identifier: \"outcomes\",\n    labelComponent: /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"d-inline text-truncate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 31\n      }\n    }, t('Outcomes')),\n    help: t('Summary of outcomes for the entire population'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(OutcomeRatesTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(PlotSpinner, {\n    size: ICON_SIZE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }\n  }))))))), hasResult && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-goto-results d-flex d-md-none w-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-goto-results mx-auto\",\n    color: \"primary\",\n    onClick: scrollToResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, t('Go to results'))));\n}\n\n_s(ResultsCardDisconnected, \"PMowdQz1MLoSFcIpWLaHtKz1qi0=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ResultsCardDisconnected;\nResultsCardDisconnected.propTypes = {\n  canRun: _pt.bool.isRequired,\n  hasResult: _pt.bool.isRequired,\n  areResultsMaximized: _pt.bool.isRequired\n};\nconst ResultsCard = connect(mapStateToProps, mapDispatchToProps)(ResultsCardDisconnected);\nexport { ResultsCard };\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultsCardDisconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/Results/ResultsCard.tsx"],"names":["React","useRef","useCallback","classNames","connect","Button","Col","Row","useTranslation","FiChevronLeft","selectHasResult","selectCanRun","selectAreResultsMaximized","toggleResultsMaximized","CollapsibleCard","CardWithControls","AgeBarChart","DeterministicLinePlot","OutcomeRatesTable","OutcomesDetailsTable","SimulationControls","PlotSpinner","ICON_SIZE","mapStateToProps","state","canRun","hasResult","areResultsMaximized","mapDispatchToProps","ResultsCardDisconnected","t","scrollTargetRef","toggleResultsMaximizedLocal","scrollToResults","current","scrollIntoView","behavior","block","inline","ResultsCard"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback } from 'react'\n\nimport classNames from 'classnames'\nimport { connect } from 'react-redux'\nimport { Button, Col, Row } from 'reactstrap'\nimport { useTranslation } from 'react-i18next'\nimport { FiChevronLeft } from 'react-icons/fi'\nimport { ActionCreator } from 'typescript-fsa'\n\nimport { selectHasResult } from '../../../state/algorithm/algorithm.selectors'\nimport { State } from '../../../state/reducer'\nimport { selectCanRun } from '../../../state/scenario/scenario.selectors'\nimport { selectAreResultsMaximized } from '../../../state/settings/settings.selectors'\nimport { toggleResultsMaximized } from '../../../state/settings/settings.actions'\n\nimport { CollapsibleCard } from '../../Form/CollapsibleCard'\n\nimport { CardWithControls } from '../../Form/CardWithControls'\n\nimport { AgeBarChart } from './AgeBarChart'\nimport { DeterministicLinePlot } from './DeterministicLinePlot'\nimport { OutcomeRatesTable } from './OutcomeRatesTable'\nimport { OutcomesDetailsTable } from './OutcomesDetailsTable'\nimport { SimulationControls } from '../Controls/SimulationControls'\nimport { PlotSpinner } from './PlotSpinner'\n\nimport './ResultsCard.scss'\n\nconst ICON_SIZE = 50\n\ninterface ResultsCardProps {\n  canRun: boolean\n  hasResult: boolean\n  areResultsMaximized: boolean\n  toggleResultsMaximized: ActionCreator<void>\n}\n\nconst mapStateToProps = (state: State) => ({\n  canRun: selectCanRun(state),\n  hasResult: selectHasResult(state),\n  areResultsMaximized: selectAreResultsMaximized(state),\n})\n\nconst mapDispatchToProps = {\n  toggleResultsMaximized,\n}\n\nfunction ResultsCardDisconnected({ canRun, hasResult, areResultsMaximized, toggleResultsMaximized }: ResultsCardProps) {\n  const { t } = useTranslation()\n  const scrollTargetRef = useRef<HTMLDivElement | null>(null)\n  const toggleResultsMaximizedLocal = useCallback(() => toggleResultsMaximized(), [toggleResultsMaximized])\n\n  function scrollToResults() {\n    scrollTargetRef?.current?.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'nearest' })\n  }\n\n  return (\n    <>\n      <CardWithControls\n        identifier=\"results-card\"\n        className=\"card-results\"\n        labelComponent={\n          <h2 className=\"p-0 m-0 text-truncate d-flex align-items-center\" data-testid=\"ResultsCardTitle\">\n            <Button\n              onClick={toggleResultsMaximizedLocal}\n              className=\"btn-dark btn-results-expand mr-2 pt-1 pb-2 d-none d-xl-block\"\n            >\n              <FiChevronLeft className={classNames(areResultsMaximized ? 'icon-rotate-180' : 'icon-rotate-0')} />\n            </Button>\n            <span>{t('Results')}</span>\n          </h2>\n        }\n        help={t('This section contains simulation results')}\n      >\n        <Row noGutters className=\"row-results-simulation-controls\">\n          <Col>\n            <SimulationControls />\n          </Col>\n        </Row>\n\n        <Row noGutters className=\"row-results-trajectories\">\n          <Col>\n            <div ref={scrollTargetRef} />\n            <CardWithControls\n              className=\"card-trajectories\"\n              identifier=\"trajectories\"\n              labelComponent={<h3 className=\"d-inline text-truncate\">{t('Outbreak trajectories')}</h3>}\n              help={t(`Simulation results over time`)}\n            >\n              <Row noGutters>\n                <Col>\n                  <DeterministicLinePlot />\n                  <PlotSpinner size={ICON_SIZE} />\n                </Col>\n              </Row>\n            </CardWithControls>\n          </Col>\n        </Row>\n\n        <Row noGutters className=\"row-results-age-distribution\">\n          <Col>\n            <CardWithControls\n              className=\"card-age-distribution\"\n              identifier=\"age-distribution\"\n              labelComponent={<h3 className=\"d-inline text-truncate\">{t('Distribution across age groups')}</h3>}\n              help={t('Summary of outcomes per age group')}\n            >\n              <Row>\n                <Col>\n                  <AgeBarChart />\n                  <PlotSpinner size={ICON_SIZE} />\n                </Col>\n              </Row>\n            </CardWithControls>\n          </Col>\n        </Row>\n\n        <Row noGutters className=\"row-results-outcomes\">\n          <Col>\n            <CollapsibleCard\n              className=\"card-outcomes-table\"\n              identifier=\"outcomes-table\"\n              title={<h3 className=\"d-inline text-truncate\">{t('Outcomes summary table')}</h3>}\n              help={t('Summary table of outcomes for the entire population')}\n              defaultCollapsed\n            >\n              <Row>\n                <Col>\n                  <OutcomesDetailsTable />\n                  <PlotSpinner size={ICON_SIZE} />\n                </Col>\n              </Row>\n            </CollapsibleCard>\n          </Col>\n        </Row>\n\n        <Row noGutters className=\"row-results-outcomes-table\">\n          <Col>\n            <CardWithControls\n              className=\"card-outcomes\"\n              identifier=\"outcomes\"\n              labelComponent={<h3 className=\"d-inline text-truncate\">{t('Outcomes')}</h3>}\n              help={t('Summary of outcomes for the entire population')}\n            >\n              <Row>\n                <Col>\n                  <OutcomeRatesTable />\n                  <PlotSpinner size={ICON_SIZE} />\n                </Col>\n              </Row>\n            </CardWithControls>\n          </Col>\n        </Row>\n      </CardWithControls>\n\n      {hasResult && (\n        <div className=\"container-goto-results d-flex d-md-none w-100\">\n          <Button className=\"btn-goto-results mx-auto\" color=\"primary\" onClick={scrollToResults}>\n            {t('Go to results')}\n          </Button>\n        </div>\n      )}\n    </>\n  )\n}\n\nconst ResultsCard = connect(mapStateToProps, mapDispatchToProps)(ResultsCardDisconnected)\n\nexport { ResultsCard }\n"]},"metadata":{},"sourceType":"module"}