{"ast":null,"code":"import _pt from \"prop-types\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/ScenarioLoader/ScenarioLoaderUploader.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { UncontrolledAlert } from 'reactstrap';\nimport { appendDash } from '../../../helpers/appendDash';\nimport { deserialize } from '../../../io/serialization/deserialize';\nimport { DeserializationError } from '../../../io/serialization/errors';\nimport { readFile, FileReaderError } from '../../../helpers/readFile';\nimport { setScenarioState } from '../../../state/scenario/scenario.actions';\nimport { ScenarioLoaderUploadZone } from './ScenarioLoaderUploadZone';\nimport ScenarioLoaderUploadInstructionsText from './ScenarioLoaderUploadInstructionsText.mdx';\n\nclass UploadErrorTooManyFiles extends Error {\n  constructor(nFiles) {\n    super(`when uploading: one file is expected, but got ${nFiles}`);\n    this.nFiles = nFiles;\n  }\n\n}\n\nclass UploadErrorUnknown extends Error {\n  constructor() {\n    super(`when uploading: unknown error`);\n  }\n\n}\n\nconst mapStateToProps = undefined;\nconst mapDispatchToProps = {\n  setScenarioState\n};\nexport const ScenarioLoaderUploader = connect(mapStateToProps, mapDispatchToProps)(ScenarioLoaderUploaderDisconnected);\nexport function ScenarioLoaderUploaderDisconnected({\n  setScenarioState,\n  close\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [errors, setErrors] = useState([]);\n  const hasErrors = errors.length > 0;\n\n  if (hasErrors) {\n    console.warn(`Errors when uploading:\\n${errors.map(appendDash).join('\\n')}`);\n  }\n\n  function handleError(error) {\n    if (error instanceof UploadErrorTooManyFiles) {\n      setErrors(prevErrors => [...prevErrors, t('Only one file is expected')]);\n    } else if (error instanceof UploadErrorUnknown) {\n      setErrors(prevErrors => [...prevErrors, t('Unknown error')]);\n    } else if (error instanceof FileReaderError) {\n      setErrors(prevErrors => [...prevErrors, t('Unable to read file.')]);\n    } else if (error instanceof DeserializationError) {\n      const {\n        errors\n      } = error;\n\n      if (errors && errors.length > 0) {\n        setErrors(prevErrors => [...prevErrors, ...errors]);\n      }\n    } else {\n      throw error;\n    }\n  }\n\n  async function processFiles(acceptedFiles, rejectedFiles) {\n    const nFiles = acceptedFiles.length + rejectedFiles.length;\n\n    if (nFiles > 1) {\n      throw new UploadErrorTooManyFiles(nFiles);\n    }\n\n    if (acceptedFiles.length !== 1) {\n      throw new UploadErrorTooManyFiles(acceptedFiles.length);\n    }\n\n    const str = await readFile(acceptedFiles[0]);\n    const params = deserialize(str);\n\n    if (!params) {\n      throw new UploadErrorUnknown();\n    }\n\n    setScenarioState(params);\n    close();\n  }\n\n  async function onDrop(acceptedFiles, rejectedFiles) {\n    setErrors([]);\n\n    try {\n      await processFiles(acceptedFiles, rejectedFiles);\n    } catch (error) {\n      handleError(error);\n      return;\n    }\n\n    setErrors([]);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scenario-loader-uploader-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ScenarioLoaderUploadInstructionsText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ScenarioLoaderUploadZone, {\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-3 scenario-loader-uploader-error-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, hasErrors && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"mt-2 text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, t(`Error`)), errors.map(error => /*#__PURE__*/React.createElement(UncontrolledAlert, {\n    color: \"danger\",\n    className: \"scenario-loader-uploader-error-list-item\",\n    key: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, error)))));\n}\n\n_s(ScenarioLoaderUploaderDisconnected, \"DgjuCo/8LPtR8YkdcKPXBV49uMk=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ScenarioLoaderUploaderDisconnected;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScenarioLoaderUploaderDisconnected\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Main/ScenarioLoader/ScenarioLoaderUploader.tsx"],"names":["React","useState","useTranslation","connect","UncontrolledAlert","appendDash","deserialize","DeserializationError","readFile","FileReaderError","setScenarioState","ScenarioLoaderUploadZone","ScenarioLoaderUploadInstructionsText","UploadErrorTooManyFiles","Error","constructor","nFiles","UploadErrorUnknown","mapStateToProps","undefined","mapDispatchToProps","ScenarioLoaderUploader","ScenarioLoaderUploaderDisconnected","close","t","errors","setErrors","hasErrors","length","console","warn","map","join","handleError","error","prevErrors","processFiles","acceptedFiles","rejectedFiles","str","params","onDrop"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,YAAlC;AAIA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,SAASC,WAAT,QAA4B,uCAA5B;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,2BAA1C;AACA,SAASC,gBAAT,QAAiC,0CAAjC;AAEA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,OAAOC,oCAAP,MAAiD,4CAAjD;;AAEA,MAAMC,uBAAN,SAAsCC,KAAtC,CAA4C;AAE1CC,EAAAA,WAAW,CAACC,MAAD,EAAiB;AAC1B,UAAO,iDAAgDA,MAAO,EAA9D;AACA,SAAKA,MAAL,GAAcA,MAAd;AACD;;AALyC;;AAQ5C,MAAMC,kBAAN,SAAiCH,KAAjC,CAAuC;AACrCC,EAAAA,WAAW,GAAG;AACZ,UAAO,+BAAP;AACD;;AAHoC;;AAWvC,MAAMG,eAAe,GAAGC,SAAxB;AAEA,MAAMC,kBAAkB,GAAG;AACzBV,EAAAA;AADyB,CAA3B;AAIA,OAAO,MAAMW,sBAAsB,GAAGlB,OAAO,CAACe,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CE,kCAA7C,CAA/B;AAEP,OAAO,SAASA,kCAAT,CAA4C;AAAEZ,EAAAA,gBAAF;AAAoBa,EAAAA;AAApB,CAA5C,EAAsG;AAAA;;AAC3G,QAAM;AAAEC,IAAAA;AAAF,MAAQtB,cAAc,EAA5B;AACA,QAAM,CAACuB,MAAD,EAASC,SAAT,IAAsBzB,QAAQ,CAAW,EAAX,CAApC;AAEA,QAAM0B,SAAS,GAAGF,MAAM,CAACG,MAAP,GAAgB,CAAlC;;AAEA,MAAID,SAAJ,EAAe;AACbE,IAAAA,OAAO,CAACC,IAAR,CAAc,2BAA0BL,MAAM,CAACM,GAAP,CAAW1B,UAAX,EAAuB2B,IAAvB,CAA4B,IAA5B,CAAkC,EAA1E;AACD;;AAED,WAASC,WAAT,CAAqBC,KAArB,EAAmC;AACjC,QAAIA,KAAK,YAAYrB,uBAArB,EAA8C;AAC5Ca,MAAAA,SAAS,CAAES,UAAD,IAAgB,CAAC,GAAGA,UAAJ,EAAgBX,CAAC,CAAC,2BAAD,CAAjB,CAAjB,CAAT;AACD,KAFD,MAEO,IAAIU,KAAK,YAAYjB,kBAArB,EAAyC;AAC9CS,MAAAA,SAAS,CAAES,UAAD,IAAgB,CAAC,GAAGA,UAAJ,EAAgBX,CAAC,CAAC,eAAD,CAAjB,CAAjB,CAAT;AACD,KAFM,MAEA,IAAIU,KAAK,YAAYzB,eAArB,EAAsC;AAC3CiB,MAAAA,SAAS,CAAES,UAAD,IAAgB,CAAC,GAAGA,UAAJ,EAAgBX,CAAC,CAAC,sBAAD,CAAjB,CAAjB,CAAT;AACD,KAFM,MAEA,IAAIU,KAAK,YAAY3B,oBAArB,EAA2C;AAChD,YAAM;AAAEkB,QAAAA;AAAF,UAAaS,KAAnB;;AACA,UAAIT,MAAM,IAAIA,MAAM,CAACG,MAAP,GAAgB,CAA9B,EAAiC;AAC/BF,QAAAA,SAAS,CAAES,UAAD,IAAgB,CAAC,GAAGA,UAAJ,EAAgB,GAAGV,MAAnB,CAAjB,CAAT;AACD;AACF,KALM,MAKA;AACL,YAAMS,KAAN;AACD;AACF;;AAED,iBAAeE,YAAf,CAA4BC,aAA5B,EAAmDC,aAAnD,EAAmF;AACjF,UAAMtB,MAAM,GAAGqB,aAAa,CAACT,MAAd,GAAuBU,aAAa,CAACV,MAApD;;AAEA,QAAIZ,MAAM,GAAG,CAAb,EAAgB;AACd,YAAM,IAAIH,uBAAJ,CAA4BG,MAA5B,CAAN;AACD;;AAED,QAAIqB,aAAa,CAACT,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,YAAM,IAAIf,uBAAJ,CAA4BwB,aAAa,CAACT,MAA1C,CAAN;AACD;;AAED,UAAMW,GAAG,GAAG,MAAM/B,QAAQ,CAAC6B,aAAa,CAAC,CAAD,CAAd,CAA1B;AACA,UAAMG,MAAM,GAAGlC,WAAW,CAACiC,GAAD,CAA1B;;AAEA,QAAI,CAACC,MAAL,EAAa;AACX,YAAM,IAAIvB,kBAAJ,EAAN;AACD;;AAEDP,IAAAA,gBAAgB,CAAC8B,MAAD,CAAhB;AACAjB,IAAAA,KAAK;AACN;;AAED,iBAAekB,MAAf,CAAsBJ,aAAtB,EAA6CC,aAA7C,EAA6E;AAC3EZ,IAAAA,SAAS,CAAC,EAAD,CAAT;;AAEA,QAAI;AACF,YAAMU,YAAY,CAACC,aAAD,EAAgBC,aAAhB,CAAlB;AACD,KAFD,CAEE,OAAOJ,KAAP,EAAc;AACdD,MAAAA,WAAW,CAACC,KAAD,CAAX;AACA;AACD;;AAEDR,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,oCAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,wBAAD;AAA0B,IAAA,MAAM,EAAEe,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAME;AAAK,IAAA,SAAS,EAAC,0CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,SAAS,iBACR,uDACE;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCH,CAAC,CAAE,OAAF,CAAnC,CADF,EAEGC,MAAM,CAACM,GAAP,CAAYG,KAAD,iBACV,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,QAAzB;AAAkC,IAAA,SAAS,EAAC,0CAA5C;AAAuF,IAAA,GAAG,EAAEA,KAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KADH,CADD,CAFH,CAFJ,CANF,CADF;AAqBD;;GAnFeZ,kC;UACApB,c;;;KADAoB,kC","sourcesContent":["import React, { useState } from 'react'\n\nimport { FileRejection } from 'react-dropzone'\nimport { useTranslation } from 'react-i18next'\nimport { connect } from 'react-redux'\nimport { UncontrolledAlert } from 'reactstrap'\nimport type { ActionCreator } from 'typescript-fsa'\nimport { ScenarioParameters } from '../../../algorithms/types/Param.types'\n\nimport { appendDash } from '../../../helpers/appendDash'\n\nimport { deserialize } from '../../../io/serialization/deserialize'\nimport { DeserializationError } from '../../../io/serialization/errors'\nimport { readFile, FileReaderError } from '../../../helpers/readFile'\nimport { setScenarioState } from '../../../state/scenario/scenario.actions'\n\nimport { ScenarioLoaderUploadZone } from './ScenarioLoaderUploadZone'\nimport ScenarioLoaderUploadInstructionsText from './ScenarioLoaderUploadInstructionsText.mdx'\n\nclass UploadErrorTooManyFiles extends Error {\n  public readonly nFiles: number\n  constructor(nFiles: number) {\n    super(`when uploading: one file is expected, but got ${nFiles}`)\n    this.nFiles = nFiles\n  }\n}\n\nclass UploadErrorUnknown extends Error {\n  constructor() {\n    super(`when uploading: unknown error`)\n  }\n}\n\nexport interface ScenarioLoaderUploaderProps {\n  close(): void\n  setScenarioState: ActionCreator<ScenarioParameters>\n}\n\nconst mapStateToProps = undefined\n\nconst mapDispatchToProps = {\n  setScenarioState,\n}\n\nexport const ScenarioLoaderUploader = connect(mapStateToProps, mapDispatchToProps)(ScenarioLoaderUploaderDisconnected)\n\nexport function ScenarioLoaderUploaderDisconnected({ setScenarioState, close }: ScenarioLoaderUploaderProps) {\n  const { t } = useTranslation()\n  const [errors, setErrors] = useState<string[]>([])\n\n  const hasErrors = errors.length > 0\n\n  if (hasErrors) {\n    console.warn(`Errors when uploading:\\n${errors.map(appendDash).join('\\n')}`)\n  }\n\n  function handleError(error: Error) {\n    if (error instanceof UploadErrorTooManyFiles) {\n      setErrors((prevErrors) => [...prevErrors, t('Only one file is expected')])\n    } else if (error instanceof UploadErrorUnknown) {\n      setErrors((prevErrors) => [...prevErrors, t('Unknown error')])\n    } else if (error instanceof FileReaderError) {\n      setErrors((prevErrors) => [...prevErrors, t('Unable to read file.')])\n    } else if (error instanceof DeserializationError) {\n      const { errors } = error\n      if (errors && errors.length > 0) {\n        setErrors((prevErrors) => [...prevErrors, ...errors])\n      }\n    } else {\n      throw error\n    }\n  }\n\n  async function processFiles(acceptedFiles: File[], rejectedFiles: FileRejection[]) {\n    const nFiles = acceptedFiles.length + rejectedFiles.length\n\n    if (nFiles > 1) {\n      throw new UploadErrorTooManyFiles(nFiles)\n    }\n\n    if (acceptedFiles.length !== 1) {\n      throw new UploadErrorTooManyFiles(acceptedFiles.length)\n    }\n\n    const str = await readFile(acceptedFiles[0])\n    const params = deserialize(str)\n\n    if (!params) {\n      throw new UploadErrorUnknown()\n    }\n\n    setScenarioState(params)\n    close()\n  }\n\n  async function onDrop(acceptedFiles: File[], rejectedFiles: FileRejection[]) {\n    setErrors([])\n\n    try {\n      await processFiles(acceptedFiles, rejectedFiles)\n    } catch (error) {\n      handleError(error)\n      return\n    }\n\n    setErrors([])\n  }\n\n  return (\n    <div className=\"scenario-loader-uploader-container\">\n      <div className=\"\">\n        <ScenarioLoaderUploadInstructionsText />\n        <ScenarioLoaderUploadZone onDrop={onDrop} />\n      </div>\n\n      <div className=\"mt-3 scenario-loader-uploader-error-list\">\n        {hasErrors && (\n          <>\n            <h4 className=\"mt-2 text-danger\">{t(`Error`)}</h4>\n            {errors.map((error) => (\n              <UncontrolledAlert color=\"danger\" className=\"scenario-loader-uploader-error-list-item\" key={error}>\n                {error}\n              </UncontrolledAlert>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}