{"ast":null,"code":"import semver from 'semver';\nimport { DeserializationErrorJsonSyntaxInvalid, DeserializationErrorSchemaVersionInvalid, DeserializationErrorSchemaVersionMissing } from './errors';\nimport { SERIALIZER_VERSIONS, SERIALIZERS } from './versioning';\nexport function deserialize(dataString) {\n  try {\n    const shareableDangerous = JSON.parse(dataString);\n    const schemaVer = semver.valid(shareableDangerous === null || shareableDangerous === void 0 ? void 0 : shareableDangerous.schemaVer);\n\n    if (schemaVer) {\n      var _SERIALIZERS$get;\n\n      const deserialize = (_SERIALIZERS$get = SERIALIZERS.get(schemaVer)) === null || _SERIALIZERS$get === void 0 ? void 0 : _SERIALIZERS$get.deserialize;\n\n      if (deserialize) {\n        return deserialize(dataString);\n      }\n\n      throw new DeserializationErrorSchemaVersionInvalid(schemaVer, SERIALIZER_VERSIONS);\n    }\n\n    throw new DeserializationErrorSchemaVersionMissing();\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      throw new DeserializationErrorJsonSyntaxInvalid(error.message);\n    } else {\n      throw error;\n    }\n  }\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/io/serialization/deserialize.ts"],"names":["semver","DeserializationErrorJsonSyntaxInvalid","DeserializationErrorSchemaVersionInvalid","DeserializationErrorSchemaVersionMissing","SERIALIZER_VERSIONS","SERIALIZERS","deserialize","dataString","shareableDangerous","JSON","parse","schemaVer","valid","get","error","SyntaxError","message"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAIA,SACEC,qCADF,EAEEC,wCAFF,EAGEC,wCAHF,QAIO,UAJP;AAMA,SAASC,mBAAT,EAA8BC,WAA9B,QAAiD,cAAjD;AAEA,OAAO,SAASC,WAAT,CAAqBC,UAArB,EAA6D;AAClE,MAAI;AACF,UAAMC,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAX,CAA3B;AAEA,UAAMI,SAAS,GAAGX,MAAM,CAACY,KAAP,CAAaJ,kBAAb,aAAaA,kBAAb,uBAAaA,kBAAkB,CAAEG,SAAjC,CAAlB;;AAEA,QAAIA,SAAJ,EAAe;AAAA;;AACb,YAAML,WAAW,uBAAGD,WAAW,CAACQ,GAAZ,CAAgBF,SAAhB,CAAH,qDAAG,iBAA4BL,WAAhD;;AACA,UAAIA,WAAJ,EAAiB;AACf,eAAOA,WAAW,CAACC,UAAD,CAAlB;AACD;;AAED,YAAM,IAAIL,wCAAJ,CAA6CS,SAA7C,EAAwDP,mBAAxD,CAAN;AACD;;AAED,UAAM,IAAID,wCAAJ,EAAN;AACD,GAfD,CAeE,OAAOW,KAAP,EAAc;AACd,QAAIA,KAAK,YAAYC,WAArB,EAAkC;AAChC,YAAM,IAAId,qCAAJ,CAA0Ca,KAAK,CAACE,OAAhD,CAAN;AACD,KAFD,MAEO;AACL,YAAMF,KAAN;AACD;AACF;AACF","sourcesContent":["import semver from 'semver'\n\nimport type { ScenarioParameters } from '../../algorithms/types/Param.types'\n\nimport {\n  DeserializationErrorJsonSyntaxInvalid,\n  DeserializationErrorSchemaVersionInvalid,\n  DeserializationErrorSchemaVersionMissing,\n} from './errors'\n\nimport { SERIALIZER_VERSIONS, SERIALIZERS } from './versioning'\n\nexport function deserialize(dataString: string): ScenarioParameters {\n  try {\n    const shareableDangerous = JSON.parse(dataString) as { schemaVer?: string }\n\n    const schemaVer = semver.valid(shareableDangerous?.schemaVer)\n\n    if (schemaVer) {\n      const deserialize = SERIALIZERS.get(schemaVer)?.deserialize\n      if (deserialize) {\n        return deserialize(dataString)\n      }\n\n      throw new DeserializationErrorSchemaVersionInvalid(schemaVer, SERIALIZER_VERSIONS)\n    }\n\n    throw new DeserializationErrorSchemaVersionMissing()\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      throw new DeserializationErrorJsonSyntaxInvalid(error.message)\n    } else {\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}