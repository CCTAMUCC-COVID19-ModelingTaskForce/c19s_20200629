{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _get from \"lodash/get\";\nexport function getFormikErrors({\n  identifier,\n  errors,\n  touched\n}) {\n  // const isTouched = (typeof touched === 'boolean' && touched === true) || get(touched, identifier)\n  const errorMessage = _get(errors, identifier);\n\n  if (!errorMessage || _isEmpty(errorMessage)\n  /* || !isTouched */\n  ) {\n      return [];\n    }\n\n  if (typeof errorMessage === 'string') {\n    return [errorMessage];\n  }\n\n  if (Array.isArray(errorMessage)) {\n    return errorMessage;\n  }\n\n  return Object.values(errorMessage);\n}","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/helpers/getFormikErrors.ts"],"names":["getFormikErrors","identifier","errors","touched","errorMessage","Array","isArray","Object","values"],"mappings":";;AAUA,OAAO,SAASA,eAAT,CAAyB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,MAAd;AAAsBC,EAAAA;AAAtB,CAAzB,EAAoF;AACzF;AACA,QAAMC,YAAY,GAAG,KAAIF,MAAJ,EAAYD,UAAZ,CAArB;;AAEA,MAAI,CAACG,YAAD,IAAiB,SAAQA,YAAR;AAAsB;AAA3C,IAAgE;AAC9D,aAAO,EAAP;AACD;;AAED,MAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACpC,WAAO,CAACA,YAAD,CAAP;AACD;;AAED,MAAIC,KAAK,CAACC,OAAN,CAAcF,YAAd,CAAJ,EAAiC;AAC/B,WAAOA,YAAP;AACD;;AAED,SAAOG,MAAM,CAACC,MAAP,CAAcJ,YAAd,CAAP;AACD","sourcesContent":["import { get, isEmpty } from 'lodash'\n\nimport { FormikErrors, FormikTouched, FormikValues } from 'formik'\n\nexport interface GetErrorParams {\n  identifier: string\n  errors?: FormikErrors<FormikValues>\n  touched?: FormikTouched<FormikValues> | true\n}\n\nexport function getFormikErrors({ identifier, errors, touched }: GetErrorParams): string[] {\n  // const isTouched = (typeof touched === 'boolean' && touched === true) || get(touched, identifier)\n  const errorMessage = get(errors, identifier)\n\n  if (!errorMessage || isEmpty(errorMessage) /* || !isTouched */) {\n    return []\n  }\n\n  if (typeof errorMessage === 'string') {\n    return [errorMessage]\n  }\n\n  if (Array.isArray(errorMessage)) {\n    return errorMessage as string[]\n  }\n\n  return Object.values(errorMessage) as string[]\n}\n"]},"metadata":{},"sourceType":"module"}