{"ast":null,"code":"import _pt from \"prop-types\";\n\nvar _jsxFileName = \"/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Buttons/ClipboardButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from 'reactstrap';\nimport { MdContentCopy } from 'react-icons/md';\nimport { copyToClipboard } from '../../helpers/copyToClipboard';\n\n/**\n * When clicked, copies textToCopy to clipboard\n */\nexport function ClipboardButton({\n  textToCopy,\n  className,\n  ...restProps\n}) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [isCopied, setIsCopied] = useState(false);\n\n  const onClick = () => {\n    if (textToCopy) {\n      copyToClipboard(String(textToCopy));\n      setIsCopied(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Button, Object.assign({\n    className: classNames(className, 'clipboard-button'),\n    onClick: onClick\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(MdContentCopy, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, isCopied ? t('Copied!') : t('Copy link')));\n}\n\n_s(ClipboardButton, \"H/6sn4U1CkNKUBqYJLoScRTSHHw=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ClipboardButton;\nClipboardButton.propTypes = {\n  textToCopy: _pt.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ClipboardButton\");","map":{"version":3,"sources":["/home/ekrell/Documents/Work/repos/COVID19/c19s_20200629/covid19_scenarios/src/components/Buttons/ClipboardButton.tsx"],"names":["React","useState","classNames","useTranslation","Button","MdContentCopy","copyToClipboard","ClipboardButton","textToCopy","className","restProps","t","isCopied","setIsCopied","onClick","String"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,MAAT,QAAoC,YAApC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,SAASC,eAAT,QAAgC,+BAAhC;;AAMA;;;AAGA,OAAO,SAASC,eAAT,CAAyB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,SAAd;AAAyB,KAAGC;AAA5B,CAAzB,EAAwF;AAAA;;AAC7F,QAAM;AAAEC,IAAAA;AAAF,MAAQR,cAAc,EAA5B;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;;AACA,QAAMa,OAAO,GAAG,MAAM;AACpB,QAAIN,UAAJ,EAAgB;AACdF,MAAAA,eAAe,CAACS,MAAM,CAACP,UAAD,CAAP,CAAf;AACAK,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,GALD;;AAOA,sBACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEX,UAAU,CAACO,SAAD,EAAY,kBAAZ,CAA7B;AAA8D,IAAA,OAAO,EAAEK;AAAvE,KAAoFJ,SAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBE,QAAQ,GAAGD,CAAC,CAAC,SAAD,CAAJ,GAAkBA,CAAC,CAAC,WAAD,CAAnD,CAFF,CADF;AAMD;;GAhBeJ,e;UACAJ,c;;;KADAI,e;;AANdC,EAAAA,U","sourcesContent":["import React, { useState } from 'react'\n\nimport classNames from 'classnames'\nimport { useTranslation } from 'react-i18next'\nimport { Button, ButtonProps } from 'reactstrap'\nimport { MdContentCopy } from 'react-icons/md'\n\nimport { copyToClipboard } from '../../helpers/copyToClipboard'\n\ninterface ClipboardButtonProps extends ButtonProps {\n  textToCopy?: string\n}\n\n/**\n * When clicked, copies textToCopy to clipboard\n */\nexport function ClipboardButton({ textToCopy, className, ...restProps }: ClipboardButtonProps) {\n  const { t } = useTranslation()\n  const [isCopied, setIsCopied] = useState(false)\n  const onClick = () => {\n    if (textToCopy) {\n      copyToClipboard(String(textToCopy))\n      setIsCopied(true)\n    }\n  }\n\n  return (\n    <Button className={classNames(className, 'clipboard-button')} onClick={onClick} {...restProps}>\n      <MdContentCopy />\n      <span className=\"ml-1\">{isCopied ? t('Copied!') : t('Copy link')}</span>\n    </Button>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}